searchState.loadedDescShard("re_ws_comms", 0, "Communications between server and viewer.\nWebsocket host for relaying <code>LogMsg</code>s to a web viewer.\nFailure to host the Rerun WebSocket server.\nTyped port for use with <code>RerunServer</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal count; never decreasing.\nThe server is a pub-sub architecture.\nAdd a protocol (<code>ws://</code> or <code>wss://</code>) to the given address.\nConnect viewer to server\nContains the error value\nContains the success value\nConnect viewer to server\nBroadcasts messages to all connected clients and stores a …\nInner state of the <code>ReceiveSetBroadcaster</code>, protected by a …\nWebsocket host for relaying <code>LogMsg</code>s to a web viewer.\nAdds a websocket client to the broadcaster and replies all …\nBlocks execution as long as the server is running.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDon’t allow adding to the history while adding/removing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNever garbage collected.\nCreate new <code>RerunServer</code> to relay <code>LogMsg</code>s to a websocket. …\nTotal count; never decreasing.\nTotal count; never decreasing.\nMessages pushed using this method will stay around …\nContains the <code>ws://</code> or <code>wss://</code> prefix.")