searchState.loadedDescShard("rerun_c", 0, "The Rerun C SDK.\nData associated with the blueprint state.\nThis is called <code>rr_bytes</code> in the C API.\nSee <code>rr_component_batch</code> in the C header.\nSee <code>rr_component_column</code> in the C header.\nSee <code>rr_component_descriptor</code> in the C header.\nSee <code>rr_component_type</code> in the C header.\nSee <code>rr_sorting_status</code> in the C header.\nC version of <code>re_sdk::SpawnOptions</code>.\nSee <code>rr_store_info</code> in the C header.\nThis is called <code>rr_string</code> in the C API.\nSee <code>rr_time_column</code> in the C header. Equivalent to Rust …\nSee <code>rr_time_type</code> in the C header. Equivalent to Rust …\nSee <code>rr_timeline</code> in the C header. Equivalent to Rust …\nThe maximum size in bytes of the <code>CError::message</code> field.\nA recording of user-data.\nUsed e.g. for frames in a film.\nIt can happen that we end up inside of …\nNormal wall time.\nSee <code>THREAD_LIFE_TRACKER</code> for more information.\nThe user-chosen name of the application doing the logging.\nA <code>ListArray</code> with the datatype <code>List(component_type)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the timeline.\nThe user-chosen name of the recording being logged to.\nThe sorting order of the times array.\nTimes, a primitive array of i64.\nThe type of the timeline.\nConverts a C-FFI arrow array into a Rust component batch, …\nConverts a C-FFI arrow array into a Rust component batch, …\nAll registered component types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to convert a <code>c_char</code> pointer to a string, raises an …\nAll recording streams created from C.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAccess a C created recording stream.")