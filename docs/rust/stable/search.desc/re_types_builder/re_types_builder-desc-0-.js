searchState.loadedDescShard("re_types_builder", 0, "This crate implements Rerun’s code generation tools.\nComputes and maintains a registry of …\nA collection of arbitrary attributes.\nImplements the formatting pass.\nImplements the codegen pass.\nA high-level representation of the contents of a …\nThe underlying element type for arrays/vectors/maps.\nDumb C-style enum.\nIn-memory generated files.\nA yet-to-be-resolved <code>arrow2::datatypes::DataType</code>.\nA yet-to-be-resolved <code>arrow2::datatypes::Field</code>.\nA high-level representation of a flatbuffers object, which …\nIs this a struct, enum, or union?\nA high-level representation of a flatbuffers field, which …\nThe kind of the object, as determined by its package root …\nThe result of the semantic pass: an intermediate …\nThe underlying type of an <code>ObjectField</code>.\nProper sum-type union.\nThis is the unit type, used for <code>enum</code> variants.\nViews are neither archetypes nor components but are used …\nThe Arrow registry keeps track of all type definitions and …\nThe object’s attributes.\nThe field’s attributes.\nstruct, enum, or union?\nCompiles binary reflection dumps from flatbuffers …\nThis will automatically emit a <code>rerun-if-changed</code> clause for …\nAlso triggers a re-build if anything that affects the hash …\nIts logical <code>DataType</code>\nThe Arrow datatype of this <code>Object</code>, or <code>None</code> if the object …\nThe Arrow datatype of this <code>ObjectField</code>.\nThe object’s multiple layers of documentation.\nThe field’s multiple layers of documentation.\nThe value of an enum type\nThe object’s inner fields, which can be either struct …\nAbsolute filepath of the associated fbs definition.\nAbsolute filepath of the associated fbs definition.\nFormats generated files in-place.\nFormat the path with forward slashes, even on Windows.\nFully-qualified name of the object, e.g. …\nFully-qualified name of the field, e.g. …\nReturns the argument unchanged.\nGenerates user-facing code from <code>crate::Objects</code>.\nGenerates, formats and optionally writes code.\nGenerates C++ code.\nGenerate flatbuffers definition files.\nGenerates .gitattributes files that mark up all generated …\nHandles the first 3 language-agnostic passes of the …\nGenerates Python code.\nGenerates Rust code.\nCalls <code>U::from(self)</code>.\nIts nullability\nWhether the field is nullable.\nThe object’s kind: datatype, component or archetype.\nAll docmentation lines, including the leading tag, if any.\nAdditional custom (opaque) metadata.\nIts name\n<code>PascalCase</code> name of the object type, e.g. <code>Position2D</code>.\nName of the field, e.g. <code>x</code>.\nThis package implements the semantic pass of the codegen …\nMaps fully-qualified type names to their resolved object …\nThe struct field’s <code>order</code> attribute’s value, which is …\nFully-qualified package name of the object, e.g. …\nFully-qualified package name of the field, e.g. …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nThe field’s type.\n<code>Utf8Path</code> of the associated fbs definition in the …\n<code>Utf8Path</code> of the associated fbs definition in the …\nComputes and maintains a registry of …\nA yet-to-be-resolved <code>arrow2::datatypes::DataType</code>.\nA yet-to-be-resolved <code>arrow2::datatypes::Field</code>.\nIts logical <code>DataType</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>arrow2::datatypes::DataType</code> associated with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIts nullability\nAdditional custom (opaque) metadata.\nIts name\nComputes the Arrow datatype for the specified object and …\nRecursively resolves the field using the specified <code>registry</code>…\nRecursively resolves the datatype using the specified …\nRetrieves the <code>arrow2::datatypes::DataType</code> associated with …\nImplements the codegen pass.\nMarkdown files shown at …\nHelpers common to all codegen passes.\nCodegen fbs file that are used for subsequent codegen …\nReturns the argument unchanged.\nGenerates user-facing code from <code>crate::Objects</code>.\nCalls <code>U::from(self)</code>.\nImplements the Python codegen pass.\nImplements the Rust codegen pass.\nAny other URL.\nA URL with our specific format:\nWhether or not the image should be wrapped in <code>&lt;center&gt;</code>.\nIf true, use this example only for the manual, not for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA screenshot of the example.\nTry to generate a <code>&lt;picture&gt;</code> stack, falling back to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny of the extensions lists here are allowed to be missing.\nThe <code>snake_case</code> name of the example.\nParses e.g.  …\nParses e.g. …\nPath to the snippet relative to the snippet directory.\nRemove orphaned files in all directories present in <code>files</code>.\nSet the snippet ID.\nThe human-readable name of the example.\nSet the <code>width</code> attribute of the image.\nWrite file if any changes were made and ensure folder …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves code from an extension cpp file that should go …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAppends a single value to an arrow array builder.\ne.g. <code>static Angle radians(float radians);</code> -&gt; …\nIf the type forwards to another rerun defined type, …\nAliases are only identified by their <code>from</code> name!\nA C++ forward declaration.\nKeeps track of necessary forward decls for a file.\nE.g. <code>DataType</code> in <code>arrow</code> etc.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeeps track of necessary includes for a file.\nReturns the argument unchanged.\nInsert a relative include path.\nInsert an include path that is in the <code>rerun</code> folder of the …\nInsert an include path to another generated type.\n<code>#include &lt;vector&gt;</code> etc\nCalls <code>U::from(self)</code>.\nRemove all includes that are also in <code>other</code>.\nA Cpp struct/class method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDocument an Arrow datatype as human-readable markdown.\nGenerate the snippets reference.\nGenerate the markdown files shown at …\nSee <code>docs/snippets/snippets.toml</code> for more info\nNeatly organized <code>Object</code>s (archetypes, components, etc).\nEverything we know about a snippet, including which …\nMaps objects (archetypes, components, etc) back to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the given name has not been released yet.\nAppends <code>?speculative-link</code> to the given link if the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLike <code>writeln!</code>, but without a <code>Result</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe standard numpy interface for converting to an array …\nThe method used for deferred patch class init. Use this …\n<code>ExtensionClass</code> represents an optional means of extending …\nThe common suffix for method used to convert fields to …\nThe standard python init method.\nThe method used to convert a native type into a pyarrow …\nPython-specific helpers for <code>Object</code>.\nIf the object is a delegating component, returns the …\nThe discovered overrides for field converters.\nThe name of the file where the <code>ObjectExt</code> is implemented\nWhether or not the <code>ObjectExt</code> was found\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the <code>ObjectExt</code> contains <strong>array</strong>()\nWhether the <code>ObjectExt</code> contains a <code>deferred_patch_class()</code> …\nWhether the <code>ObjectExt</code> contains <strong>init</strong>()\nWhether the <code>ObjectExt</code> contains <code>__native_to_pa_array__()</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the object is a delegating component.\nReturns <code>true</code> if the object is a non-delegating component.\nThe name of the module where <code>ObjectExt</code> is implemented\nThe name of this <code>ObjectExt</code>\nOnly applies to datatypes and components.\nAutomatically implement <code>__array__</code> if the object is a single\nOnly implemented for some cases.\nArrow support objects\nEnds with double newlines, unless empty.\nReturns a default converter function for the given field.\nReturns type name as string and whether it was force …\nAutomatically implement <code>__str__</code>, <code>__int__</code>, or <code>__float__</code> as …\nEnds with double newlines, unless empty.\nQuote typing aliases for union datatypes. The types for …\nImplements the Rust codegen pass.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly makes sense for archetypes.\nReturns type name as string and whether it was force …\nOnly makes sense for components &amp; datatypes.\n<code>(Datatype, is_recursive)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe inner elements of the field should be exposed as …\nThe inner elements of the field should be exposed as an …\n<code>Iterator&lt;Item = Option&lt;DeserializationResult&lt;T&gt;&gt;&gt;</code>.\n<code>Iterator&lt;Item = Option&lt;T&gt;&gt;</code>.\n<code>Iterator&lt;Item = DeserializationResult&lt;Option&lt;T&gt;&gt;&gt;</code>.\n<code>Iterator&lt;Item = DeserializationResult&lt;T&gt;&gt;</code>.\n<code>Iterator&lt;Item = T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates tokens that downcast the runtime Arrow array …\nThis generates code that deserializes a runtime Arrow …\nThis generates code that deserializes a runtime Arrow …\nThis generates code that deserializes a runtime Arrow …\nThis generates code that deserializes a runtime Arrow …\nThis generates code that maps the data in an iterator in …\nWhether or not this object allows for the buffer-slice …\nWhether or not this datatype allows for the buffer slice …\nGenerate reflection about components.\nGenerate reflection about components.\nGenerate reflection about components and archetypes.\nReturns <code>crate_name</code> as is, unless it’s <code>re_types</code>, in which …\nThe inner elements of the field will come from an …\nThe inner elements of the field will come from an iterable …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrites out code to serialize a single field.\nWe put this magic prefix in <code>#[doc = &quot;</code> attribute, and then …\nPut a normal <code>// comment</code> in the code.\nReplace <code>#[doc = &quot;…&quot;]</code> attributes with <code>/// …</code> doc …\nA high-level representation of the contents of a …\nWe support doclinks in our docstrings.\nLook for things that look like doclinks to other types, …\nGet the first line of the documentation untagged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll docmentation lines, including the leading tag, if any.\nGet all doc lines that are untagged, or has a tag matching …\nGet all doc lines that start with the given tag.\nParses <code>&quot; \\tag The comment&quot;</code> into <code>(&quot;tag&quot;, &quot;The comment&quot;)</code>.\nConvert Rerun-style doclinks to the target language.\nImplements the formatting pass.\nFormats generated files in-place.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA collection of arbitrary attributes.\nThe underlying element type for arrays/vectors/maps.\nDumb C-style enum.\nA high-level representation of a flatbuffers object, which …\nIs this a struct, enum, or union?\nA high-level representation of a flatbuffers field, which …\nThe kind of the object, as determined by its package root …\nThe result of the semantic pass: an intermediate …\nThe underlying type of an <code>ObjectField</code>.\nProper sum-type union.\nThis is the unit type, used for <code>enum</code> variants.\nViews are neither archetypes nor components but are used …\nThe object’s attributes.\nThe field’s attributes.\nIs this type directly backed by a native arrow <code>Buffer</code>. …\nstruct, enum, or union?\nReturns the crate name of an object, accounting for …\nThe Arrow datatype of this <code>Object</code>, or <code>None</code> if the object …\nThe Arrow datatype of this <code>ObjectField</code>.\nThe object’s multiple layers of documentation.\nThe field’s multiple layers of documentation.\nThe value of an enum type\nThe object’s inner fields, which can be either struct …\nAbsolute filepath of the associated fbs definition.\nAbsolute filepath of the associated fbs definition.\n<code>Some(fqname)</code> if this is an <code>Object</code> or an <code>Array</code>/<code>Vector</code> of …\n<code>Some(fqname)</code> if this is an <code>Object</code>.\nFully-qualified name of the object, e.g. …\nFully-qualified name of the field, e.g. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRuns the semantic pass on a serialized flatbuffers schema.\nResolves a raw <code>FbsEnum</code> into a higher-level representation …\nResolves a raw <code>crate::Object</code> into a higher-level …\nRuns the semantic pass on a deserialized flatbuffers …\nIs the destructor trivial/default (i.e. is this simple …\nIs the destructor trivial/default (i.e. is this simple …\nIs the destructor trivial/default (i.e. is this simple …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the field is nullable.\nTrue if this is some kind of array/vector.\nReturns true if this object is part of testing and not to …\nReturns true if this object is part of testing and not to …\nThe object’s kind: datatype, component or archetype.\nReturns the module name of an object.\n<code>PascalCase</code> name of the object type, e.g. <code>Position2D</code>.\nName of the field, e.g. <code>x</code>.\nMaps fully-qualified type names to their resolved object …\nReturns all available objects of the given kind.\nThe struct field’s <code>order</code> attribute’s value, which is …\nThe <code>PascalCase</code> name of the field, e.g. <code>TranslationAndMat3x3</code>…\nFully-qualified package name of the object, e.g. …\nFully-qualified package name of the field, e.g. …\nReturns element type for arrays and vectors.\nTry to find the relative file path of the <code>.fbs</code> source file.\nThe <code>snake_case</code> name of the object, e.g. …\nThe <code>snake_case</code> name of the field, e.g. …\nThe field’s type.\nEnsure that each field of an archetype has exactly one of …\nTypename of the view. Not a fully qualified name, just the …\n<code>Utf8Path</code> of the associated fbs definition in the …\n<code>Utf8Path</code> of the associated fbs definition in the …\nFile specific information. Symbols declared within a file …\nThe size (octets) of the <code>base_type</code> field.\nFile that this Enum is declared in.\nFile that this Object is declared in.\nFile that this Service is declared in.\nThe size (octets) of the <code>element</code> field, if present.\nAll the files used in this compilation. Files are relative …\nFilename, relative to project root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNames of included files, relative to project root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOffset into the vtable for tables, or into the struct.\nIf the field uses 64-bit offsets.\nNumber of padding octets to always add after this field. …\nVerifies that a buffer of bytes contains a <code>Schema</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nReturns the variant’s name or “” if unknown.\nNew schema language features that are not supported by old …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReport which holds accumulated errors and warnings.\nUsed to accumulate errors and warnings.\nError about a file as a whole.\nThis outputs all errors and warnings to stderr and panics …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")