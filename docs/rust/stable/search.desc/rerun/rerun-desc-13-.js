searchState.loadedDescShard("rerun", 13, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the the underlying writer.\nUnwraps the the underlying writer.\nAn encoded crate::Message\nCreate a new <code>DictionaryTracker</code>.\nCreate a new <code>DictionaryTracker</code>.\nReturn whether the writer is configured to preserve the …\nReturns the arrow <code>SchemaRef</code> for this arrow file.\nConverts a schema to an IPC message and returns it encoded …\nConverts a schema to an IPC message along with …\nSet the dictionary ID for <code>field</code>.\nTry to create a new writer, with the schema written as …\nTry to create a new writer, with the schema written as …\nTry to create IpcWriteOptions, checking for incompatible …\nTry to create a new file writer with the writer wrapped in …\nTry to create a new stream writer with the writer wrapped …\nTry to create a new writer with IpcWriteOptions\nTry to create a new writer with <code>IpcWriteOptions</code>.\nConfigures compression when writing IPC files.\nSet whether the IPC writer should preserve the dictionary …\nWrite a record batch to the file\nWrite a record batch to the stream\nWrite a message’s IPC data and buffers, returning …\nAdds a key-value pair to the FileWriter’s custom metadata\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a Python object to an arrow-rs type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the implemented type into a Python object while …\nCreates a new <code>PyErr</code> of this type.\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nGet a reference to a column’s array by index.\nGet a reference to a column’s array by name.\nGet a reference to all columns in the record batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of bytes of memory occupied …\nGet a reference to a column’s array by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch field names of structs and lists. If set to <code>true</code>, …\nCreate a new RecordBatchIterator.\nCreates a new <code>RecordBatchOptions</code>\nCreates a new empty <code>RecordBatch</code>.\nReads the next <code>RecordBatch</code>.\nReturns the number of columns in the record batch.\nReturns the number of rows in each column.\nProjects the schema onto the specified columns\nRemove column by index and return it.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns the <code>Schema</code> of the record batch.\nReturns a reference to the <code>Schema</code> of the record batch.\nReturn a new RecordBatch where each column is sliced …\nCreate a <code>RecordBatch</code> from an iterable list of pairs of the …\nCreate a <code>RecordBatch</code> from an iterable list of tuples of the\nCreates a <code>RecordBatch</code> from a schema and columns.\nCreates a <code>RecordBatch</code> from a schema and columns, with …\nSets the match_field_names of RecordBatchOptions and …\nSets the row_count of RecordBatchOptions and returns self\nOverride the schema of this <code>RecordBatch</code>\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nConvert <code>ArrayRef</code> columns appending to an existing <code>Rows</code>\nSets the length of this <code>Rows</code> to 0\nConvert <code>ArrayRef</code> columns into <code>Rows</code>\nConvert <code>Rows</code> columns into <code>ArrayRef</code>\nThe row’s bytes, with the lifetime of the underlying …\nReturns an empty <code>Rows</code> with capacity for <code>row_capacity</code> rows …\nEncode dictionary values not preserving the dictionary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Rows instance from the given binary data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the <code>Row</code> in this <code>Rows</code>\nCreate a new <code>RowConverter</code> with the provided schema\nCreate a new column with the given data type\nCreate a new column with the given data type and …\nReturns the number of <code>Row</code> in this <code>Rows</code>\nCreate owned version of the row to detach it from the …\nCreates a <code>Row</code> from the provided <code>bytes</code>.\nReturns a <code>RowParser</code> that can be used to parse <code>Row</code> from …\nAppend a <code>Row</code> to this <code>Rows</code>\nReturns the row at index <code>row</code>\nGet borrowed <code>Row</code> from owned version.\nReturns the row at <code>index</code> without bounds checking\nReturns the size of this instance in bytes\nReturn size of this instance in bytes.\nReturns the size of this instance in bytes\nCheck if the given fields are supported by the row format.\nCreate a BinaryArray from the Rows data without …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nReturns a reference to the underlying <code>Buffer</code>\nThe data type of the <code>Tensor</code>\nThe name of dimension i\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates if the memory layout column major\nIndicates if the data is laid out contiguously in memory\nIndicates if the memory layout row major\nThe names of the dimensions\nThe number of dimensions\nCreates a new Tensor using column major memory layout\nCreates a new Tensor using row major memory layout\nThe sizes of the dimensions\nThe total number of elements in the <code>Tensor</code>\nThe number of bytes between elements in each dimension\nCreates a new <code>Tensor</code>\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nReturns the number of chunks\nReturns reference to the chunks\nCounts the number of ones\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the chunks\nReturns an iterator over chunks of 64 bits represented as …\nReturns an iterator over chunks of 64 bits, with the …\nReturns the number of leading padding bits\nCreate a from a byte array, and and an offset and length …\nCreate a new <code>BitChunks</code> from a byte array, and an offset …\nReturns the prefix, if any\nReturns the bitmask of remaining bits\nReturns the number of remaining bits, guaranteed to be …\nReturns the suffix, if any\nReturns the number of trailing padding bits\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BitIterator</code> from the provided <code>buffer</code>, and …\nCreate a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …\nCreate a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts numeric type to a <code>String</code>\nCreates a new set of format options\nReturns an <code>ArrayFormatter</code> that can be used to format <code>array</code>\nFallibly converts this to a string\nReturns a <code>ValueFormatter</code> that implements <code>Display</code> for the …\nOverrides the format used for <code>DataType::Date32</code> columns\nOverrides the format used for <code>DataType::Date64</code> columns\nIf set to <code>true</code> any formatting errors will be written to …\nOverrides the format used for duration columns\nOverrides the string used to represent a null\nOverrides the format used for <code>DataType::Time32</code> and …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nWrites this value to the provided <code>Write</code>\nA writer that allows writing to a <code>String</code> like an …\nExecutes the given command directly.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StringWriter</code>\nQueues the given command for further execution.\nPerforms a set of actions within a synchronous update.\nWe give an actual name to <code>Tuid</code>, and inject that name into …\nAll ones.\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\nIf true, we hide the native window decoration (the top bar …\nA table mapping all combination of <code>Hue</code> and <code>Scale</code> to a …\nA token representing a color in the global color table.\nExtension trait for <code>egui::Context</code>.\nA single row in the controls table.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nA help popup where you can show markdown text and controls …\nA hue for a <code>ColorToken</code>.\nHelper to show text with icons in a row. Usually created …\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nDisplay a short summary. Used in lists.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nHelper to add <code>egui::Modifiers</code> as text with icons. Will …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nHelper to show mouse buttons as text/icons.\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA color scale for a <code>ColorToken</code>.\nA collapsible section header, with support for optional …\nDisplay everything as wide as available, without height …\nDisplay as much information as possible in a compact way. …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nSpecifies the context in which the UI is used and the …\nLabel displaying the placeholder text for a yet unnamed …\nAdd an item to the row.\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nGet the <code>egui::Color32</code> corresponding to the provided …\nColor table for all colors used in the UI.\nAdd a single control row to the last controls section.\nCreate a new empty control section.\nAdd a controls section.\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nAdd a docs link, to be shown in the top right corner.\nHelpers for drag and drop support for reordering …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nStroke used to indicate that a UI element is a container …\nShows an error label with the entire error text and copies …\nText colored to indicate an error.\nShows a small error label with the given text on hover and …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturn the keyboard shortcut for this command, nicely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nAdd an icon to the row.\nCreate an <code>IconText</code> with the given items.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll keyboard shortcuts, with the primary first.\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nConvenience function to create a <code>list_item::list_item_scope</code>…\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nAdd a markdown section.\nShow some markdown\nConditionally collapsing header.\nShow this command as a menu-button.\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nBuild a new color table by calling the provided closure …\nCreate a new help popup.\nCreate a new control row.\nCreate a new, empty <code>IconText</code>.\nPaint a collapsing triangle in the Rerun’s style.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nDisplay the header.\nShow the command palette, if it is visible.\nAdds a non-interactive, optionally tinted small icon.\nShows a success label with a large border.\nText colored to indicate success.\nAdd text to the row.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nBinary toggle switch.\nHeight of the top-most bar.\nShow the help popup. Usually you want to show this in …\nMargin on all sides of views.\nShows a warning label with a large border.\nText colored to indicate a warning.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nFull-text, case-insensitive matcher.\nState and UI for the filter widget.\nAccumulates highlight ranges for the various parts of a …\nActivate the filter.\nAdd ranges to a given part index.\nReturn a filter matcher for the current query.\nGiven a list of highlight sections defined by start/end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the filter currently active?\nIs the filter currently active?\nMatch a path and return the highlight ranges if any.\nIs the filter set to match everything?\nIs the filter set to match nothing?\nMerge another <code>Self</code>.\nAdd a single range to a given part index.\nReturn the filter if any.\nRemove the ranges for the given part and (if any) return …\nReturn the current session ID of the filter widget, if …\nDisplay the filter widget.\n<code>&gt;</code>\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nShortcut icons\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that mostly delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a content with a custom UI closure.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nControls whether <code>Self</code> calls <code>ListItemContent::ui</code> when the …\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the desired width based on the provided content width. …\nSet the desired width for the entire content.\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nHelper object to handle a <code>ModalWrapper</code> window.\nShow a modal window with Rerun style using <code>egui::Modal</code>.\nResponse returned by <code>ModalWrapper::ui</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model the next time the <code>ModalHandler::ui</code> method …\nWhether the modal should remain open.\nEnclose the contents in a scroll area.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAn enum representing the available verbosity levels of the …\nThe “trace” level.\nThe “warn” level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormats an instance number enclosed in square brackets: …\nEasily build syntax-highlighted text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe payload type is acceptable and could successfully be …\nMake this the active application.\nIf this is a recording, switch to it.\nWe are looping the entire recording.\nSelect a specific application, to see which recordings and …\nGlobal options for the viewer.\nSelection and hover state.\nA unique id for a type of Blueprint contents.\nThe stream tree from the blueprint debug time panel\nThe stream tree from the blueprint debug time panel, when …\nBlueprint tree from the blueprint panel (left panel)\nHovering/selecting in the blueprint tree.\nBlueprint tree from the blueprint panel (left panel), when …\nWe store the entire edit history of a blueprint in its …\nStop traversal and return this value.\nA cache for memoizing things in order to speed up …\nDoes memoization of different objects for the immediate …\nClear the active blueprint.\nClear the active blueprint and enable heuristics.\nClear everything that came from this source, and close the …\nClose all stores and show the welcome screen again.\nClose this app and all its recordings.\nClose a recording or blueprint (free its memory).\nThe various kinds of items that may be represented and for …\nThe various scopes for which we want to track collapsed …\nA collapsed identifier.\nColormap together with the range of image values that is …\nReceiver for the <code>CommandSender</code>\nSender that queues up the execution of commands.\nError type for a fallback request.\nProvides fallback values for components, implemented …\nResult for a fallback request to a provider.\nThe fallback provider is not able to handle the given …\nA component of an entity from the chunk store.\nHow to display components in a Ui.\nSpecifies which UI callbacks are available for a component.\nA viewport container.\nThe dragged content is made only of <code>Contents</code>.\nThe name of a <code>Contents</code>.\nContinue tree traversal\nThe screenshot will be copied to the clipboard.\nAdditional filter for visualizability on top of the …\nThe result of executing a single data query for a specific …\nThis is the primary mechanism through which data is passed …\nAn entity or instance in the context of a view’s data …\nIdentifier for a <code>DataResultNode</code>\nA single node in the <code>DataResultTree</code>\nA hierarchical tree of <code>DataResult</code>s\nA place where data comes from, e.g. the path to a .rrd or …\nDisplay the component in a read-only way.\nHelper to handle drag-and-drop operations.\nDrop a specific entity from a store.\nShow a timeline of the blueprint data.\nThe dragged content is made of entities.\nAdd a task, run on a background thread, that saves …\nFollow the latest available data\nGive this view lots of space. Used for spatial views …\nHover highlight, sorted from weakest to strongest.\nApply hover highlight, does <em>not</em> exclude a selection …\nTrait for naming/identifying <code>crate::VisualizerSystem</code>s &amp; …\nThe payload type is irrelevant to me.\nCaches the results of decoding …\nRepresents the contents of an <code>Image</code>, <code>SegmentationImage</code> or …\nStats about an image.\nList of entities that match the indicator components of a …\nAn entity or instance from the chunk store.\nCombination of selection &amp; hover highlight which can occur …\nThe dragged content is made of a collection of <code>Item</code>s we do …\nOne “thing” in the UI.\nAn ordered collection of <code>Item</code> and optional associated …\nContext information that a view might attach to an item …\nUse latest-at semantics.\nDisplay a short summary. Used in lists.\nLoad some data.\nThis view can share space with others\nAll different\nA reference to a value that is <em>maybe</em> mutable.\nList of entities that are <em>maybe</em> visualizable with a given …\nEdit the component over multiple <code>re_ui::list_item::ListItem</code>…\nThis <code>Contents</code> has been given a name by the user.\nNo selection highlight at all.\nNo hover highlight.\nLooping is off.\nPath to a specific entity in a specific store used for …\nTime doesn’t move\nThis <code>Contents</code> is unnamed and should be displayed with this …\nTime move steadily\nInformation about a view that is published each frame by …\nContext for a latest-at query in a specific view.\nRange &amp; type of chunk store query.\nProperties of a view that as recommended to be spawned by …\nUI config for the current recording (found in <code>EntityDb</code>).\nThe payload type is correct, but it’s content cannot be …\nReset the <code>Viewer</code> to the default state\nMany <code>ResolvedAnnotationInfo</code>, with optimization for a …\nAll the same\nThe screenshot will be saved to disk.\nInfo given to egui when taking a screenshot.\nWhere to put the screenshot.\nShould apply selection highlight (i.e. the exact selection …\nWe are looping within the current loop selection.\nSelection highlight, sorted from weakest to strongest.\nDisplay everything as wide as available, without height …\nArrow serialization failed.\nSet the active timeline for the given recording.\nSets the focus to the given item.\nSet the item selection.\nA closely related object is selected, should apply similar …\nEdit the component in a single <code>re_ui::list_item::ListItem</code> …\nContinue tree traversal but skip the children of the …\nThe current Blueprint and Recording being displayed by the …\nInterface for accessing all blueprints and recordings\nA recording (or blueprint)\nStream tree from the time panel\nHovering/selecting in one of the streams trees.\nStream tree from the time panel, when the filter is active\nCommands used by internal system components\nInterface for sending <code>SystemCommand</code> messages.\nOutput of view system execution.\nStats about a tensor or image.\nCaches tensor stats using a <code>RowId</code>, i.e. a specific …\nHovering/Selecting in a 3D space.\nControls the global view and progress of the time.\nDrag value widget for editing time values for both …\nUse a time range on the currently active timeline.\nThe time range we are currently zoomed in on.\nDisplay as much information as possible in a compact way. …\nHovering/Selecting in a 2D space.\nProvides a fallback value for a given component with known …\nSpecifies the context in which the UI is used and the …\nNot directly returned by the fallback provider, but useful …\nUpdate the blueprint with additional data\nA fallback value was successfully provided.\nCaches meshes based on media type &amp; row id.\nA viwport view.\nDefines a class of view without any concrete types making …\nRegistry of all known view types.\nThe context associated with a view.\nView context that can be used by view parts and ui methods …\nHighlights of a specific entity path in a specific view.\nHighlights in a specific view.\nUsed to publish info aboutr each view.\nHeuristics for spawning views of a given class.\nUnserialized frame to frame state of a view.\nState for the <code>View</code>s that persists across frames but …\nUnique name for a system within a given <code>crate::ViewClass</code>.\nUtility for registering view systems, passed on to …\nCommon things needed by many parts of the viewer.\nType to be returned by visitor closure to control the tree …\nList of entities that can be visualized at some point in …\nContext object returned by …\nElement of a scene derived from a single archetype query.\nWhat is the active blueprint for the active application?\nDirectly access the <code>Caches</code> for the active recording.\nThe current loop range, iff selection looping is turned on.\nDirectly access the <code>EntityDb</code> for the active recording.\nDirectly access the <code>EntityDb</code> for the active recording.\nAdds a new highlight to the entity highlight, combining it …\nAdd a new outline mask to this entity path, combining it …\nAdds a new view class.\nAdds a new hover highlight to the entity highlight, …\nRegisters how to show a given component in the UI.\nRegisters how to view, and maybe edit, a given component …\nAdds a new selection highlight to the entity highlight, …\nRegisters how to view, and maybe edit, a given component …\nGet a flags value with all known bits set.\nThe <code>app_id</code> of the current recording.\nGlobal options for the whole viewer.\nArchetype name in which context the component is needed.\nChecks if items are draggable based on the list of …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a mutable reference of <code>Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nReturns the mutable reference, if possible.\nCalled once per frame to potentially flush the cache.\nCall once per frame to potentially flush the cache(s).\nSee <code>re_viewer_context::Cache::begin_frame</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current active blueprint.\nOptional archetype of the View’s blueprint properties.\nUI config for the current blueprint.\nThe active blueprint.\nThe active blueprint.\nThe <code>StorageEngine</code> for the active blueprint.\nDisable garbage collection of the blueprint.\nThe blueprint query used for resolving blueprint in this …\nThe timepoint to use when writing an update to the …\nThe timepoint to use when writing an update to the …\nThe image data, row-wise, with stride=width.\nThe row id that contained the blob.\nAll the loaded recordings and blueprints.\nThings that need caching and are shared across the whole …\nPath to the directory suitable for storing cache data.\nThings that need caching.\nChoose the default visualizers to enable for this entity.\nQueries a View type by class name, returning <code>None</code> if it is …\nClear the currently active blueprint\nClear the currently active blueprint and enable the …\nCloned blueprints are the ones the user has edited, i.e. …\nClears a component in the blueprint store by logging an …\nClears a component in the blueprint store by logging an …\nRemove all open recordings and applications, and go to the …\nAfter calling this, there is no way to redo what was once …\nClears the current selection out.\nClose this application and all its recordings.\nReturns <code>ColorModel::L</code> for depth and segmentation images.\nCreates a new command channel.\nInterface for sending commands back to the app\nReturns all the component sets that the system is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nLatest-at results for all component defaults in this view.\nReturns from which entity path an override originates from.\nHow to display components.\nCreate a <code>CollapsedId</code> for a container in this scope.\nWhether all set bits in a source flags value are also set …\nReturns true if the exact selection is part of the current …\nThe style to use for displaying this view name in the UI.\nExecuted context systems, may hold state that the ui …\nThe current time query, based on the current time control.\nThe current time query, based on the current time control.\nQuery for latest value at the currently selected time on …\nOptionally retrieves a chunk store reference from the …\nAdditional filter for visualizability based on component …\nShow data while respecting the given UI layout.\nCreate a <code>CollapsedId</code> for a data result in this scope.\nThe default blueprint (i.e. the one logged from code), if …\nDefault cache directory\nDefault latest-at query\nDefault query range for this view.\nDetermines the set of visible entities for a given view.\nThe intersection of a source flags value with the …\nUser-facing name of this view class.\nReturns the user-facing name for the given view class.\nDowncasts this state to a mutable reference of a concrete …\nDowncasts this state to a reference of a concrete type.\nHelper object to manage drag-and-drop operations.\nDraw data gathered during execution of the view part …\nThe <code>egui::Context</code>.\nConvert to an <code>egui::Id</code>.\nGet a flags value with all bits unset.\nCreate a <code>CollapsedId</code> for an entity in this scope.\nMutable access to a <code>EntityDb</code> by id\nWhere to retrieve the data from.\nAccesses a cache for reading and writing.\nDecode some image data and cache the result.\nThe key should be the <code>RowId</code> of the <code>TensorData</code>. NOTE: …\nRead in some video data and cache the result.\nQueries the chunk store and performs data conversions to …\nQueries the chunk store and performs data conversions to …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtend the selection with more items.\nExtend the selection with the provided items.\nAdditional UI displayed in the tab title bar, between the …\nProvides a fallback value for a given component, first …\nReturns the fallback provider for this visualizer.\nFilters a set of “maybe visualizable” entities …\nDepth-first search of a node based on the provided …\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nThe first selected object if any.\nItem that got focused on the last frame if any.\nDescribes the format of <code>Self::buffer</code>.\nplayback fps\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe full range of times for the current timeline\nQueries a View type by class name and logs if it fails, …\nGet the value of the element at the given index.\nBridge to <code>re_renderer</code>\nHandle updating last frame state and trigger callbacks on …\nConsistently handle the selection, hover, drag start …\nPrecomputed hash of the string.\nRange with special highlight.\nHover/select highlighting information for this view.\nReturns the currently hovered objects.\nReturns the currently hovered objects.\nReturns the currently hovered objects.\nThe store hub, which keeps track of all the default and …\nIcon used to identify this view class.\nDetermines the icon to use for a given container kind.\nUnique name for a system within a given <code>crate::ViewClass</code>.\nIdentifier string of this view class.\nImplements the <code>ComponentFallbackProvider</code> trait for a given …\nInclude the “Welcome screen” application in the …\nFor each visualizer, the set of entities that have at …\nFor each visualizer, the set of entities that have at …\nThese are not required, but if <em>any</em> of these are found, it …\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert a new recording or blueprint into the <code>StoreHub</code>.\nInspect the blueprint timeline.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each item in this selection, if it refers to the first …\nIs the given blueprint id the active blueprint for any app …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nCheck if the selection is empty.\nReturns true if the current component’s value was …\nShorthand for checking for interactivity on data overrides.\nCheck the collapsed state for the given <code>CollapsedId</code>.\nAre we running inside the Safari browser?\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nIs the current time in the selection range (if any), or at …\nShorthand for checking for visibility on data overrides.\nCreate a <code>CollapsedId</code> for an <code>Item</code> of supported kind.\nYield a set of contained flags values.\nReturns an iterator over the items and their selected …\nIterates over all <code>DataResult</code>s of the <code>ViewQuery</code>.\nIterates over all entities of the <code>ViewQuery</code>.\nReturns a mutable iterator over the items and their …\nYield a set of contained named flags values.\nIterates over all registered View class types, sorted by …\nIter over all of the currently visible <code>DataResult</code>s for a …\nIterate over all visualizer data that can be downcast to …\nColor, Depth, or Segmentation?\nShow a label while respecting the given UI layout.\nThe time on the timeline we’re currently at.\nControls how likely this view will get a large tile in the …\nReturns the number of items in the selection.\nFor each passed <code>EntityPath</code>, walk up the tree and find the …\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResultNode</code> in the tree based on an <code>EntityPath</code>…\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on an <code>EntityPath</code>.\nThe selected slice of time that is called the “loop …\nMapbox API key (used to enable Mapbox-based map view …\nPicks the stronger selection &amp; hover highlight from two …\nReturn the maximum time set for this drag value.\nFor each visualizer, return the set of entities that may …\nMapping from class and system to entities for the store\nWhere start of the range.\nReturn the minimum time set for this drag value.\nFast access to an <code>Arc</code> sharing the same <code>Annotations::missing</code>…\nShow a multi-line editor for this instance of this …\nName of the screenshot (e.g. view name), excluding file …\nHuman-readable name of the view.\nCreate a <code>DragAndDropManager</code> by providing a list of …\nCreate a new <code>StoreHub</code>.\nCalled once for every new view instance of this class.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of entities that matched the query, including …\nOf the matched queries, the number of entities that are …\nHow far back in time can we undo?\nCalled at the start of each frame\nFired when the timeline is paused.\nFired when the timeline is played.\nCalled once upon registration of the class\nReact to the chunk store’s changelog, if needed.\nReact to the chunk store’s changelog, if needed.\nFired when the a different timeline is selected.\nFired when the timepoint changes.\nDisplay the currently dragged payload as a pill in the UI.\nAll <code>DataResult</code>s that are queried by active visualizers.\nReturns a placeholder value for a given component, solely …\nPreferred aspect ratio for the ui tiles of this view.\nThe accumulated property overrides for this <code>DataResult</code>.\nRemove any empty <code>EntityDb</code>s from the hub\nCall <code>EntityDb::purge_fraction_of_ram</code> on every recording\nAttempt to free up memory.\nAttempt to free up memory.\nReturns the list of components that the system <em>queries</em>.\nQuery which didn’t yield a result for the component at …\nReturns the query range for this data result.\nWhat range is queried on the chunk store.\nAll the query results for this frame.\nThe range of values, ignoring <code>NaN</code>s.\nThe range of values, ignoring <code>NaN</code>s.\nAllowed range for value.\nQueries a raw component from the default blueprint.\nGet a read-only <code>StoreContext</code> from the <code>StoreHub</code> if one is …\nUI config for the current recording (found in <code>EntityDb</code>).\nHash together with the View class id to the …\nDetermines a suitable origin given the provided set of …\nThe active recording.\nThe active recording.\nThe current active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StoreId</code> of the active recording.\nThe <code>StoreId</code> of the active recording.\nWhere on screen (in ui coords).\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nReceive a <code>SystemCommand</code> to be executed if any is queued.\nReceive a <code>UICommand</code> to be executed if any is queued.\nIf set, everything after this time is in “redo-space” …\nRuntime info about components and archetypes.\nRegisters a new <code>ViewContextSystem</code> type for a view class …\nRegisters a new <code>VisualizerSystem</code> type for a view class …\nQueries which UI types are registered for a component.\nThe intersection of a source flags value with the …\nRemoves a view class from the registry.\nRemove the current loop selection.\nRemove any recordings with a network source pointing at …\nThe global <code>re_renderer</code> context, holds on to all GPU …\nReturns the minimal set of components that the system …\nResets a blueprint component to the value it had in the …\nThe range of time we are currently zoomed in on.\nAn alternative store and entity path to use for the …\nRetains elements that fulfill a certain condition.\nReplace “dangerous” characters by a safe one.\nPersist any in-use blueprints to durable storage.\nHelper to save a component to the blueprint store.\nSave some bytes to disk, after first showing a save dialog.\nSaves a recursive override OR clears both (!) individual &amp; …\nMake sure the selected timeline is a valid one\nReturns the current selection.\nReturns the current selection.\nReturns the current selection.\nSelection &amp; hovering state.\nUi shown when the user selects a view of this class.\nSend a command to be executed.\nSend a command to be executed.\nShow a sequence drag value widget.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nActivate a recording by its <code>StoreId</code>.\nChange the active <code>ApplicationId</code>\nChange the active/visible recording id.\nMake blueprint active for a given <code>ApplicationId</code>\nChange which blueprint is the default for a given …\nSet the feedback to display to the user based on drop …\nplayback fps\nSet the hovered objects. Will be in <code>Self::hovered_items</code> on …\nSet the current loop selection without enabling looping.\nSet the collapsed state for the given <code>CollapsedId</code>.\nSet the collapsed state for the given item in every …\nSets several objects to be selected, updating history as …\nplayback speed\nThe range of time we are currently zoomed in on.\nShould we enable the heuristics during this frame?\nShow milliseconds, RAM usage, etc.\nDisplays an overlay for debugging picking.\nCheck if the selection contains a single item and returns …\nShow a single-line editor for this instance of this …\nThe root of the space in which context the query happens.\nDetermines which views should be spawned by default for …\nplayback speed\nPopulate a <code>StoreHubStats</code> based on the active app.\nAll the loaded recordings and blueprints.\nThe current view of the store\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nControls whether the visible time range UI should be …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild an egui table and configure it for the given UI …\nWhere to put the screenshot.\nTarget entity path which is lacking the component and …\nShow a temporal drag value widget.\nUsed only for tests\nThe current time.\nThe current time of the time panel, how fast it is moving, …\nThe current time.\nThe current time.\nHow much time the full view covers.\nThe time type of the currently selected timeline\nThe range of time we are currently zoomed in on.\nWhat time zone to display timestamps in.\nThe currently selected timeline\nThe timeline we’re on.\nBest-effort.\nConvert this image to an encoded PNG\nSee <code>Self::to_dynamic_image</code>.\nCast the buffer to the given type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSelect passed objects unless already selected in which …\nThe <code>DataResultTree</code> for the query\nIf true, this path is not actually included in the query …\nTries to provide a fallback value for a given component.\nTries to show a UI for editing a component.\nDraws the ui for this view class and handles ui events.\nShow a UI for a component instance.\nShow a UI for a single raw component.\nWhat portion of the UI to take a screenshot of (in ui …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMove the time forward (if playing), and perhaps pause if we…\nUpdates the internal visualizability filter state based on …\nCustom path to the FFmpeg binary.\nPreferred method for video decoding on web.\nOverride the path to the FFmpeg binary.\nGet the video decoder settings.\nCreate a <code>CollapsedId</code> for a view in this scope.\nRegistry of all known classes of views.\nThe view context, if available.\nThe id of the space in which context the query happens.\nThe view state of the view in which the query is executed.\nExecuted view systems, may hold state that the ui method …\nDepth-first traversal of the tree, calling <code>visitor</code> on each …\nIndicates whether we should visit the children of the …\nDepth-first traversal of the tree, calling <code>visitor</code> on each …\nCreate context object that is passed to all of this …\nInformation about which components are queried by the …\nWhich <code>ViewSystems</code>s to pass the <code>DataResult</code> to.\nApp ID used as a marker to display the welcome screen.\nThe current entity filter session id, if any.\nThe current entity filter session id, if any.\nCorresponding 2D spaces and pixel coordinates (with …\nWhere in this 2D space (+ depth)?\nThe point in 3D space that is hovered, if any.\nThe 3D space with the camera(s)\nWhich store does this streams tree correspond to?\nPath to an entity that is currently tracked by the …\nImage did not match snapshot\nContains the error value\nThe test Harness. This contains everything needed to run …\nBuilder for <code>Harness</code>.\nA lazy renderer that initializes the renderer on the first …\nContains the success value\nError opening the existing snapshot (it probably doesn’t …\nError rendering the image\nThe size of the image did not match the snapshot\nUtility to collect snapshot errors and display them at the …\nError writing the snapshot output\nCheck if the result is an error and add it to the list of …\nCreate a new Harness with the given app closure.\nCreate a new Harness from the given eframe creation …\nCreate a new Harness with the given app closure and a …\nCreate a new Harness with the given ui closure.\nCreate a new Harness with the given ui closure and a state.\nCreate a <code>Harness</code> via a <code>HarnessBuilder</code>.\nResize the test harness to fit the contents. This only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a <code>TexturesDelta</code> by updating the renderer’s …\nCheck if there are any errors.\nImage snapshot test. The snapshot will be saved under …\nImage snapshot test with custom options.\nAccess the <code>egui::RawInput</code> for the next frame.\nAccess the <code>egui::RawInput</code> for the next frame mutably.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this into a <code>Result&lt;(), Self&gt;</code>.\nAccess the <code>kittest::State</code>.\nCreate a new <code>SnapshotOptions</code> with the default values.\nCreate a new Harness with the given app closure. Use the …\nCreate a new Harness from the given eframe creation …\nCreate a new Harness with the given app closure and a …\nCreate a new Harness with the given ui closure. Use the …\nCreate a new Harness with the given ui closure and a state.\nAccess the <code>egui::FullOutput</code> for the last frame.\nChange the path where the snapshots will be saved. The …\nThe path where the snapshots will be saved. The default is …\nPress a key. This will create a key down event and a key …\nPress a key with modifiers. This will create a key down …\nRender the <code>crate::Harness</code> and return the resulting image.\nRender the last output to an image.\nSet the <code>TestRenderer</code> to use for rendering.\nRun until\nRun until\nRun a number of steps. Equivalent to calling <code>Harness::step</code> …\nSet the <code>pixels_per_point</code> of the window. Note: If you only …\nSet the size of the window. Note: If you only want to set …\nWe use this to pass the glow / wgpu render state to …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nAccess the state.\nAccess the state mutably.\nRun a frame. This will call the app closure with the …\nChange the threshold for the image comparison. The default …\nThe threshold for the image comparison. The default is <code>0.6</code> …\nImage snapshot test.\nImage snapshot test with custom options.\nRun until\nRender an image using the setup <code>crate::TestRenderer</code> and …\nRender an image using the setup <code>crate::TestRenderer</code> and …\nPanics if there are any errors, displaying each.\nEnable wgpu rendering with a default setup suitable for …\nEnable wgpu rendering with the given setup.\nSet the maximum number of steps to run when calling …\nSet the <code>pixels_per_point</code> of the window.\nSet the size of the window.\nSet the time delta for a single <code>Harness::step</code>.\nActual size\nCount of pixels that were different\nPath where the diff image was saved\nThe error that occurred\nThe error that occurred\nThe error that occurred\nExpected size\nName of the test\nName of the test\nPath where the snapshot was expected to be\nPath where a file was expected to be written\nAn <code>accesskit::ActionRequest</code> event. When using an …\n<code>\\</code>\n`, also known as “backquote” or “grave”\nA filter for nodes. The filters are combined with a …\n<code>:</code>\n<code>,</code>\nThe state of an element (e.g. Button), either pressed or …\n<code>=</code>\nKittest event sent to the GUI application.\nThe keys (currently these match egui’s keys).\n<code>-</code>\nA node in the accessibility tree. This should correspond …\n<code>0</code> (from main row or numpad)\n<code>1</code> (from main row or numpad)\n<code>2</code> (from main row or numpad)\n<code>3</code> (from main row or numpad)\n<code>4</code> (from main row or numpad)\n<code>5</code> (from main row or numpad)\n<code>6</code> (from main row or numpad)\n<code>7</code> (from main row or numpad)\n<code>8</code> (from main row or numpad)\n<code>9</code> (from main row or numpad)\n<code>.</code>\n<code>|</code>, a vertical bar\n<code>+</code>\nProvides convenience methods for querying nodes in the …\n<code>?</code>\n<code>&#39;</code>\n<code>;</code>\nA simulated event, e.g. clicks or typing.\nA Simulated Event. These should map to the event type of …\n<code>/</code>\nThe kittest state\nCreate an empty filter. Convenience function for <code>By::new</code>.\nReturns an iterator with first the Pressed state and then …\nClick the node via accesskit. This will trigger a …\nRequest focus for the node via accesskit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single node in the tree where the node matches the …\nGet all nodes in the tree where the node matches the given …\nGet all nodes in the tree where the node matches the given …\nGet all nodes in the tree where the node label exactly …\nGet all nodes in the tree where the node label contains …\nGet all nodes in the tree where the node role matches the …\nGet all nodes in the tree where the node role and label …\nGet all nodes in the tree where the node value exactly …\nGet a single node in the tree where the node matches the …\nGet a single node in the tree where the node label exactly …\nGet a single node in the tree where the node label …\nGet a single node in the tree where the node role matches …\nGet a single node in the tree where the node role and …\nGet a single node in the tree where the node value exactly …\nHover the cursor at the node center\nIf a node is labelled by another node, should the label …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPress the given keys in combination\nPress the given key\nPress and release the given key\nRelease the given key\nFilter by the label of the node with an exact match.\nFilter by the label of the node with a substring match.\nCreate an empty filter.\nCreate a new State from a <code>TreeUpdate</code>\nReturn the root node\nGet the parent of the node\nFilter by a custom predicate.\nPress the given keys For e.g. <code>Key::Control</code> + <code>Key::A</code> this …\nQuery a single node in the tree where the node matches the …\nQuery all nodes in the tree where the node matches the …\nQuery all nodes in the tree where the node matches the …\nQuery all nodes in the tree where the node label exactly …\nQuery all nodes in the tree where the node label contains …\nQuery all nodes in the tree where the node role matches …\nQuery all nodes in the tree where the node role and label …\nQuery all nodes in the tree where the node value exactly …\nQuery a single node in the tree where the node matches the …\nQuery a single node in the tree where the node label …\nQuery a single node in the tree where the node label …\nQuery a single node in the tree where the node role …\nQuery a single node in the tree where the node role and …\nQuery a single node in the tree where the node value …\nShould we search recursively? Default is true.\nFilter by the role of the node.\nGet the root node\nSimulate a click event at the node center\nTake all queued events. (These should then be passed to …\nFocus the node and type the given text\nUpdate the state with a new <code>TreeUpdate</code> (this should be …\nFilter by the value of the node with an exact match.\nUtility to render snapshots from a <code>crate::Harness</code> using …\nDefault wgpu setup used for the wgpu renderer.\nReturns the argument unchanged.\nCreate a new <code>WgpuTestRenderer</code> from an existing <code>RenderState</code>.\nCreate a new <code>WgpuTestRenderer</code> with the given setup.\nCalls <code>U::from(self)</code>.\nCreate a new <code>WgpuTestRenderer</code> with the default setup.\nRender the <code>crate::Harness</code> and return the resulting image.\nGet a valid, finite range for the gpu to use.\n<code>colormap</code> is currently only used for depth images.\nRender the given image, respecting the clip rectangle of …\nDetermines if and how the shader needs to decode the image.\nReturn whether a tensor should be assumed to be encoded in …\nCreates a <code>ImageDataDesc</code> for creating a texture from an …\nLoad a blueprint from persisted storage, e.g. disk. …\nHow to save and load blueprints\nSave a blueprint to persisted storage, e.g. disk.\nValidate a blueprint against the current blueprint schema …\nInterface for accessing all blueprints and recordings\nConvenient information used for <code>MemoryPanel</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHarness to execute code that rely on <code>crate::ViewerContext</code>.\nTimeline the recording config is using by default.\nReturns the argument unchanged.\nBest-effort attempt to meaningfully handle some of the …\nCalls <code>U::from(self)</code>.\nLog an entity to the recording store.\nRegister a view class.\nRun the provided closure with a <code>ViewerContext</code> produced by …\nRun the given function with a <code>ViewerContext</code> produced by …\nRun the given function once with a <code>ViewerContext</code> produced …\nInspect or update the blueprint of a <code>TestContext</code>.\nFails the test iff more than <code>broken_percent_threshold</code>% …\nDefines the UI and layout of the Viewport.\nThe blueprint that drives this viewport. This is the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper that contains the results of a latest-at query …\nThe iterator type backing <code>HybridResults::iter_as</code>.\nExtension traits to abstract query result handling for all …\nGap between lines and their outline.\nGap between points and their outline.\nClamp the last value in <code>values</code> in order to reach a length …\nIterate as indexed deserialized batches.\nUtility for implementing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>UnitChunkShared</code> for the specified …\nUtility for retrieving a single instance of a component.\nUtility for retrieving a single instance of a component.\nUtility for retrieving the first instance of a component.\nUtility for retrieving the first instance of a component.\nReturns component data for the given component or an empty …\nReturns component data for the given component, ignores …\nUtility for retrieving a single instance of a component, …\nUtility for retrieving the first instance of a component, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a zero-copy iterator over all the results for the …\nQueries for the given <code>component_names</code> using latest-at …\nProduce an <code>re_renderer::OutlineConfig</code> based on the …\nResolves all annotations and keypoints for the given …\nResolves all annotations for the given entity view.\nProcess <code>Color</code> components using annotations and default …\nQueries for the given <code>component_names</code> using range …\nIterate as indexed, sliced, deserialized component batches.\nIterate as indexed, sliced, deserialized component batches …\nSpawns a view for each single entity which is visualizable …\nDraw view property ui for a single component of a view …\nDraw view property ui for a single component of a view …\nDisplay the UI for editing all components of a blueprint …\nModifier to press for scroll to change aspect ratio.\nWhich mouse button to drag for panning a 2D view.\nWhich mouse button to drag for panning a 2D view.\nModifier to press for scroll to pan horizontally.\nClicking this button moves the timeline to where the …\nWhich mouse button rolls the camera.\nWhich mouse button rolls the camera if the roll modifier …\nSee <code>ROLL_MOUSE_ALT</code>.\nWhich mouse button to drag for rotating a 3D view.\nRectangles drawn with this mouse button zoom in 2D views.\nWhich modifier speeds up the 3D camera movement.\nKey to restore the camera.\nModifier to press for scroll to zoom.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA builder for creating a UUID.\nA 128-bit (16 byte) buffer containing the UUID.\nA counter that can be used by versions 1 and 6 UUIDs to …\nVersion 8: Custom.\nVersion 2: DCE Security.\nA general error that can occur when working with UUIDs.\nReserved for future expansion.\nVersion 1: Timestamp and node ID.\nThe “max” (all ones) UUID.\nVersion 3: MD5 hash.\nReserved by Microsoft for backward compatibility.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nReserved by the NCS for backward compatibility.\nThe “nil” (all zeros) UUID.\nAn empty counter that will always return the value <code>0</code>.\nThe type of sequence returned by this counter.\nAs described in the RFC 9562 Specification (default). (for …\nVersion 4: Random.\nVersion 5: SHA-1 hash.\nVersion 6: Sortable Timestamp and node ID.\nVersion 7: Timestamp and random.\nA timestamp that can be encoded into a UUID.\nA Universally Unique Identifier (UUID).\nThe reserved variants of UUIDs.\nThe version of the UUID, denoting the generating algorithm.\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a reference to the underlying <code>Uuid</code>.\nGet a <code>Braced</code> formatter.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nAdapters for alternative string formats.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a <code>Builder</code> for a version 8 UUID using the supplied …\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values.\nCreates a <code>Builder</code> from four field values.\nCreates a UUID from four field values in little-endian …\nConstruct a <code>Timestamp</code> from the number of 100 nanosecond …\nCreates a <code>Builder</code> for a version 1 UUID using the supplied …\nCreates a <code>Builder</code> for a version 3 UUID using the supplied …\nCreates a <code>Builder</code> for a version 4 UUID using the supplied …\nCreates a <code>Builder</code> for a version 5 UUID using the supplied …\nCreates a <code>Builder</code> using the supplied bytes.\nCreates a UUID using the supplied bytes.\nCreates a <code>Builder</code> using the supplied bytes in little …\nCreates a UUID using the supplied bytes in little endian …\nCreates a <code>Builder</code> for a version 6 UUID using the supplied …\nCreates a <code>Builder</code> from a 128bit value.\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nConstruct a <code>Timestamp</code> from a Unix timestamp and up to a …\nCreates a <code>Builder</code> for a version 7 UUID using the supplied …\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConvert the builder into a <code>Uuid</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a random UUID.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’ (all zeros).\nGet a timestamp representing the current system time and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGet a <code>Simple</code> formatter.\nGenerating UUIDs from timestamps.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nGet the value of the timestamp as the number of 100 …\nReturns a 128bit little-endian value containing the value.\nGet the value of the timestamp as a Unix timestamp, as …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.\nAlways flushes ASAP.\nLog an entity using an <code>ArrowMsg</code>.\nSend after all messages in a blueprint to signal that the …\nThe key used to identify a Rerun <code>EntityPath</code> in chunk-level …\nThe key used to identify the size in bytes of the data, …\nThe key used to identify a Rerun <code>ChunkId</code> in chunk-level …\nThe marker used to identify whether a chunk is sorted in …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>Chunk</code>.\nDefault configuration, applicable to most use cases.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::flush_num_bytes</code>.\nEnvironment variable to configure <code>Self::flush_num_rows</code>.\nEnvironment variable to configure <code>Self::flush_tick</code>.\nContains the error value\nContains the error value\nThe key used to identify the <code>crate::ArchetypeFieldName</code> in …\nThe key used to identify the <code>crate::ArchetypeName</code> in …\nThe key used to identify the kind of a Rerun column in …\nThe marker used to identify whether a column is sorted in …\nThe value used to identify a Rerun control column in …\nThe value used to identify a Rerun data column in …\nThe value used to identify a Rerun time column in …\nThe most general log message sent from the SDK to the …\nNever flushes unless manually told to (or hitting one the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA unique ID for a row’s worth of data within a chunk.\nA new recording has begun.\nError spawning one of the background threads.\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nUnconditionally inserts an <code>ArrowListArray</code> as a component …\nUnconditionally inserts a <code>TimeColumn</code>.\nReturns a copy of <code>self</code>, overriding existing fields with …\nReturns <code>true</code> is two <code>Chunk</code>s are similar, although not …\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nInitializes a new <code>ChunkBuilder</code>.\nReturns the cell corresponding to the specified <code>RowId</code> for …\nSplit a chunk if it contains &gt;= rows than this threshold …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns a <em>shared</em> channel in which are sent the batched …\nClones the chunk and assign new IDs to the resulting chunk …\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the component data of the specified instance.\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns an iterator over the <code>RowId</code>s of a <code>Chunk</code>, for a …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nIterates all data columns present in this chunk.\nThe component data.\nRemoves all component columns from the <code>Chunk</code>.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nReturns true if two chunks are concatenable.\nConcatenates two <code>Chunk</code>s into a new one.\nConcatenates two <code>TimeColumn</code>s into a new one.\nIterates all control columns present in this chunk.\nRemoves duplicate rows from sections of consecutive …\nDensifies the <code>Chunk</code> vertically based on the <code>component_name</code> …\nEmpties the <code>Chunk</code> vertically.\nEmpties the <code>TimeColumn</code> vertically.\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nApplies a filter kernel to the <code>Chunk</code> as a whole.\nInitiates a flush of the pipeline and returns immediately.\nInitiates a flush the batching pipeline and waits for it …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Chunk</code>.\nCreates a new <code>ChunkBatcherConfig</code> using the default values, …\nCreates a new <code>Chunk</code>.\nReturns all list arrays for the given component name.\nReturns any list-array that matches the given <code>ComponentName</code>…\nThe size in bytes of the data, once loaded in memory, in …\nCallbacks you can install on the <code>ChunkBatcher</code>.\nReturns the <code>n</code>-next logical <code>ChunkId</code>.\nReturns the <code>n</code>-next logical <code>RowId</code>.\nLike <code>Self::insert</code>, but automatically infers the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a single row into a <code>Chunk</code> of its own.\nClones the chunk into a new chunk without any time data.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nIs the chunk currently ascendingly sorted by <code>crate::RowId</code>?\nIs the timeline sorted?\nLooks in the chunk metadata for the <code>IS_SORTED</code> marker.\nLike <code>Self::is_sorted</code>, but actually checks the entire …\nIs the chunk ascendingly sorted by time, for all of its …\nIs the chunk ascendingly sorted by time, for a specific …\nReturns an iterator over the deserialized batches of a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the offsets (<code>(offset, len)</code>) of a …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>, for a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>.\nRuns a <code>LatestAtQuery</code> filter on a <code>Chunk</code>.\nThis turns a batch of <code>PendingRow</code>s into a <code>Chunk</code>.\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nWhen the <code>ChunkId</code> was created, in nanoseconds since unix …\nWhen the <code>RowId</code> was created, in nanoseconds since unix …\nCreates a new <code>Chunk</code>.\nCreates a new <code>TimeColumn</code>.\nCreate a new unique <code>ChunkId</code> based on the current time.\nCreates a new <code>ChunkBatcher</code> using the passed in <code>config</code>.\nCreate a new unique <code>RowId</code> based on the current time.\nCreates a new <code>TimeColumn</code> of nanoseconds type.\nCreates a new <code>TimeColumn</code> of sequence type.\nCreates a new <code>TimeColumn</code> of sequence type.\nSimple helper for <code>Self::new</code> for static data.\nReturns the next logical <code>ChunkId</code>.\nReturns the next logical <code>RowId</code>.\nHow many columns in total? Includes control, time, and …\nThe cumulative number of events in this chunk.\nThe cumulative number of events in this chunk for each …\nThe number of events in this chunk for the specified …\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on their <code>RowId</code> range.\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on any of their time …\nA temporary migration kernel for blueprint data.\nPushes a <code>PendingRow</code> down the batching pipeline.\nRuns a <code>RangeQuery</code> filter on a <code>Chunk</code>.\nParse the given <code>ArrowArray</code> as a time column.\nParse the given <code>ArrowArray</code> as a time column where null …\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nReturns the <code>RowId</code>-range covered by this <code>Chunk</code>.\nComputes the <code>RowId</code> range covered by each individual …\nAll the <code>RowId</code> in this chunk.\nReturns the <code>RowId</code>s in their raw-est form: a tuple of …\nSlices the <code>Chunk</code> vertically.\nSlices the <code>TimeColumn</code> vertically.\nReturns <code>true</code> if both chunks share the same datatypes for …\nReturns <code>true</code> if both chunks share the same descriptors for …\nReturns <code>true</code> if both chunks share the same entity path.\nReturns <code>true</code> if both chunks contains the same set of …\nReturns an error if the Chunk’s invariants are not …\nReturns an error if the Chunk’s invariants are not …\nRandomly shuffles the chunk using the given <code>seed</code>.\nSort the chunk, if needed.\nReturns a new <code>Chunk</code> that is sorted by <code>(&lt;timeline&gt;, RowId)</code>.\nMoves all indicator components from <code>self</code> into a new, …\nUSE ONLY FOR TESTS\nApplies a take kernel to the <code>Chunk</code> as a whole.\nComputes the time range covered by each individual …\nComputes the time range covered by each individual …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nIterates all timeline columns present in this chunk.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nUser-specified <code>TimePoint</code> for this event.\nComputes the maximum value for each and every timeline …\nReturns an array with the appropriate datatype.\nPrepare the <code>Chunk</code> for transport.\nPrepare the <code>Chunk</code> for transport.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nReturns a version of us with a new <code>ChunkId</code>.\nClones the chunk into a new chunk where all <code>RowId</code>s are …\nImplements a <code>log::Log</code> that forwards all events to the …\nReturns the argument unchanged.\nSets the <code>Logger</code> as global logger.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Logger</code> that forwards all events to the …\nConfigures the <code>Logger</code> to filter events.\nConfigures the <code>Logger</code> to prefix the specified <code>path_prefix</code> …\nStarts a Rerun viewer to visualize the contents of a given …\nThe user-chosen name of the application doing the logging.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nE.g. too many values (overflows i32).\nDescribes the interface for interpreting an object as a …\nData associated with the blueprint state.\nError within the underlying chunk batcher.\nError within the underlying chunk batcher.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nA <code>DataLoader</code> loads data from a file path and/or a file’s …\nErrors that might happen when loading data through a …\nAn error occurred while attempting to use a …\nRecommended settings for the <code>DataLoader</code>.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nThe different parts that make up an <code>EntityPath</code>.\nContains the error value\nContains the error value\nContains the error value\nFailed to find Rerun Viewer executable at explicit path.\nFailed to find Rerun Viewer executable in PATH.\nError within the underlying file sink.\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA unique numeric index for each individual instance within …\nOther I/O error.\nWhat <code>DataLoader</code>s load.\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nRepresents a limit in how much RAM to use for the entire …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nContains the success value\nA recording of user-data.\nA <code>RecordingStream</code> handles everything related to logging …\nConstruct a <code>RecordingStream</code>.\nErrors that can occur when creating/manipulating a …\nResults that can occur when creating/manipulating a …\nError within the underlying serializer.\nThe serialized contents of a <code>ComponentBatch</code> with …\nA column’s worth of component data.\nApproximations of stack and heap size for both internal …\nErrors that can occur when <code>spawn</code>ing a Rerun Viewer.\nOptions to control the behavior of <code>spawn</code>.\nError spawning one of the background threads.\nError spawning a Rerun Viewer process.\nA unique id per store.\nWhat kind of Store this is.\nA date-time represented as nanoseconds since unix epoch\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nFailure to host a web viewer and/or Rerun server.\nReturns all component descriptors that must, should and …\nThe recommended <code>re_log_types::ApplicationId</code> to log the …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of …\nThe version of the Rerun SDK.\nCheck whether we are the child of a fork.\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nCoordinate system helpers, for use with …\nThe low-level datatypes that <code>components</code> are built from.\nChecks the <code>RERUN</code> environment variable. If not found, …\nThe default amount of time to wait for the TCP connection …\nThe default address of a Rerun TCP server which an SDK …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nReadable name for displaying in UI.\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nWhat should the logged entity paths be prefixed with?\nSpecifies the name of the Rerun executable.\nEnforce a specific executable to use instead of searching …\nRe-exports of other crates.\nExtra arguments that will be passed as-is to the Rerun …\nExtra environment variables that will be passed as-is to …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nReturns path for force sink if private environment …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns how many bytes <code>self</code> uses on the heap.\nHide the welcome screen.\nCreates a <code>ComponentBatch</code> out of the associated …\nIs <code>Self</code> just plain old data?\nLoads data from in-memory file contents and sends it to <code>tx</code>.\nLoads data from a file on the local filesystem and sends …\nThings directly related to logging.\nLimit in bytes.\nAn upper limit on how much memory the Rerun Viewer should …\nThe fully-qualified name of this archetype, e.g. …\nName of the <code>DataLoader</code>.\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nCreates a new <code>re_log_types::StoreInfo</code> which can be used …\nThe <code>re_log_types::ApplicationId</code> that is currently opened …\nThe <code>re_log_types::StoreId</code> that is currently opened in the …\nReturns all component descriptors that <em>may</em> be provided by …\nThe port to listen on.\nReturns all component descriptors that <em>should</em> be provided …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nDifferent destinations for log messages.\nSpawns a new Rerun Viewer process ready to listen for TCP …\nReturns the total size of <code>self</code> on the stack, in bytes.\nThe recommended <code>re_log_types::StoreId</code> to log the data to, …\nTime-related types.\nAt what time(s) should the data be logged to?\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\nTransform helpers, for use with <code>archetypes::Transform3D</code>.\nSerializes the contents of this <code>ComponentBatch</code>.\nIf <code>true</code>, the call to <code>spawn</code> will block until the Rerun …\nMethods for spawning the web viewer and streaming the SDK …\nInner error explaining why the thread failed to spawn.\nName of the thread\nName used for the executable search.\nExplicit path of the executable (specified by the caller).\nHigh-level error message meant to be printed to the user …\nValue of the <code>PATH</code> environment variable, if any.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Component</strong>: The annotation context provides additional …\n<code>*</code>\nAverage all points in the range together.\n<strong>Component</strong>: The length of an axis in local units of the …\n<strong>Component</strong>: A binary blob of data.\nThe transform describes how to transform into the child …\n<code>⏺</code>\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Component</strong>: Colormap for mapping scalar values within a …\n<code>x</code>\nRasmusgo’s Cyan to Yellow colormap\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\n<code>◆</code>\nThe graph has directed edges.\n<code>▼</code>\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\n<strong>Component</strong>: A path to an entity, usually to reference some …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Component</strong>: How much a primitive fills out the available …\n<strong>Component</strong>: A gamma correction value to be used with a …\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\n<strong>Component</strong>: An edge in a graph connecting two nodes.\n<strong>Component</strong>: A string-based ID representing a node in a …\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nA simple black to white gradient.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n<strong>Component</strong>: A buffer that is known to store image data.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Component</strong>: The distance from the camera origin to the …\nThe Inferno colormap from Matplotlib.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\n<code>◀</code>\n<strong>Component</strong>: Length, or one-dimensional size.\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\nLinearly interpolate the nearest neighbors, creating a …\nThe Magma colormap from Matplotlib.\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nLines are drawn around the parts of the shape which …\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nKeep only the maximum values in the range.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\n<strong>Component</strong>: A display name, typically for an entity or a …\nShow the nearest pixel value.\nNo aggregation.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Camera projection, from image coordinates to …\n<strong>Component</strong>: An infinite 3D plane represented by a unit …\nThe Plasma colormap from Matplotlib.\n<code>+</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Component</strong>: A recording URI (Uniform Resource Identifier).\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\n<code>▶</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nThe surface of the shape is filled in with a solid color. …\n<code>◼️</code>\n<strong>Component</strong>: The width of a stroke specified in UI points.\n<strong>Component</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\n<strong>Component</strong>: Specifies which dimension to use for height.\n<strong>Component</strong>: Specifies which dimension to use for width.\n<strong>Component</strong>: A 2D texture UV coordinate.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: A translation vector in 3D space.\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nGoogle’s Turbo colormap map.\nThe graph has undirected edges.\n<code>▲</code>\n<strong>Component</strong>: Range of expected or valid values, specifying a …\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\n<strong>Component</strong>: How we interpret the coordinate system of an …\nThe Viridis colormap from Matplotlib\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nPositive or negative.\nBoundary is an absolute value.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: A binary blob of data.\n<strong>Datatype</strong>: A single boolean.\n<strong>Datatype</strong>: The innermost datatype of an image.\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: Specified what color components are present in …\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A double-precision vector in 2D space.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Datatype</strong>: An infinite 3D plane represented by a unit …\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\n<strong>Datatype</strong>: A uint32 vector in 3D space.\n<strong>Datatype</strong>: A uint vector in 4D space.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Stores a tuple of UTF-8 strings.\n<strong>Datatype</strong>: A 16-byte UUID.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Datatype</strong>: Presentation timestamp within a …\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nHow much to rotate around the axis.\nAxis to rotate around.\nThe content/data.\nThe raw bytes representing the UUID.\nThe data type of each channel (e.g. the red channel) of …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nThe color that will be applied to the annotated entity.\nL, RGB, RGBA, …\nThe dimension number to select.\nThe dimension number to select.\nHigh time boundary for sequence timeline.\nThe first string.\nThe height of the image in pixels.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nThe index along the dimension to use.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nInvert the direction of the dimension.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nThe label that will be shown in the UI.\nThe names of the dimensions of the tensor (optional).\nUsed mainly for chroma downsampled formats and differing …\nAngle in radians. One turn is equal to 2π (or τ) radians.\nTime range to use for this timeline.\nThe second string.\nThe shape of the tensor, i.e. the length of each dimension.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nThe width of the image in pixels.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\nAtomic types.\nCreates a new scope for spawning threads.\nSelects from a set of channel operations.\nThread synchronization primitives.\nThreads that can borrow variables from the stack.\nMiscellaneous utilities.\nA thread-safe mutable memory location.\nTrait which allows reading from primitive atomic types …\nType returned by <code>load_consume</code>.\nLoads a value from the atomic using a “consume” memory …\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nCreates a receiver that never delivers messages.\nSelects from a set of channel operations.\nSelects from a set of channel operations.\nCreates a receiver that delivers messages periodically.\nCreates a channel of unbounded capacity.\nThe queue was empty at the time of stealing.\nAn injector queue.\nThe steal operation needs to be retried.\nPossible outcomes of a steal operation.\nA stealer handle of a worker queue.\nAt least one task was successfully stolen.\nA worker queue.\nThe alignment of pointer.\nAn atomic pointer that can be safely shared between …\nAn epoch-based garbage collector.\nThe error returned on failed compare-and-set operation.\nMemory orderings for compare-and-set operations.\nThe error returned on failed compare-and-swap operation.\nA guard that keeps the current thread pinned.\nThe type for initializers.\nA handle to a garbage collector.\nAn owned heap-allocated object.\nTypes that are pointed to by a single word.\nA trait for either <code>Owned</code> or <code>Shared</code> pointers.\nA pointer to an object protected by the epoch GC.\nThe value in the atomic pointer at the time of the failed …\nThe value in the atomic pointer at the time of the failed …\nReturns the default global collector.\nDereferences the given pointer.\nMutably dereferences the given pointer.\nDrops the object pointed to by the given pointer.\nThe ordering of the operation when it fails.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nInitializes a with the given initializer.\nReturns the machine representation of the pointer.\nReturns <code>true</code> if the current thread is pinned.\nThe new value, which the operation failed to store.\nThe new value, which the operation failed to store.\nPins the current thread.\nThe ordering of the operation when it succeeds.\nReturns a reference to a dummy guard that allows …\nA bounded multi-producer multi-consumer queue.\nAn unbounded multi-producer multi-consumer queue.\nA thread parking primitive.\nA sharded reader-writer lock.\nA guard used to release the shared read access of a …\nA guard used to release the exclusive write access of a …\nUnparks a thread parked by the associated <code>Parker</code>.\nEnables threads to synchronize the beginning or end of …\nA scope for spawning threads.\nA handle that can be used to join its scoped thread.\nConfigures the properties of a new thread.\nCreates a new scope for spawning threads.\nPerforms exponential backoff in spin loops.\nPads and aligns a value to the length of a cache line.\nAn alias for <code>BuildHasherDefault</code> for use with <code>NoHashHasher</code>.\nA <code>HashMap</code> with an integer domain, using <code>NoHashHasher</code> to …\nA <code>HashSet</code> of integers, using <code>NoHashHasher</code> to perform no …\nTypes which are safe to use with <code>NoHashHasher</code>.\nFor an enabled type <code>T</code>, a <code>NoHashHasher&lt;T&gt;</code> implements …\nApproximations of stack and heap size for both internal …\nReturns how many bytes <code>self</code> uses on the heap.\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nLoads data from any supported file or in-memory contents …\nA <code>DataLoader</code> loads data from a file path and/or a file’s …\nErrors that might happen when loading data through a …\nRecommended settings for the <code>DataLoader</code>.\nRecursively loads entire directories, using the …\nWhen an external <code>crate::DataLoader</code> is asked to load some …\nTo register a new external data loader, simply add an …\nA <code>crate::DataLoader</code> that forwards the path to load to all …\nA <code>DataLoader</code> for <code>LeRobot</code> datasets.\nWhat <code>DataLoader</code>s load.\nLoads data from any <code>rrd</code> file or in-memory contents.\nExperimental video support!\nThe recommended <code>re_log_types::ApplicationId</code> to log the …\nWhat should the logged entity paths be prefixed with?\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nIs this a supported file extension by any of our builtin …\nIterator over all registered external <code>crate::DataLoader</code>s.")