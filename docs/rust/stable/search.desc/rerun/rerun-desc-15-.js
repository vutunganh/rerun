searchState.loadedDescShard("rerun", 15, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a pair of a new <code>BinaryStreamSink</code> and the associated …\nCreate a new <code>MemorySink</code> with an associated <code>RecordingStream</code>.\nCreate a new <code>CallbackSink</code> with the given callback function.\nConnect to the in-memory storage node over HTTP.\nStart writing log messages to a file at the given path.\nAn empty buffer.\nConnect to the given address in a background thread. …\nHow many messages are currently written to this memory sink\nRead and consume the current contents of the buffer.\nSend this log message.\nSend all these log messages.\nSend a blueprint directly to the log-sink.\nStart writing log messages to standard output.\nGet the <code>StoreId</code> from the associated <code>RecordingStream</code> if it …\nConsumes and returns the inner array of <code>LogMsg</code>.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nReturns the appropriate arrow datatype to represent this …\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nFor time timelines.\nFor sequence timelines.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an array with the appropriate datatype.\nCreates a new temporal <code>TimeInt</code>.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nFailure to host the Rerun WebSocket server.\nHelper to spawn an instance of the <code>WebViewerServer</code> and …\nFailure to host the web viewer.\nFailure to host a web viewer and/or Rerun server.\nIp to which the http server is bound.\nIf set, adjusts the browser url to force a specific …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper to spawn an instance of the <code>WebViewerServer</code>. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nServe log-data over WebSockets and serve a Rerun web …\nIf set to <code>true</code>, opens the default browser after hosting …\nThe url from which a spawned webviewer should source\nIf set, adjusts the browser url to set the video decoder …\nThe port to which the webviewer should bind.")