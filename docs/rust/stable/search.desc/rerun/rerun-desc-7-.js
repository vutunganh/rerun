searchState.loadedDescShard("rerun", 7, "Read a tuple containing the (width, height) of the image …\nMutable portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nReturn a reference to a single sample at specified …\nGet the theoretical position of sample (x, y, channel).\nReturn a mutable reference to a single sample at specified …\nGet a reference to the underlying image.\nGet a mutable reference to the underlying image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the image buffer\nReturn this image’s pixels as a byte vector. If the …\nConvert the reader into a decoder.\nRead the image dimensions.\nReturn the raw sample buffer with its stride an dimension …\nConsume the decoder producing a series of frames.\nUnwrap the reader.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a <code>LumaA</code> image.\nConsume the image and returns a <code>LumaA</code> image.\nReturns the underlying raw buffer\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsumes the image buffer and returns the underlying data …\nInvert this pixel\nInvert the colors of this image. This method operates …\ndeprecated io module the original io module has been …\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nReturns the x offset\nSet a custom set of decoding limits.\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nTypes describing image metadata\nGet the minimum length of a buffer such that all in-bounds …\nCreates a new <code>Frames</code> from an implementation specific …\nConstructs a new frame without any delay.\nCreate a new image reader without a preset format.\nCreates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.\nCreates a dynamic image backed by a buffer depending on …\nConstruct a new subimage The coordinates set the position …\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nDisable all decoding limits.\nDisable all limits.\nThe numerator and denominator of the delay in milliseconds.\nThe offsets of this subimage relative to the underlying …\nOpen the image located at the path specified. The image’…\nOpen a file to read, format will be guessed from path.\nReturns the orientation of the image.\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nReturns an iterator over the pixels of this image. The …\nReturns an iterator over the mutable pixels of this image.\nPut a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location <code>(x, y)</code>\nReturns all the bytes in the image.\nUse <code>read_image</code> instead; this method is an implementation …\nDecode a rectangular section of the image.\nReturn the <code>ImageFormat</code>s which are enabled for reading.\nThis function checks that the current limit allows for …\nThis function acts identically to <code>reserve</code>, but accepts the …\nThis function acts identically to <code>reserve</code>, but takes a …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nRotate this image 180 degrees.\nRotate this image 270 degrees clockwise.\nRotate this image 90 degrees clockwise.\nReturns an iterator over the rows of this image.\nReturns an iterator over the mutable rows of this image.\nGet the format of the buffer when viewed as a matrix of …\nUnderlying linear container holding sample values.\nSaves the buffer to a file at the path specified.\nSaves the buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSaves the buffer to a file at the specified path in the …\nSaves the buffer to a file at the specified path in the …\nSupply the format as which to interpret the read image.\nSet the ICC profile to use for the image.\nSet the decoder to have the specified limits. See <code>Limits</code> …\nShrink the image to the minimum of current and given …\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nReturns a mutable subimage that is a view into this image. …\nCreate a mutable sub-view of the image.\nScale this image down to fit within a specific size. …\nScale this image down to a specific size. Returns a new …\nConvert this subimage to an <code>ImageBuffer</code>\nConvert this pixel to luma\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nConvert this pixel to luma with an alpha channel\nReturns a copy of this image as a <code>LumaA</code> image.\nReturns a copy of this image as a <code>LumaA</code> image.\nReturns a copy of this image as a <code>LumaA</code> image.\nReturn the MIME type for this image format or “…\nConvert this pixel to RGB\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nConvert this pixel to RGB with an alpha channel\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nCopy the data into an owned vector.\nReturns the y offset\nReturns the total number of bytes in the decoded image.\nMove the data into an image buffer.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y), ignoring bounds …\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y), ignoring bounds checking.\nPerforms an unsharpen mask on this image. <code>sigma</code> is the …\nReturns a subimage that is an immutable view into this …\nCreate a sub-view of the image.\nThe width of this image.\nThe width of this image.\nReturns the width of the underlying image\nConstruct a reader with specified format.\nMake a format guess based on the content, replacing it on …\nCreate a monocolor image from a single pixel.\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nWrites the buffer to a writer in the specified format.\nEncode this image and write it to <code>w</code>.\nWrites the buffer with the given encoder.\nEncode this image with the provided encoder.\nReturn the <code>ImageFormat</code>s which are enabled for writing.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding and Encoding of JPEG Images\nDecoding and Encoding of PNG Images\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nReturns a pixel density with a pixel aspect ratio of 1\nA couple of values for (Xdensity, Ydensity)\nCreates the most common pixel density type: the horizontal …\nEncodes the image stored in the raw byte buffer <code>image</code> that …\nEncodes the given image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code>, and has …\nSet the pixel density of the images the encoder will …\nThe unit in which the density is measured\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nTurn this into an iterator over the animation frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gamma value of the image or None if no gamma …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the image contains an animation.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code> with …\nCreates a new decoder that decodes from the stream <code>r</code> with …\nWrite a PNG image with the specified width, height, and …\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nReturns the image format associated with this error.\nReturn the image format associated with this error.\nReturns the image format associated with this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>UnsupportedError</code> for an image with details on …\nCreate an <code>EncodingError</code> for an image format.\nCreate a <code>DecodingError</code> for an image format.\nConstruct a <code>ParameterError</code> directly from a corresponding …\nConstruct a generic <code>LimitError</code> directly from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>UnsupportedErrorKind</code> of the …\nReturns the corresponding <code>ParameterErrorKind</code> of the error.\nReturns the corresponding <code>LimitErrorKind</code> of the error.\nCreate an <code>EncodingError</code> that stems from an arbitrary error …\nCreate a <code>DecodingError</code> that stems from an arbitrary error …\nThe given limits\nThe supported strict limits\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - <code>ChannelCountMismatch</code> is used instead\nTuple of bounds in the order of coordinate inputs.\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nDescribe a column-major image packed in all directions.\nGet the dimensions <code>(channels, width, height)</code>.\nCheck if a buffer of length <code>len</code> is large enough.\nGet a reference on the inner sample descriptor.\nGet a reference on the sample buffer descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to a selected subpixel if it is …\nGet a mutable reference to a selected sample.\nGet a reference to a selected subpixel if it is in-bounds.\nGet a reference to a selected subpixel.\nIf there are any samples aliasing each other.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nReturn the mutable portion of the buffer that holds sample …\nReturn the mutable buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nGet the theoretical position of sample (channel, x, y).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake out the sample buffer.\nTake out the sample buffer.\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nCompares the logical preconditions.\nDescribe a row-major image packed in all directions.\nGet a reference on the inner buffer.\nGet a reference on the inner buffer.\nUnderlying linear container holding sample values.\nShrink the image to the minimum of current and given …\nShrink the inner image.\nShrink the inner image.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nTry to convert this into an image with mutable pixels.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nA bi-level color map\nCubic Filter\nThe color type on which the map operates on\nA color map\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nPerforms a Gaussian blur on the supplied image. <code>sigma</code> is a …\nBrighten the supplied image. <code>value</code> is the amount to …\nFunctions for altering and converting the color of …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nReduces the colors of the image using the supplied …\nApproximation of Gaussian blur after Kovesi, P.:  Fast …\nPerform a 3x3 box filter on the supplied image. <code>kernel</code> is …\nFlip an image horizontally\nFlip an image horizontally and put the result into the …\nFlip an image horizontally in place.\nFlip an image vertically\nFlip an image vertically and put the result into the …\nFlip an image vertically in place.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nIndicate <code>NeuQuant</code> implements <code>lookup</code>.\nFill the image with a linear horizontal gradient\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions. …\nRotate an image 180 degrees clockwise.\nRotate an image 180 degrees clockwise and put the result …\nRotate an image 180 degrees clockwise in place.\nRotate an image 270 degrees clockwise.\nRotate an image 270 degrees clockwise and put the result …\nRotate an image 90 degrees clockwise.\nRotate an image 90 degrees clockwise and put the result …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image. <code>sigma</code> is …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place.\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nDeprecated re-export of <code>LimitSupport</code>\nDeprecated re-export of <code>Limits</code>\nDeprecated re-export of <code>ImageReader</code> as <code>Reader</code>\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nA Rectangle defined by its top left corner, width and …\nReturns the argument unchanged.\nThe rectangle’s height.\nCalls <code>U::from(self)</code>.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nFlip horizontally. Can be performed in-place.\nFlip vertically. Can be performed in-place.\nDo not perform any transformations.\nDescribes the transformations to be applied to the image. …\nRotate by 180 degrees. Can be performed in-place.\nRotate by 270 degrees clockwise. Equivalent to rotating by …\nRotate by 270 degrees clockwise and flip horizontally.\nRotate by 90 degrees clockwise.\nRotate by 90 degrees clockwise and flip horizontally.\nReturns the argument unchanged.\nConverts from Exif orientation\nCalls <code>U::from(self)</code>.\nConverts into Exif orientation\nThe “debug” level.\nCorresponds to the <code>Debug</code> log level.\nThe “error” level.\nCorresponds to the <code>Error</code> log level.\nThe “info” level.\nCorresponds to the <code>Info</code> log level.\nAn enum representing the available verbosity levels of the …\nAn enum representing the available verbosity level filters …\nA trait encapsulating the operations required of a logger.\nMetadata about a log message.\nBuilder for <code>Metadata</code>.\nA level lower than all log levels.\nThe type returned by <code>from_str</code> when the string doesn’t …\nThe “payload” of a log message.\nBuilder for <code>Record</code>.\nThe statically resolved maximum log level.\nThe type returned by <code>set_logger</code> if <code>set_logger</code> has already …\nThe “trace” level.\nCorresponds to the <code>Trace</code> log level.\nThe “warn” level.\nCorresponds to the <code>Warn</code> log level.\nThe message body.\nSet <code>args</code>.\nReturns the string representation of the <code>Level</code>.\nReturns the string representation of the <code>LevelFilter</code>.\nInvoke the builder and return a <code>Record</code>\nReturns a <code>Metadata</code> object.\nReturns a new builder.\nReturns a new builder.\nLogs a message at the debug level.\nDetermines if a log message with the specified metadata …\nLogs a message at the error level.\nThe source file containing the message.\nSet <code>file</code>\nThe source file containing the message, if it is a <code>&#39;static</code> …\nSet <code>file</code> to a <code>&#39;static</code> string.\nFlushes any buffered records.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogs a message at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nThe verbosity level of the message.\nSet <code>Metadata::level</code>.\nThe verbosity level of the message.\nSetter for <code>level</code>.\nThe line containing the message.\nSet <code>line</code>\nLogs the <code>Record</code>.\nThe standard logging macro.\nDetermines if a message logged at the specified level in …\nReturns a reference to the logger.\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nReturns the current maximum log level.\nMetadata about the log directive.\nSet <code>metadata</code>. Construct a <code>Metadata</code> object with …\nThe module path of the message.\nSet <code>module_path</code>\nThe module path of the message, if it is a <code>&#39;static</code> string.\nSet <code>module_path</code> to a <code>&#39;static</code> string\nConstruct new <code>RecordBuilder</code>.\nConstruct a new <code>MetadataBuilder</code>.\nSets the global logger to a <code>Box&lt;Log&gt;</code>.\nSets the global logger to a <code>&amp;&#39;static Log</code>.\nA thread-unsafe version of <code>set_logger</code>.\nSets the global maximum log level.\nA thread-unsafe version of <code>set_max_level</code>.\nThe name of the target of the directive.\nSet <code>Metadata::target</code>\nThe name of the target of the directive.\nSetter for <code>target</code>.\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nLogs a message at the trace level.\nLogs a message at the warn level.\nAn array where the data has shared ownership and is copy …\none-dimensional shared ownership array\ntwo-dimensional shared ownership array\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nA producer element that can be assigned to once\nAn axis index.\nDescription of the axis, its length and its stride.\n“C” is an alias for row major ordering\nColumn major or “F” order\nContinue folding with this value\nAn array with copy-on-write behavior.\nCowArray’s representation.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nDimension description.\nCreate a new dimension value.\nDimension type of the producer\nDimension type\nAdds the two dimensions at compile time.\nArray shape and index trait.\nFold is complete and will return this value\nThe array element type.\nError code for an error related to array shape or layout.\n“F” (for Fortran) is an alias for column major ordering\nValue controlling the execution of <code>.fold_while</code> on <code>Zip</code>.\nincompatible memory layout\nincompatible shape\nA single index.\nExtra indexing methods for array views\nArgument conversion a dimension.\nArgument conversion into a producer.\nThe element produced per iteration.\nThe element produced per iteration.\nArray index type\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nDynamic dimension or index type.\nArray index type (signed)\nNext larger dimension\nElements that support linear algebra operations.\nAn iterator of a sequence of evenly spaced floats.\nAn iterator of a sequence of logarithmically spaced number.\nA transparent wrapper of <code>Cell&lt;T&gt;</code> which is identical in …\nCorresponding owned data with MaybeUninit elements\nSlicing information describing multiple mutable, disjoint …\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nTuple or fixed size arrays that can be used to index an …\nA producer of an n-dimensional set of elements; for …\nToken to represent a new axis in a slice description.\nA new axis of length 1.\nArray order\nDimensionality of the output array.\nout of bounds indexing\nThe resulting array storage of the same kind but …\nThe type of the slices created by <code>.multi_slice_move()</code>.\nThe resulting dimension type after broadcasting.\nThe sum of the two dimensions.\nThe type of the reference to the element that is produced, …\noverflow when computing offset, length, etc.\nOwned data.\nArcArray’s representation.\nArray’s representation.\nPattern matching friendly form of the dimension value.\nthe shape does not fit inside type limits\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray representation trait.\nArray pointer’s representation.\nArray shape with a next smaller dimension.\nRow major or “C” order\nElements that can be used as direct operands in arithmetic …\nA contiguous array shape of n dimensions.\nArray shape argument with optional order parameter\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nAn error related to array shape or layout.\nA slice (range with step size).\nA range with step size. <code>end</code> is an exclusive index. …\nA type that can slice an array of dimension <code>D</code>.\nRepresents all of the necessary information to perform a …\nA slice (range with step), an index, or a new axis token.\nNext smaller dimension (if applicable)\nAn array shape of n dimensions in c-order, f-order or …\naliasing array elements\nBorrowed data.\nArray view’s representation.\nLock step function application across several arrays or …\nAbsolute of each element.\nThe positive difference between given number and each …\nIterates over pairs of consecutive elements along the axis.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nTests if every element of the iterator matches a predicate.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nInclude the producer <code>p</code> in the Zip, broadcasting if needed.\nTests if at least one element of the iterator matches a …\nTests if at least one element of the iterator matches a …\nTests if at least one element of the iterator matches a …\nTests if at least one element of the iterator matches a …\nTests if at least one element of the iterator matches a …\nTests if at least one element of the iterator matches a …\nAppend an array to the array along an axis.\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two, three, four, five, or six …\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nReturn a mutable pointer to the first element in the array.\nReturn a pointer to the first element in the array.\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice if it is contiguous, …\nReturn the array’s data as a slice if it is contiguous, …\nReturn the array’s data as a slice, if it is contiguous …\nReturn a standard-layout array containing the data, …\nPerform an elementwise assigment to <code>self</code> from <code>rhs</code>.\nAssign the value <code>input</code> to the element that self represents.\nPerform an elementwise assigment of values cloned from <code>self</code>…\n<strong>Promise</strong> that the array’s elements are all fully …\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nCreate a two-dimensional read-write array view with …\nReturn an iterator over the length and stride of each axis.\nAxis identifier (index)\nReturn an iterator that traverses over <code>axis</code> by chunks of …\nReturn an iterator that traverses over <code>axis</code> by chunks of …\nReturn an iterator that traverses over <code>axis</code> and yields …\nReturn an iterator that traverses over <code>axis</code> and yields …\nReturns a producer which traverses over all windows of a …\nArray zip macro: lock step function application across …\nAct like a larger size and/or shape array by <em>broadcasting</em> …\nCreate an array with uninitialized elements, shape <code>shape</code>.\nCast the raw pointer of the raw array view to a different …\nCast the raw pointer of the raw array view to a different …\nCubic root of each element.\nThe smallest integer less than or equal to each element.\nReturn a shared view of the array with elements as if they …\nLimit the values for each element, similar to NumPy’s …\n<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …\nSelects <code>index</code> along the axis, collapsing the axis into …\nReturn an array view of column <code>index</code>.\nReturn Order::ColumnMajor if the input is true, …\nReturn a mutable array view of column <code>index</code>.\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nConcatenate arrays along the given axis.\nConcatenate arrays along the given axis.\nCosine of each element (in radians).\nUnsafely translate the data representation from one element\nCreate an array with default values, shape <code>shape</code>\nConverts to a read-only view of the array.\nConverts to a read-only view of the array.\nConverts to a mutable view of the array.\nReturn a view of the diagonal elements of the array.\nReturn a read-write view over the diagonal elements of the …\nReturn the shape of the array in its “pattern” form, …\nPerform dot product or matrix multiplication of arrays <code>self</code>…\nPerform the matrix multiplication of the row vector <code>self</code> …\nCompute the dot product of one-dimensional arrays.\nPerform matrix multiplication of rectangular arrays <code>self</code> …\nend index; negative are counted from the back of the axis; …\nReturn an exact chunks producer (and iterable).\nReturn an exact chunks producer (and iterable).\n<code>e^x</code> of each element (exponential function).\n<code>2^x</code> of each element.\nCreate an identity matrix of size <code>n</code> (square 2D array).\nPerform an elementwise assigment to <code>self</code> from element <code>x</code>.\nReturns a reference to the first element of the array, or …\nReturns a mutable reference to the first element of the …\nFlatten the array to a one-dimensional array.\nFlatten the array to a one-dimensional array.\nThe largest integer less than or equal to each element.\nTraverse the array elements and apply a fold, returning …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nApply a fold function to all elements of the input arrays, …\nFold along an axis.\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nApply a fold function to the input arrays while the return …\nCall <code>f</code> for each element in the array.\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nApply a function to all elements of the input arrays, …\nThe fractional part of each element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a one-dimensional array from a boxed slice (no …\nReturns the argument unchanged.\nCreate a read-write array view of the array.\nCreate a two-dimensional read-write array view of the data …\nCreate a one-dimensional read-write array view of the data …\nCreate a two-dimensional read-only array view of the data …\nCreate a one-dimensional array from a vector (no copying …\nCreate a read-only array view of the array.\nCreate a one-dimensional read-only array view of the data …\nCreate a two-dimensional read-only array view of the data …\nCreate a one-dimensional clone-on-write view of the data …\nCreate a read-only clone-on-write view of the array.\nCreate a two-dimensional read-write array view of the data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Shape</code> from <code>dimension</code>, using the default memory …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Zip</code> from the input array or other producer <code>p</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a 2D matrix from its diagonal\nCreate a square 2D matrix of the specified size, with the …\nCreate an array with copies of <code>elem</code>, shape <code>shape</code>.\nCreate a one-dimensional array from an iterator or …\nCreate a one-dimensional array from an iterable.\nCreate a new <code>ShapeError</code>\nCreate a read-write array view borrowing its data from a …\nCreate a read-only array view borrowing its data from a …\nCreate an array with values created by the function <code>f</code>.\nCreate an <code>RawArrayViewMut&lt;A, D&gt;</code> from shape information and …\nCreate an <code>ArrayView&lt;A, D&gt;</code> from shape information and a raw …\nCreate an <code>ArrayViewMut&lt;A, D&gt;</code> from shape information and a …\nCreate an <code>RawArrayView&lt;A, D&gt;</code> from shape information and a …\nCreate an array with values created by the function <code>f</code>.\nCreate an array with the given shape from a vector. (No …\nCreates an array from a vector and interpret it according …\nCreate a one-dimensional array from a vector (no copying …\nCreate a one-dimensional array with <code>n</code> geometrically spaced …\nGet a reference of a element through the view.\nReturn a reference to the element at <code>index</code>, or return <code>None</code> …\nConvert a mutable array view to a mutable reference of a …\nReturn a mutable reference to the element at <code>index</code>, or …\nReturn a raw pointer to the element at <code>index</code>, or return …\nReturn a raw pointer to the element at <code>index</code>, or return …\nReturns the number of axes in the input array.\nReturns the number of dimensions of the input array for …\nGet a reference of a element through the view.\nConvert a mutable array view to a mutable reference of a …\nGet a reference of a element through the view.\nReturn the index of the axis.\nReturns a view restricted to <code>index</code> along the axis, with …\nCollapses the array to <code>index</code> along the axis and removes …\nCollapses the array to <code>index</code> along the axis and removes …\nReturns a mutable view restricted to <code>index</code> along the axis, …\nCreate a new <code>Zip</code> with an index producer and the producer <code>p</code>.\nReturn an iterator of indexes and references to the …\nReturn an iterator of indexes and mutable references to …\nCreate an iterable of the array shape <code>shape</code>.\nReturn an iterable of the indices of the passed-in array.\nInsert new array axis at <code>axis</code> and return the result.\nInsert new array axis of length 1 at <code>axis</code>, modifying the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a shared view of the array with elements as if they …\nReturn the diagonal as a one-dimensional array.\nConvert an array or array view to another with the same …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert any array or array view to a dynamic dimensional …\nFlatten the array to a one-dimensional array, consuming …\nReturn the inner value\nReturn the inner value\nTurn the array into a uniquely owned array, cloning the …\nConvert the dimension into a pattern matching friendly …\nConvert the value into an <code>NdProducer</code>.\nReturn a vector of the elements in the array, in the way …\nReturn a vector of the elements in the array, in the way …\nConsume the mutable view and return a mutable reference to …\nReturns the single element in the array without cloning it.\nConsume the view and return a reference to the single …\nTransform the array into <code>shape</code>; any shape with the same …\nTransform the array into <code>shape</code>; any shape with the same …\nTransform the array into <code>shape</code>; any shape with the same …\nTurn the array into a shared ownership (copy on write) …\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice, if it is contiguous. …\nReverse the stride of <code>axis</code>.\nReturn <code>true</code> if all elements are infinity.\nReturn <code>true</code> if all elements are <code>NaN</code> (not a number).\nReturn <code>true</code> if any element is infinity.\nReturn <code>true</code> if any element is <code>NaN</code> (not a number).\nReturn true if input is Order::ColumnMajor, false otherwise\nReturn true if it is <code>Done</code>, false if <code>Continue</code>\nReturn whether the array has any elements\nReturns <code>true</code> if <code>self</code> is an <code>Index</code> value.\nIf the number is infinity, then <code>true</code> is returned for each …\nIf the number is <code>NaN</code> (not a number), then <code>true</code> is returned …\nReturns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.\nReturns <code>true</code> iff the array is the owned variant.\nReturns <code>true</code> iff the data is the <code>Owned</code> variant.\nReturn true if input is Order::RowMajor, false otherwise\nReturns <code>true</code> if <code>self</code> is a <code>Slice</code> value.\nReturn true if the array is square, false otherwise.\nReturn <code>true</code> if the array data is laid out in contiguous …\nReturns <code>true</code> iff the inner <code>Arc</code> is not shared. If you want …\nReturns <code>true</code> iff the array is the view (borrowed) variant.\nReturns <code>true</code> iff the data is the <code>View</code> variant.\nProducers, iterables and iterators.\nReturn an iterator of references to the elements of the …\nReturn an iterator of mutable references to the elements …\nReturn the <code>ErrorKind</code> of this error.\nReturn a producer and iterable that traverses over all 1D …\nReturn a producer and iterable that traverses over all 1D …\nReturns a reference to the last element of the array, or …\nReturns a mutable reference to the last element of the …\nReturn the total number of elements in the array.\nLength in count of elements of the current axis\nReturn the length of <code>axis</code>.\nLinear algebra.\nReturn an iterator of evenly spaced floats.\nCreate a one-dimensional array with <code>n</code> evenly spaced …\nNatural logarithm of each element.\nLogarithm of each element with respect to an arbitrary …\nBase 10 logarithm of each element.\nBase 2 logarithm of each element.\nAn iterator of a sequence of logarithmically spaced …\nCreate a one-dimensional array with <code>n</code> logarithmically …\nCall <code>f</code> by reference on each element and create a new array …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nMap and assign the results into the producer <code>into</code>, which …\nReduce the values along an axis into just one value, …\nReduce the values along an axis into just one value, …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nMap and collect the results into a new array, which has …\nModify the array in place by calling <code>f</code> by mutable …\nCall <code>f</code> on a mutable reference of each element and create a …\nCall <code>f</code> by <strong>v</strong>alue on each element and create a new array …\nModify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …\nCall <code>f</code> by <strong>v</strong>alue on each element, update the array with the …\nConsume the array, call <code>f</code> by <strong>v</strong>alue on each element, and …\nReturn the axis with the greatest stride (by absolute …\nReturns the arithmetic mean x̅ of all elements in the …\nReturn mean along <code>axis</code>.\nIf possible, merge in the axis <code>take</code> to <code>into</code>.\nMove all elements from self into <code>new_array</code>, which must be …\nMove all elements from self into <code>new_array</code>, which must be …\nSplit the view into multiple disjoint slices.\nSplit the view into multiple disjoint slices.\nReturn multiple disjoint, sliced, mutable views of the …\nReturn the number of columns (length of <code>Axis(1)</code>) in the …\nReturns the number of dimensions (number of axes).\nReturn the number of dimensions (axes) in the array\nPerform an elementwise negation of <code>self</code> and return the …\nPerform an elementwise negation of reference <code>self</code> and …\nCreate a new cell with the given value\nCreate a new <code>Slice</code> with the given extents.\nReturns a new <code>SliceInfo</code> instance.\nPerform an elementwise unary not of <code>self</code> and return the …\nPerform an elementwise unary not of reference <code>self</code> and …\nReturn the number of rows (length of <code>Axis(0)</code>) in the …\nCreate an array with ones, shape <code>shape</code>.\nReturns the number of axes in the output array.\nReturns the number of dimensions after calling <code>.slice()</code> …\nReturn an iterator that traverses over the outermost …\nReturn an iterator that traverses over the outermost …\nPermute the axes.\nSquare (two powers) of each element.\nFloat power of each element.\nInteger power of each element.\nndarray prelude.\nReturn the product of all elements in the array.\nReturn product along <code>axis</code>.\nAppend an array to the array along an axis.\nAppend a column to an array\nAppend a row to an array\nReturn an iterator of floats from <code>a</code> to <code>b</code> (exclusive), …\nCreate a one-dimensional array with elements from <code>start</code> to …\nReturn the shape of the producer.\nReturn the shape of the array as it’s stored in the …\nReturn a reference to the dimension\nReturn a reference to the dimension\nReturn a raw view of the array.\nReturn a raw mutable view of the array.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate a three-dimensional array with elements from <code>xs</code>.\nConvert the view into an <code>ArrayViewMut&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> …\nConvert the view into an <code>ArrayView&lt;&#39;b, A, D&gt;</code> where <code>&#39;b</code> is a …\nThe reciprocal (inverse) of each element, <code>1/x</code>.\nRemove array axis <code>axis</code> and return the result.\nRemove the <code>index</code>th elements along <code>axis</code> and shift down …\nReserve capacity to grow array along <code>axis</code> by at least …\nReserve capacity to grow array by at least <code>additional</code> …\nReserve capacity to grow array by at least <code>additional</code> rows.\n<em>Note: Reshape is for <code>ArcArray</code> only. Use </em>…\nTranspose the array by reversing axes.\nThe nearest integer of each element.\nReturn an array view of row <code>index</code>.\nReturn Order::RowMajor if the input is true, …\nReturn a mutable array view of row <code>index</code>.\nReturn a producer and iterable that traverses over the …\nReturn a producer and iterable that traverses over the …\nSlice argument constructor.\nPerform the operation <code>self += alpha * rhs</code> efficiently, …\nAlong <code>axis</code>, select arbitrary subviews corresponding to …\nReturn the shape of the array as a slice.\nSign number of each element.\nSine of each element (in radians).\nCompute the size of the dimension (number of elements)\nReturn the size of the shape in number of elements\nReturn the size of the shape in number of elements\nReturn a the number of element tuples in the Zip\nCompute the size while checking for overflow.\nReturn a sliced view of the array.\nReturn a view of the array, sliced along the specified …\nSlice the array in place along the specified axis.\nSlice the array in place along the specified axis, then …\nReturn a mutable view of the array, sliced along the …\nSlice the array in place without changing the number of …\nReturn a view of a slice of the array, with a closure …\nSlice the array in place, with a closure specifying the …\nReturn a mutable view of a slice of the array, with a …\nSlice the array, possibly changing the number of …\nReturn a sliced read-write view of the array.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the <code>Zip</code> evenly in two.\nSplit the array view along <code>axis</code> and return one mutable …\nSplit the array view along <code>axis</code> and return one view …\nSplit the array view along <code>axis</code> and return one array …\nSplit the array view along <code>axis</code> and return one array …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSplits the view into views of the real and imaginary …\nSquare root of each element.\nRemove axes of length 1 and return the modified array.\nStack arrays along the new axis.\nStack arrays along the new axis.\nstart index; negative are counted from the back of the axis\nReturn standard deviation of elements in the array.\nReturn standard deviation along <code>axis</code>.\nstep size in elements; the default is 1, for every element.\nCreate a new <code>Slice</code> with the given step size (multiplied …\nStride in count of elements of the current axis\nReturn the stride of <code>axis</code>.\nReturn the strides of the array as a slice.\nReturn the sum of all elements in the array.\nReturn sum along <code>axis</code>.\nSwap elements at indices <code>index1</code> and <code>index2</code>.\nSwap value with another cell\nSwap axes <code>ax</code> and <code>bx</code>.\nReturn a transposed view of the array.\nTangent of each element (in radians).\nConverts radians to degrees for each element.\nReturn an uniquely owned copy of the array.\nConverts degrees to radians for each element.\nTransform the array into <code>new_shape</code>; any shape with the …\nReturn a shared ownership (copy on write) array, cloning …\nReturn the array’s data as a slice, if it is contiguous …\nReturn the array’s data as a slice, if it is contiguous. …\nReturn an vector with the elements of the one-dimensional …\nReturn the transpose: row major becomes column major and …\nLower triangular of an array.\nUpper triangular of an array.\nThe integer part of each element.\nConverts the array into <code>Array&lt;A, D&gt;</code> if this is possible …\nGet a reference of a element through the view without …\nConvert a mutable array view to a mutable reference of a …\nGet a reference of a element through the view without …\nPerform <em>unchecked</em> array indexing.\nPerform <em>unchecked</em> array indexing.\nCreate an array with uninitialized elements, shape <code>shape</code>.\nSwap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.\nReturn variance of elements in the array.\nReturn variance along <code>axis</code>.\nReturn a read-only view of the array\nReturn a read-write view of the array\nReturn a window producer and iterable.\nReturn a window producer and iterable.\nCreates a dimension of all zeros with the specified ndim.\nCreate an array with zeros, shape <code>shape</code>.\nCreate a new dimension value with <code>n</code> axes, all zeros\nTraverse two arrays in unspecified order, in lock step, …\nend index; negative are counted from the back of the axis; …\nstart index; negative are counted from the back of the axis\nstep size in elements; the default is 1, for every element.\nAn iterator over the length and stride of each axis of an …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over the specified axis and …\nAn iterator that traverses over an axis and and yields …\nAn iterator that traverses over an axis and and yields …\nWindow producer and iterable\nExact chunks producer and iterable.\nExact chunks iterator.\nExact chunks iterator.\nExact chunks producer and iterable.\nAn iterator over the indexes and elements of an array.\nAn iterator over the indexes and elements of an array …\nIndices producer and iterable.\nAn iterator over the indexes of an array shape.\nBy-value iterator for an array\nAn iterator over the elements of an array.\nAn iterator over the elements of an array (mutable).\nSee <code>.lanes()</code> for more information.\nAn iterator that traverses over all axes but one, and …\nAn iterator that traverses over all dimensions but the …\nSee <code>.lanes_mut()</code> for more information.\nWindow producer and iterable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits the iterator at <code>index</code>, yielding two disjoint …\nSplits the iterator at index, yielding two disjoint …\nSplits the iterator at index, yielding two disjoint …\nSplits the iterator at <code>index</code>, yielding two disjoint …\nMatrix Multiplication\nThe result of the operation.\nGeneral matrix-matrix multiplication.\nGeneral matrix-vector multiplication.\nKronecker product of 2D matrices.\nAn array where the data has shared ownership and is copy …\nAn array that owns its data uniquely.\nzero-dimensional array\none-dimensional array\ntwo-dimensional array\nthree-dimensional array\nfour-dimensional array\nfive-dimensional array\nsix-dimensional array\nAn <em>n</em>-dimensional array.\ndynamic-dimensional array\nA read-only array view.\nzero-dimensional array view\none-dimensional array view\ntwo-dimensional array view\nthree-dimensional array view\nfour-dimensional array view\nfive-dimensional array view\nsix-dimensional array view\ndynamic-dimensional array view\nA read-write array view.\nzero-dimensional read-write array view\none-dimensional read-write array view\ntwo-dimensional read-write array view\nthree-dimensional read-write array view\nfour-dimensional read-write array view\nfive-dimensional read-write array view\nsix-dimensional read-write array view\ndynamic-dimensional read-write array view\nArgument conversion into an array view\nAn axis index.\nAn array with copy-on-write behavior.\nDimension description.\nCreate a new dimension value.\nArray shape and index trait.\nCreate a zero-dimensional index\nzero-dimensionial\nCreate a one-dimensional index\none-dimensional\nCreate a two-dimensional index\ntwo-dimensional\nCreate a three-dimensional index\nthree-dimensional\nCreate a four-dimensional index\nfour-dimensional\nCreate a five-dimensional index\nfive-dimensional\nCreate a six-dimensional index\nsix-dimensional\nCreate a dynamic-dimensional index\ndynamic-dimensional\nNext larger dimension\nFor fixed-size dimension representations (e.g. <code>Ix2</code>), this …\nFloating-point element types <code>f32</code> and <code>f64</code>.\nToken to represent a new axis in a slice description.\nPattern matching friendly form of the dimension value.\nA read-only array view without a lifetime.\nA mutable array view without a lifetime.\nA trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …\nNext smaller dimension (if applicable)\nCreate a zero-dimensional array with the element <code>x</code>.\nCreate a one-dimensional array with elements from <code>xs</code>.\nCreate a two-dimensional array with elements from <code>xs</code>.\nCreate an <strong><code>Array</code></strong> with one, two, three, four, five, or six …\nBorrow as a read-only array view.\nBorrow as a read-write array view.\nCreate a zero-dimensional array view borrowing <code>x</code>.\nCreate a one-dimensional array view with elements …\nCreate a two-dimensional array view with elements …\nCreate a one-dimensional read-write array view with …\nArray zip macro: lock step function application across …\nConvert the dimensional into a dynamic dimensional (IxDyn).\nConvert the dimension into a pattern matching friendly …\nReturns the number of dimensions (number of axes).\nSlice argument constructor.\nCompute the size of the dimension (number of elements)\nCompute the size while checking for overflow.\nCreates a dimension of all zeros with the specified ndim.\nAn alias for <code>BuildHasherDefault</code> for use with <code>NoHashHasher</code>.\nA <code>HashMap</code> with an integer domain, using <code>NoHashHasher</code> to …\nA <code>HashSet</code> of integers, using <code>NoHashHasher</code> to perform no …\nTypes which are safe to use with <code>NoHashHasher</code>.\nFor an enabled type <code>T</code>, a <code>NoHashHasher&lt;T&gt;</code> implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApproximations of stack and heap size for both internal …\nReturns how many bytes <code>self</code> uses on the heap.\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nAn array in the arrow columnar format\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nHelper to incrementally build a <code>Chunk</code>.\nThe actual iterator implementation for …\nThe underlying item type for <code>ChunkComponentIter</code>.\nA <code>ChunkComponentSlicer</code> knows how to efficiently slice …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nThe fully-qualified name of a <code>Component</code>, e.g. …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nContains the error value\nContains the error value\nA query at a given time, for a given timeline.\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nError spawning one of the background threads.\nHelper to incrementally build a <code>TimeColumn</code>.\nErrors when deserializing/parsing/reading a column of time …\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nBuilds and returns the final <code>Chunk</code>.\nBuilds and returns the final <code>TimeColumn</code>.\nBuilds and returns the final <code>Chunk</code>.\nSplit a chunk if it contains &gt;= rows than this threshold …\nThe component data.\nReturns a reference to the <code>DataType</code> of this array.\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nCallbacks you can install on the <code>ChunkBatcher</code>.\nIf true, the results will include one extra tick on each …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying data of this array\nReturns whether this array is empty.\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nShould the results contain all extra component information …\nShould the results contain all extra timeline information …\nReturns the length (i.e., number of elements) of this …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nUser-specified <code>TimePoint</code> for this event.\nReturns the underlying data of this array\nAdd a row’s worth of data by destructuring an archetype …\nAdd a row’s worth of data by serializing a single …\nAdd a row’s worth of data by serializing many …\nAdd a row’s worth of data using the given component data.\nAdd a row’s worth of time data using the given timestamp.\nAdd a row’s worth of data by serializing a single …\nAdd a row’s worth of data by serializing many …\nAdd a row’s worth of data by serializing many sparse …\nAdd a row’s worth of data using the given sparse …\nAdd a row’s worth of data by serializing many sparse …\nArrow crate version\nDefines the low-level <code>Allocation</code> API for shared memory …\nStatically typed implementations of Arrow Arrays\nTypes of shared memory region\nComputation kernels on Arrow Arrays\nDefines the logical data types of Arrow arrays.\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDefines <code>ArrowError</code> for representing failures in various …\nPass Arrow objects from and to PyArrow, using Arrow’s C …\nContains the <code>RecordBatch</code> type and associated traits\nArrow Tensor Type, defined in <code>format/Tensor.fbs</code>.\nUtility functions for working with Arrow data\nCache and allocation multiple alignment size\nThe owner of an allocation. The trait implementation is …\nBuffer is always null. Unused currently in Rust …\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nDon’t preallocate inner buffers and rely on array growth …\nA generic trait for accessing the values of an <code>Array</code>\nTrait for dealing with different array builders at runtime\nA generic representation of Arrow array data which …\nBuilder for <code>ArrayData</code> type\nA thread-safe, shared reference to the Arrow array data.\nAn iterator that returns Some(T) or None, that can be used …\nA reference-counted reference to a generic <code>Array</code>\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nBinary, Utf8 and LargeUtf8 data types\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nArray builder for <code>BinaryViewArray</code>\nBuffer holds a bitmap.\nAn array of boolean values\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for creating a Buffer object.\nLayout specification for a single data type buffer\nHelper to access views of <code>GenericByteViewArray</code> (…\nDefine capacities to pre-allocate for child data or data …\nthe corresponding Arrow data type of this primitive type.\nLayout specification for a data type\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nA possibly <code>Scalar</code> <code>Array</code>\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nDictionary type\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nCompare the values at two arbitrary indices in two arrays.\nAn array of fixed size binary arrays\nBuilder for <code>FixedSizeBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of [fixed length lists], similar to JSON arrays …\nBuilder for <code>FixedSizeListArray</code>\nan iterator that returns Some(T) or None, that can be used …\nEach element is a fixed width primitive, with the given …\nA <code>PrimitiveArray</code> of <code>f16</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f32</code>\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f64</code>\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nArray builder for <code>GenericBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of variable length byte arrays\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nVariable-size Binary View Layout: An array of variable …\nA builder for <code>GenericByteViewArray</code>\nAn array of variable length lists, similar to JSON arrays …\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>GenericListArray</code>\nDifferent from <code>crate::GenericListArray</code> as it stores both …\nan iterator that returns Some(T) or None, that can be used …\nA <code>GenericByteArray</code> for storing <code>str</code>\nArray builder for <code>GenericStringArray</code>\nan iterator that returns Some(T) or None, that can be used …\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>LargeListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nList and LargeList data types\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>ListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nAn array of key-value maps\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nEfficiently create an ArrayData from one or more existing …\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nBuilder for <code>NullArray</code>\nThe multiplicative identity\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nAn array of run-end encoded values\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nA <code>GenericByteViewArray</code> that stores utf8 data\nArray builder for <code>StringViewArray</code>\nStruct type\nAn array of structs\nBuilder for <code>StructArray</code>\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nBuilder for <code>UnionArray</code>\nVariable width, such as string data for utf8 data\nThe additive identity\nChecked addition operation\nWrapping addition operation\nThe concrete array definitions\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns the builder as a non-mutable <code>Any</code> reference.\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nReturns the builder as a mutable <code>Any</code> reference.\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an Array, such as an ArrayRef to …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nThe buffer index.\nA vector of buffer layout specifications, one for each …\nDefines push-based APIs for constructing arrays\nCan contain a null bitmask\nDefines helper functions for downcasting <code>dyn Array</code> to …\nWrite footer or termination data, then mark the writer as …\nCompare operation\nCreates an array from a literal slice of values, suitable …\nReturns a reference to the <code>DataType</code> of this array.\nReturns a default value of this primitive type.\nChecked division operation\nWrapping division operation\nDowncasts a <code>dyn Array</code> to a concrete type\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDowncast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …\n<code>Field</code> name for map entries\nExports an array to raw pointers of the C Data Interface …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nBuilds the array\nBuilds the array without resetting the underlying builder.\nReturns the value for this <code>Datum</code> and a boolean indicating …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the byte width of this primitive type.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nReturns whether number of array slots is zero\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nReturns true if zero else false\nConstructs a new iterator\nIdiomatic iterators for <code>Array</code>\n<code>Field</code> name for map key\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturn the expected <code>DataTypeLayout</code> Arrays of this data …\nReturns the length (i.e., number of elements) of this …\nReturns the number of array slots in the builder\nThe length of the string/bytes.\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nConstructs an array using the input <code>data</code>. Returns a …\nReturns a builder with capacity for <code>capacity</code> elements of …\nReturns a comparison function that compares two values at …\nCreate a view based on the given data, block id and offset.\nMatch field names of structs and lists. If set to <code>true</code>, …\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nCorresponding Rust native type if available\nChecked negation operation\nWrapping negation operation\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReads the next <code>RecordBatch</code>.\nReturns the keys of this dictionary as usize\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nThe offset into the buffer.\nChecked exponentiation operation\nWrapping exponentiation operation\nFirst 4 bytes of string/bytes data.\nCreates a record batch from literal slice of values, …\nOptional row count, useful for specifying a row count for …\nIdiomatic iterator for <code>RunArray</code>\nReturns the schema of this <code>RecordBatchReader</code>.\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nChecked subtraction operation\nWrapping subtraction operation\nConversion methods for dates and times.\nTimezone for timestamp arrays\nReturns the underlying data of this array\nZero-sized types used to parameterize generic array …\nReturns the element at index <code>i</code>\n<code>Field</code> name for map value\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nThis field only applies to the view type …\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nWrite a single batch to the writer.\nThe alignment required by Rust for an array of the …\nThe width of each element in bytes\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nA generic trait for accessing the values of an <code>Array</code>\nA reference-counted reference to a generic <code>Array</code>\nTrait for primitive values.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nAn array of boolean values\nthe corresponding Arrow data type of this primitive type.\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nAn array of fixed size binary arrays\nAn array of [fixed length lists], similar to JSON arrays …\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nAn array of variable length byte arrays\nVariable-size Binary View Layout: An array of variable …\nAn array of variable length lists, similar to JSON arrays …\nDifferent from <code>crate::GenericListArray</code> as it stores both …\nA <code>GenericByteArray</code> for storing <code>str</code>\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nAn array of key-value maps\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nAn array of run-end encoded values\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> that stores utf8 data\nAn array of structs\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns a reference to the <code>DataType</code> of this array.\nReturns a default value of this primitive type.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the byte width of this primitive type.\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nConstructs a new iterator\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturns the length (i.e., number of elements) of this …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nConstructs an array using the input <code>data</code>. Returns a …\nCorresponding Rust native type if available\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nReturns the underlying data of this array\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nTrait for dealing with different array builders at runtime\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nArray builder for <code>BinaryViewArray</code>\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>FixedSizeListArray</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nA builder for <code>GenericByteViewArray</code>\nBuilder for <code>GenericListArray</code>\nArray builder for <code>GenericStringArray</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>LargeListArray</code>\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>ListArray</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nBuilder for <code>NullArray</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nArray builder for <code>StringViewArray</code>\nBuilder for <code>StructArray</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nBuilder for <code>UnionArray</code>\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\n<code>Field</code> name for map entries\nBuilds the array\nBuilds the array without resetting the underlying builder.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns whether number of array slots is zero\n<code>Field</code> name for map key\nReturns the number of array slots in the builder\nReturns a builder with capacity for <code>capacity</code> elements of …\nCreate a view based on the given data, block id and offset.\n<code>Field</code> name for map value\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an Array, such as an ArrayRef to …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nDowncasts a <code>dyn Array</code> to a concrete type\nABI-compatible struct for ArrowArray from C Data Interface …\nABI-compatible struct for <code>ArrowSchema</code> from C Data Interface\nExports an array to raw pointers of the C Data Interface …\nImport ArrayData from the C Data Interface\nImport ArrayData from the C Data Interface\nExport to the C Data Interface\nA <code>RecordBatchReader</code> which imports Arrays from …\nABI-compatible struct for <code>ArrayStream</code> from C Stream …\nExports a record batch reader to raw pointer of the C …\nC function to get the error from last operation on the …\nC function to get next array from the stream\nC function to get schema from the stream\nPrivate data used by the stream\nC function to release the stream\nAn iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nThe <code>RunArrayIter</code> provides an idiomatic way to iterate over …\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of microseconds in a day\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of nanoseconds in a day\nNumber of seconds in a day\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>Duration</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nFormats the decimal value with the provided precision and …\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nA slice-able <code>Buffer</code> containing bit-packed booleans\nBuffer represents a contiguous memory region that can be …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nA trait for Arrow String Arrays, currently three types are …\nOptions that define how <code>take</code> should behave\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns a prepared function optimized to filter multiple …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nPerform SQL <code>CONTAINS(left, right)</code>\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nWhether to sort in descending order\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nPerform SQL <code>ENDSWITH(left, right)</code>\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nFormatting options when casting from temporal types to …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nTakes elements by index from a list of <code>Array</code>, creating a …\nInterleave rows by index from multiple <code>RecordBatch</code> …\nReturns true if all data within this string array is ASCII\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nConstructs a new iterator\nComputation kernels on Arrow Arrays\nUse <code>partition</code> instead. Given a list of already sorted …\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nPerform SQL <code>left LIKE right</code>\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nReturns a new array with the same values and the validity …\nWhether to sort nulls first\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nSort options for this column\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nIt’s unstable_sort, may not preserve the order of equal …\nGiven a list of lexicographically sorted columns, computes …\nRemove null values by do a bitmask AND operation with null …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nhow to handle cast failures, either return NULL …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nShifts array by defined number of items (to left or right) …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nPerform SQL <code>STARTSWITH(left, right)</code>\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nApplies a fallible unary function to an array with …\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nApplies an infallible unary function to an array with …\nSee <code>PrimitiveArray::unary_mut</code>\nReturns the value of the target field when selected, or …\nParse the given string into a string representing …\nThe column to sort\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nCast kernels to convert <code>ArrayRef</code>  between supported …\nCast <code>array</code> to the provided data type and return a new …\n<code>Parser</code> implementations for converting strings to Arrow …\nComparison kernels for <code>Array</code>s.\nComparison kernels for <code>Array</code>s.\nDefines concat kernel for <code>ArrayRef</code>\nProvides utility functions for concatenation of elements …\nDefines filter kernels\nInterleave elements from multiple arrays\nDefines kernel for length of string arrays and binary …\nImplements the <code>nullif</code> function for Arrow arrays.\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines partition kernel for <code>ArrayRef</code>\nProvides <code>rank</code> function to assign a rank to each value in …\nDefines kernel to extract substrings based on a regular …\nDefines sort kernel for <code>ArrayRef</code>\nDefines kernel to extract a substring of an Array …\nDefines take kernel for Array\nDefines temporal kernels for time and date related …\nDefines union_extract kernel for UnionArray\nDefines windowing functions, like <code>shift</code>ing\nZip two arrays by some boolean mask. Where the mask …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nApplies a fallible unary function to an array with …\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nApplies an infallible unary function to an array with …\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nFormatting options when casting from temporal types to …\nhow to handle cast failures, either return NULL …\nA Century\nA Day\nA Decade\nAn Hour\nConfig to parse interval strings\nRepresents the units of an interval, with each variant …\nA Microsecond\nA Millisecond\nA Minute\nA Month\nA tuple representing (months, days, nanoseconds) in an …\nA Nanosecond\nSpecialized parsing implementations to convert strings to …\nA Second\nA Week\nA Year\nParse a string to the native type\nParse the string format decimal value to i128/i256 format …\nParse a string to the native type with a format string\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCompares two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nComparing two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nPerform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>\nPerform <code>left == right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left != right</code> operation on two <code>Datum</code>.\nPerform <code>left IS NOT DISTINCT FROM right</code> operation on two …\nA trait for Arrow String Arrays, currently three types are …\nPerform SQL <code>CONTAINS(left, right)</code>\nPerform SQL <code>ENDSWITH(left, right)</code>\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nReturns true if all data within this string array is ASCII\nConstructs a new iterator\nPerform SQL <code>left LIKE right</code>\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nReturn BooleanArray indicating which strings in an array …")