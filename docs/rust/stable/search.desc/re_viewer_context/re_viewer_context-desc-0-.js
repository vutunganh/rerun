searchState.loadedDescShard("re_viewer_context", 0, "Rerun Viewer context\nThe payload type is acceptable and could successfully be …\nMake this the active application.\nIf this is a recording, switch to it.\nWe are looping the entire recording.\nSelect a specific application, to see which recordings and …\nGlobal options for the viewer.\nSelection and hover state.\nA unique id for a type of Blueprint contents.\nThe stream tree from the blueprint debug time panel\nThe stream tree from the blueprint debug time panel, when …\nBlueprint tree from the blueprint panel (left panel)\nHovering/selecting in the blueprint tree.\nBlueprint tree from the blueprint panel (left panel), when …\nWe store the entire edit history of a blueprint in its …\nStop traversal and return this value.\nA cache for memoizing things in order to speed up …\nDoes memoization of different objects for the immediate …\nClear the active blueprint.\nClear the active blueprint and enable heuristics.\nClear everything that came from this source, and close the …\nClose all stores and show the welcome screen again.\nClose this app and all its recordings.\nClose a recording or blueprint (free its memory).\nThe various kinds of items that may be represented and for …\nThe various scopes for which we want to track collapsed …\nA collapsed identifier.\nColormap together with the range of image values that is …\nReceiver for the <code>CommandSender</code>\nSender that queues up the execution of commands.\nError type for a fallback request.\nProvides fallback values for components, implemented …\nResult for a fallback request to a provider.\nThe fallback provider is not able to handle the given …\nA component of an entity from the chunk store.\nHow to display components in a Ui.\nSpecifies which UI callbacks are available for a component.\nA viewport container.\nThe dragged content is made only of <code>Contents</code>.\nThe name of a <code>Contents</code>.\nContinue tree traversal\nThe screenshot will be copied to the clipboard.\nAdditional filter for visualizability on top of the …\nThe result of executing a single data query for a specific …\nThis is the primary mechanism through which data is passed …\nAn entity or instance in the context of a view’s data …\nIdentifier for a <code>DataResultNode</code>\nA single node in the <code>DataResultTree</code>\nA hierarchical tree of <code>DataResult</code>s\nA place where data comes from, e.g. the path to a .rrd or …\nHelper to handle drag-and-drop operations.\nDrop a specific entity from a store.\nShow a timeline of the blueprint data.\nThe dragged content is made of entities.\nAdd a task, run on a background thread, that saves …\nFollow the latest available data\nGive this view lots of space. Used for spatial views …\nHover highlight, sorted from weakest to strongest.\nApply hover highlight, does <em>not</em> exclude a selection …\nTrait for naming/identifying <code>crate::VisualizerSystem</code>s &amp; …\nThe payload type is irrelevant to me.\nCaches the results of decoding …\nRepresents the contents of an <code>Image</code>, <code>SegmentationImage</code> or …\nStats about an image.\nList of entities that match the indicator components of a …\nAn entity or instance from the chunk store.\nCombination of selection &amp; hover highlight which can occur …\nThe dragged content is made of a collection of <code>Item</code>s we do …\nOne “thing” in the UI.\nAn ordered collection of <code>Item</code> and optional associated …\nContext information that a view might attach to an item …\nUse latest-at semantics.\nDisplay a short summary. Used in lists.\nLoad some data.\nThis view can share space with others\nAll different\nA reference to a value that is <em>maybe</em> mutable.\nList of entities that are <em>maybe</em> visualizable with a given …\nThis <code>Contents</code> has been given a name by the user.\nNo selection highlight at all.\nNo hover highlight.\nLooping is off.\nPath to a specific entity in a specific store used for …\nTime doesn’t move\nThis <code>Contents</code> is unnamed and should be displayed with this …\nTime move steadily\nInformation about a view that is published each frame by …\nContext for a latest-at query in a specific view.\nRange &amp; type of chunk store query.\nProperties of a view that as recommended to be spawned by …\nUI config for the current recording (found in <code>EntityDb</code>).\nThe payload type is correct, but it’s content cannot be …\nReset the <code>Viewer</code> to the default state\nMany <code>ResolvedAnnotationInfo</code>, with optimization for a …\nAll the same\nThe screenshot will be saved to disk.\nInfo given to egui when taking a screenshot.\nWhere to put the screenshot.\nShould apply selection highlight (i.e. the exact selection …\nWe are looping within the current loop selection.\nSelection highlight, sorted from weakest to strongest.\nDisplay everything as wide as available, without height …\nArrow serialization failed.\nSet the active timeline for the given recording.\nSets the focus to the given item.\nSet the item selection.\nA closely related object is selected, should apply similar …\nContinue tree traversal but skip the children of the …\nThe current Blueprint and Recording being displayed by the …\nA recording (or blueprint)\nStream tree from the time panel\nHovering/selecting in one of the streams trees.\nStream tree from the time panel, when the filter is active\nCommands used by internal system components\nInterface for sending <code>SystemCommand</code> messages.\nOutput of view system execution.\nStats about a tensor or image.\nCaches tensor stats using a <code>RowId</code>, i.e. a specific …\nHovering/Selecting in a 3D space.\nControls the global view and progress of the time.\nDrag value widget for editing time values for both …\nUse a time range on the currently active timeline.\nThe time range we are currently zoomed in on.\nDisplay as much information as possible in a compact way. …\nHovering/Selecting in a 2D space.\nProvides a fallback value for a given component with known …\nSpecifies the context in which the UI is used and the …\nNot directly returned by the fallback provider, but useful …\nUpdate the blueprint with additional data\nA fallback value was successfully provided.\nCaches meshes based on media type &amp; row id.\nA viwport view.\nDefines a class of view without any concrete types making …\nRegistry of all known view types.\nThe context associated with a view.\nView context that can be used by view parts and ui methods …\nHighlights of a specific entity path in a specific view.\nHighlights in a specific view.\nUsed to publish info aboutr each view.\nHeuristics for spawning views of a given class.\nUnserialized frame to frame state of a view.\nState for the <code>View</code>s that persists across frames but …\nUnique name for a system within a given <code>crate::ViewClass</code>.\nUtility for registering view systems, passed on to …\nCommon things needed by many parts of the viewer.\nType to be returned by visitor closure to control the tree …\nList of entities that can be visualized at some point in …\nContext object returned by …\nElement of a scene derived from a single archetype query.\nThis is a nice range of absolute times to use when editing …\nThe <code>app_id</code> of the current recording.\nGlobal options for the whole viewer.\nArchetype name in which context the component is needed.\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a mutable reference of <code>Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nFor ranges with large offsets (e.g. <code>log_time</code>), this is a …\nThe current active blueprint.\nUI config for the current blueprint.\nDisable garbage collection of the blueprint.\nThe blueprint query used for resolving blueprint in this …\nThe timepoint to use when writing an update to the …\nThe image data, row-wise, with stride=width.\nThe row id that contained the blob.\nAll the loaded recordings and blueprints.\nViewer caches\nThings that need caching and are shared across the whole …\nPath to the directory suitable for storing cache data.\nThings that need caching.\nHelper types for producing stable <code>egui::Id</code> for the purpose …\nCreates a new command channel.\nInterface for sending commands back to the app\nReturns all the component sets that the system is …\nLatest-at results for all component defaults in this view.\nImplements viewing and probably editing\nImplements viewing and probably editing\nHow to display components.\nThe style to use for displaying this view name in the UI.\nExecuted context systems, may hold state that the ui …\nThe current blueprint time, used for latest-at.\nShow data while respecting the given UI layout.\nThe default blueprint (i.e. the one logged from code), if …\nUser-facing name of this view class.\nSupport for viewer-wide drag-and-drop of <code>crate::Item</code>s.\nHelper object to manage drag-and-drop operations.\nDraw data gathered during execution of the view part …\nThe <code>egui::Context</code>.\nWhere to retrieve the data from.\nQueries the chunk store and performs data conversions to …\nQueries the chunk store and performs data conversions to …\nReturns the fallback provider for this visualizer.\nUi method to use if there was no specific one registered …\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nItem that got focused on the last frame if any.\nIf true, we are in “follow” mode (see …\nDescribes the format of <code>Self::buffer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBridge to <code>re_renderer</code>\nRange with special highlight.\nHover/select highlighting information for this view.\nWhat objects are hovered? Read from this.\nWhat objects are hovered? Write to this.\nThe store hub, which keeps track of all the default and …\nDetermines the icon to use for a given container kind.\nUnique name for a system within a given <code>crate::ViewClass</code>.\nIdentifier string of this view class.\nImplements the <code>ComponentFallbackProvider</code> trait for a given …\nInclude the “Welcome screen” application in the …\nFor each visualizer, the set of entities that have at …\nThese are not required, but if <em>any</em> of these are found, it …\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nInteresting times to undo/redo to.\nInspect the blueprint timeline.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nColor, Depth, or Segmentation?\nShow a label while respecting the given UI layout.\nThe time on the timeline we’re currently at.\nControls how likely this view will get a large tile in the …\nOlder component uis - TODO(#6661): we’re in the process …\nMapbox API key (used to enable Mapbox-based map view …\nMapping from class and system to entities for the store\nWhere start of the range.\nName of the screenshot (e.g. view name), excluding file …\nHuman-readable name of the view.\nCalled once for every new view instance of this class.\nThe number of entities that matched the query, including …\nOf the matched queries, the number of entities that are …\nFired when the timeline is paused.\nFired when the timeline is played.\nCalled once upon registration of the class\nFired when the a different timeline is selected.\nFired when the timepoint changes.\nAll <code>DataResult</code>s that are queried by active visualizers.\nIf true, we are either in <code>PlayState::Playing</code> or …\nThe accumulated property overrides for this <code>DataResult</code>.\nAttempt to free up memory.\nReturns the list of components that the system <em>queries</em>.\nQuery which didn’t yield a result for the component at …\nWhat range is queried on the chunk store.\nAll the query results for this frame.\nThe range of values, ignoring <code>NaN</code>s.\nThe range of values, ignoring <code>NaN</code>s.\nAllowed range for value.\nUI config for the current recording (found in <code>EntityDb</code>).\nThe recommended views to spawn\nThe current active recording.\nWhere on screen (in ui coords).\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nRuntime info about components and archetypes.\nThis is a nice range of relative times to use when editing …\nThe global <code>re_renderer</code> context, holds on to all GPU …\nReturns the minimal set of components that the system …\nAn alternative store and entity path to use for the …\nReplace “dangerous” characters by a safe one.\nSelection of the previous frame. Read from this.\nSelection &amp; hovering state.\nSelection of the current frame. Write to this.\nShould we enable the heuristics during this frame?\nShow milliseconds, RAM usage, etc.\nDisplays an overlay for debugging picking.\nThe root of the space in which context the query happens.\nDetermines which views should be spawned by default for …\nThe current view of the store\nBuild an egui table and configure it for the given UI …\nWhere to put the screenshot.\nTarget entity path which is lacking the component and …\nThe current time of the time panel, how fast it is moving, …\nHow much time the full view covers.\nWhat time zone to display timestamps in.\nName of the timeline (e.g. <code>log_time</code>).\nThe timeline we’re on.\nThe <code>DataResultTree</code> for the query\nIf true, this path is not actually included in the query …\nTries to provide a fallback value for a given component.\nVarious strongly typed sets of entities to express intent …\nDraws the ui for this view class and handles ui events.\nWhat portion of the UI to take a screenshot of (in ui …\nItems that may not be dragged, e.g., because they are not …\nFor temporal timelines, this is a nice unit factor to use.\nFor temporal timelines, this is the unit symbol to display.\nUpdates the internal visualizability filter state based on …\nCustom path to the FFmpeg binary.\nPreferred method for video decoding on web.\nOverride the path to the FFmpeg binary.\nRerun View class definition\nRegistry of all known classes of views.\nThe view context, if available.\nThe id of the space in which context the query happens.\nThe view state of the view in which the query is executed.\nExecuted view systems, may hold state that the ui method …\nCompanion to <code>std::ops::ControlFlow</code> useful to implement …\nInformation about which components are queried by the …\nWhich <code>ViewSystems</code>s to pass the <code>DataResult</code> to.\nThe current entity filter session id, if any.\nThe current entity filter session id, if any.\nCorresponding 2D spaces and pixel coordinates (with …\nWhere in this 2D space (+ depth)?\nThe point in 3D space that is hovered, if any.\nThe 3D space with the camera(s)\nWhich store does this streams tree correspond to?\nPath to an entity that is currently tracked by the …\nAll different\nMany <code>ResolvedAnnotationInfo</code>, with optimization for a …\nAll the same\nMerges class annotation info with keypoint annotation info …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each passed <code>EntityPath</code>, walk up the tree and find the …\nFast access to an <code>Arc</code> sharing the same <code>Annotations::missing</code>…\nGlobal options for the viewer.\nDisable garbage collection of the blueprint.\nPath to the directory suitable for storing cache data.\nDefault cache directory\nReturns the argument unchanged.\nInclude the “Welcome screen” application in the …\nInspect the blueprint timeline.\nCalls <code>U::from(self)</code>.\nMapbox API key (used to enable Mapbox-based map view …\nShow milliseconds, RAM usage, etc.\nDisplays an overlay for debugging picking.\nWhat time zone to display timestamps in.\nCustom path to the FFmpeg binary.\nPreferred method for video decoding on web.\nOverride the path to the FFmpeg binary.\nGet the video decoder settings.\nThe timepoint to use when writing an update to the …\nA unique id for a type of Blueprint contents.\nHelper to define a new <code>BlueprintId</code> type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cache for memoizing things in order to speed up …\nDoes memoization of different objects for the immediate …\nConverts itself to a mutable reference of <code>Any</code>, which …\nCalled once per frame to potentially flush the cache.\nCalled once per frame to potentially flush the cache.\nCall once per frame to potentially flush the cache(s).\nAccesses a cache for reading and writing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReact to the chunk store’s changelog, if needed.\nReact to the chunk store’s changelog, if needed.\nReact to the chunk store’s changelog, if needed.\nAttempt to free up memory.\nAttempt to free up memory.\nCaches the results of decoding …\nDecode some image data and cache the result.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAt which <code>ImageDecodeCache::generation</code> was this image last …\nTotal memory used by this image.\nCached <code>Result</code> from decoding the image\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCaches tensor stats using a <code>RowId</code>, i.e. a specific …\nThe key should be the <code>RowId</code> of the <code>TensorData</code>. NOTE: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCaches meshes based on media type &amp; row id.\nRead in some video data and cache the result.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeeps failed loads around, so we can don’t try again and …\nThe stream tree from the blueprint debug time panel\nThe stream tree from the blueprint debug time panel, when …\nBlueprint tree from the blueprint panel (left panel)\nBlueprint tree from the blueprint panel (left panel), when …\nThe various kinds of items that may be represented and for …\nThe various scopes for which we want to track collapsed …\nA collapsed identifier.\nStream tree from the time panel\nStream tree from the time panel, when the filter is active\nCreate a <code>CollapsedId</code> for a container in this scope.\nCreate a <code>CollapsedId</code> for a data result in this scope.\nConvert to an <code>egui::Id</code>.\nCreate a <code>CollapsedId</code> for an entity in this scope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck the collapsed state for the given <code>CollapsedId</code>.\nCreate a <code>CollapsedId</code> for an <code>Item</code> of supported kind.\nSet the collapsed state for the given <code>CollapsedId</code>.\nSet the collapsed state for the given item in every …\nCreate a <code>CollapsedId</code> for a view in this scope.\nMake this the active application.\nIf this is a recording, switch to it.\nClear the active blueprint.\nClear the active blueprint and enable heuristics.\nClear everything that came from this source, and close the …\nClose all stores and show the welcome screen again.\nClose this app and all its recordings.\nClose a recording or blueprint (free its memory).\nReceiver for the <code>CommandSender</code>\nSender that queues up the execution of commands.\nDrop a specific entity from a store.\nShow a timeline of the blueprint data.\nAdd a task, run on a background thread, that saves …\nLoad some data.\nReset the <code>Viewer</code> to the default state\nSet the active timeline for the given recording.\nSets the focus to the given item.\nSet the item selection.\nCommands used by internal system components\nInterface for sending <code>SystemCommand</code> messages.\nUpdate the blueprint with additional data\nCreates a new command channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceive a <code>SystemCommand</code> to be executed if any is queued.\nReceive a <code>UICommand</code> to be executed if any is queued.\nSave some bytes to disk, after first showing a save dialog.\nSend a command to be executed.\nSend a command to be executed.\nError type for a fallback request.\nProvides fallback values for components, implemented …\nResult for a fallback request to a provider.\nThe fallback provider is not able to handle the given …\nArrow serialization failed.\nProvides a fallback value for a given component with known …\nNot directly returned by the fallback provider, but useful …\nA fallback value was successfully provided.\nProvides a fallback value for a given component, first …\nProvides a fallback value for a given component, first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to provide a fallback value for a given component.\nHow to display components in a Ui.\nSpecifies which UI callbacks are available for a component.\nDisplay the component in a read-only way.\nAllow the user to view and mutate the value\nEdit the component over multiple <code>re_ui::list_item::ListItem</code>…\nEdit the component in a single <code>re_ui::list_item::ListItem</code> …\nCallback for viewing, and maybe editing, a component via …\nNo mutation allowed\nRegisters how to show a given component in the UI.\nRegisters how to view, and maybe edit, a given component …\nRegisters how to view, and maybe edit, a given component …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nImplements viewing and probably editing\nImplements viewing and probably editing\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nUi method to use if there was no specific one registered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nOlder component uis - TODO(#6661): we’re in the process …\nShow a multi-line editor for this instance of this …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nQueries which UI types are registered for a component.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nShow a single-line editor for this instance of this …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTries to show a UI for editing a component.\nShow a UI for a component instance.\nShow a UI for a single raw component.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe name of a <code>Contents</code>.\nThis <code>Contents</code> has been given a name by the user.\nThis <code>Contents</code> is unnamed and should be displayed with this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe payload type is acceptable and could successfully be …\nThe dragged content is made only of <code>Contents</code>.\nHelper to handle drag-and-drop operations.\nThe dragged content is made of entities.\nThe payload type is irrelevant to me.\nThe dragged content is made of a collection of <code>Item</code>s we do …\nHelper class to count item types and display them in a …\nThe payload type is correct, but it’s content cannot be …\nChecks if items are draggable based on the list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>DragAndDropManager</code> by providing a list of …\nDisplay the currently dragged payload as a pill in the UI.\nSet the feedback to display to the user based on drop …\nItems that may not be dragged, e.g., because they are not …\nReplace “dangerous” characters by a safe one.\nGet a valid, finite range for the gpu to use.\nUpload images to <code>re_renderer</code>.\n<code>colormap</code> is currently only used for depth images.\nRender the given image, respecting the clip rectangle of …\nDetermines if and how the shader needs to decode the image.\nReturn whether a tensor should be assumed to be encoded in …\nCreates a <code>ImageDataDesc</code> for creating a texture from an …\nShow the given colormap as a horizontal bar.\nUploads the image to a texture in a format that closely …\nReturns a texture key for the given image.\nGet a valid, finite range for the gpu to use.\nReturn whether an image should be assumed to be encoded in …\n<code>colormap</code> is currently only used for depth images.\nPad an RGB image to RGBA and cast the results to bytes.\nPad an RGB image to RGBA and cast the results to bytes.\nDetermines if and how the shader needs to decode the image.\nCreates a <code>ImageDataDesc</code> for creating a texture from an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nColormap together with the range of image values that is …\nRepresents the contents of an <code>Image</code>, <code>SegmentationImage</code> or …\nThe image data, row-wise, with stride=width.\nThe row id that contained the blob.\nReturns <code>ColorModel::L</code> for depth and segmentation images.\nDescribes the format of <code>Self::buffer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the element at the given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nColor, Depth, or Segmentation?\nBest-effort.\nConvert this image to an encoded PNG\nSee <code>Self::to_dynamic_image</code>.\nCast the buffer to the given type.\nRemaps the given data range to <code>u16</code>, with rounding and …\nSelect a specific application, to see which recordings and …\nA component of an entity from the chunk store.\nA viewport container.\nAn entity or instance in the context of a view’s data …\nA place where data comes from, e.g. the path to a .rrd or …\nAn entity or instance from the chunk store.\nOne “thing” in the UI.\nA recording (or blueprint)\nA viwport view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf the given path refers to the first element of an …\nIf the given item refers to the first element of an …\nA reference to a value that is <em>maybe</em> mutable.\nReturns the mutable reference, if possible.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe result of executing a single data query for a specific …\nIdentifier for a <code>DataResultNode</code>\nA single node in the <code>DataResultTree</code>\nA hierarchical tree of <code>DataResult</code>s\nContext for a latest-at query in a specific view.\nArchetype name in which context the component is needed.\nLatest-at results for all component defaults in this view.\nDepth-first search of a node based on the provided …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResultNode</code> in the tree based on an <code>EntityPath</code>…\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on an <code>EntityPath</code>.\nThe number of entities that matched the query, including …\nOf the matched queries, the number of entities that are …\nQuery which didn’t yield a result for the component at …\nTarget entity path which is lacking the component and …\nThe <code>DataResultTree</code> for the query\nThe view context, if available.\nThe view state of the view in which the query is executed.\nDepth-first traversal of the tree, calling <code>visitor</code> on each …\nDepth-first traversal of the tree, calling <code>visitor</code> on each …\nUse latest-at semantics.\nRange &amp; type of chunk store query.\nUse a time range on the currently active timeline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSelection and hover state.\nHovering/selecting in the blueprint tree.\nHover highlight, sorted from weakest to strongest.\nApply hover highlight, does <em>not</em> exclude a selection …\nCombination of selection &amp; hover highlight which can occur …\nAn ordered collection of <code>Item</code> and optional associated …\nContext information that a view might attach to an item …\nNo selection highlight at all.\nNo hover highlight.\nShould apply selection highlight (i.e. the exact selection …\nSelection highlight, sorted from weakest to strongest.\nA closely related object is selected, should apply similar …\nHovering/selecting in one of the streams trees.\nHovering/Selecting in a 3D space.\nHovering/Selecting in a 2D space.\nClears the current selection out.\nReturns true if the exact selection is part of the current …\nExtend the selection with more items.\nExtend the selection with the provided items.\nThe first selected object if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the currently hovered objects.\nWhat objects are hovered? Read from this.\nWhat objects are hovered? Write to this.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each item in this selection, if it refers to the first …\nCheck if the selection is empty.\nReturns an iterator over the items and their selected …\nReturns a mutable iterator over the items and their …\nReturns the number of items in the selection.\nPicks the stronger selection &amp; hover highlight from two …\nCalled at the start of each frame\nRetains elements that fulfill a certain condition.\nReturns the current selection.\nSelection of the previous frame. Read from this.\nSelection of the current frame. Write to this.\nSet the hovered objects. Will be in <code>Self::hovered_items</code> on …\nSets several objects to be selected, updating history as …\nCheck if the selection contains a single item and returns …\nSelect passed objects unless already selected in which …\nThe current entity filter session id, if any.\nThe current entity filter session id, if any.\nCorresponding 2D spaces and pixel coordinates (with …\nWhere in this 2D space (+ depth)?\nThe point in 3D space that is hovered, if any.\nThe 3D space with the camera(s)\nWhich store does this streams tree correspond to?\nPath to an entity that is currently tracked by the …\nThe current Blueprint and Recording being displayed by the …\nThe <code>app_id</code> of the current recording.\nThe current active blueprint.\nThe timepoint to use when writing an update to the …\nAll the loaded recordings and blueprints.\nThings that need caching.\nThe default blueprint (i.e. the one logged from code), if …\nReturns the argument unchanged.\nThe store hub, which keeps track of all the default and …\nCalls <code>U::from(self)</code>.\nThe current active recording.\nShould we enable the heuristics during this frame?\nLoad a blueprint from persisted storage, e.g. disk. …\nHow to save and load blueprints\nSave a blueprint to persisted storage, e.g. disk.\nValidate a blueprint against the current blueprint schema …\nInterface for accessing all blueprints and recordings\nConvenient information used for <code>MemoryPanel</code>\nWhat is the active blueprint for the active application?\nDirectly access the <code>Caches</code> for the active recording.\nDirectly access the <code>EntityDb</code> for the active recording.\nDirectly access the <code>EntityDb</code> for the active recording.\nSee <code>re_viewer_context::Cache::begin_frame</code>.\nThe <code>ChunkStoreGeneration</code> from when the <code>EntityDb</code> was last …\nThe <code>ChunkStoreGeneration</code> from when the <code>EntityDb</code> was last …\nThings that need caching.\nClear the currently active blueprint\nClear the currently active blueprint and enable the …\nCloned blueprints are the ones the user has edited, i.e. …\nRemove all open recordings and applications, and go to the …\nClose this application and all its recordings.\nMutable access to a <code>EntityDb</code> by id\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a new recording or blueprint into the <code>StoreHub</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the given blueprint id the active blueprint for any app …\nCreate a new <code>StoreHub</code>.\nHow we load and save blueprints.\nRemove any empty <code>EntityDb</code>s from the hub\nCall <code>EntityDb::purge_fraction_of_ram</code> on every recording\nGet a read-only <code>StoreContext</code> from the <code>StoreHub</code> if one is …\nRemove any recordings with a network source pointing at …\nPersist any in-use blueprints to durable storage.\nActivate a recording by its <code>StoreId</code>.\nChange the active <code>ApplicationId</code>\nChange the active/visible recording id.\nMake blueprint active for a given <code>ApplicationId</code>\nChange which blueprint is the default for a given …\nThese applications should enable the heuristics early next …\nPopulate a <code>StoreHubStats</code> based on the active app.\nAll the loaded recordings and blueprints.\nUsed only for tests\nTry to load the persisted blueprint for the given …\nApp ID used as a marker to display the welcome screen.\nBlueprint ID used for the default welcome screen blueprint\nStats about an image.\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe range of values, ignoring <code>NaN</code>s.\nStats about a tensor or image.\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe range of values, ignoring <code>NaN</code>s.\nInstance &amp; adapter\nHarness to execute code that rely on <code>crate::ViewerContext</code>.\nTimeline the recording config is using by default.\nCreate an <code>egui_wgpu::RenderState</code> for tests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBest-effort attempt to meaningfully handle some of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog an entity to the recording store.\nRegister a view class.\nRun the provided closure with a <code>ViewerContext</code> produced by …\nRun the given function with a <code>ViewerContext</code> produced by …\nRun the given function once with a <code>ViewerContext</code> produced …\nFails the test iff more than <code>broken_percent_threshold</code>% …\nWe are looping the entire recording.\nFollow the latest available data\nLooping is off.\nTime doesn’t move\nTime move steadily\nWe are looping within the current loop selection.\nControls the global view and progress of the time.\nState per timeline.\nThe time range we are currently zoomed in on.\nThe current loop range, iff selection looping is turned on.\nQuery for latest value at the currently selected time on …\nPick the timeline that should be the default, prioritizing …\nIf true, we are in “follow” mode (see …\nplayback fps\nFrames per second, when playing sequences (they are often …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe full range of times for the current timeline\nHandle updating last frame state and trigger callbacks on …\nRange with special highlight.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the current time in the selection range (if any), or at …\nThe selected slice of time that is called the “loop …\nSelected time range, if any.\nWhere start of the range.\nFired when the timeline is paused.\nFired when the timeline is played.\nFired when the a different timeline is selected.\nFired when the timepoint changes.\nIf true, we are either in <code>PlayState::Playing</code> or …\nRemove the current loop selection.\nThe range of time we are currently zoomed in on.\nMake sure the selected timeline is a valid one\nplayback fps\nSet the current loop selection without enabling looping.\nplayback speed\nThe range of time we are currently zoomed in on.\nplayback speed\nThe current time.\nThe current time (play marker).\nThe current time.\nThe current time.\nHow much time the full view covers.\nThe time type of the currently selected timeline\nThe range of time we are currently zoomed in on.\nThe currently selected timeline\nName of the timeline (e.g. <code>log_time</code>).\nMove the time forward (if playing), and perhaps pause if we…\nThe time range we are currently zoomed in on.\nValue of the start time over time span ratio above which …\nDrag value widget for editing time values for both …\nThis is a nice range of absolute times to use when editing …\nFor ranges with large offsets (e.g. <code>log_time</code>), this is a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the maximum time set for this drag value.\nReturn the minimum time set for this drag value.\nAllowed range for value.\nThis is a nice range of relative times to use when editing …\nShow a sequence drag value widget.\nShow a temporal drag value widget.\nFor temporal timelines, this is a nice unit factor to use.\nFor temporal timelines, this is the unit symbol to display.\nList of entities that match the indicator components of a …\nList of entities that are <em>maybe</em> visualizable with a given …\nList of entities that can be visualized at some point in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe store the entire edit history of a blueprint in its …\nMax number of undo points.\nAfter calling this, there is no way to redo what was once …\nThe current blueprint time, used for latest-at.\nDefault latest-at query\nReturns the argument unchanged.\nInteresting times to undo/redo to.\nCalls <code>U::from(self)</code>.\nHow far back in time can we undo?\nIf set, everything after this time is in “redo-space” …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStorage for the state of each <code>View</code>.\nHighlights of a specific entity path in a specific view.\nHighlights in a specific view.\nAdds a new highlight to the entity highlight, combining it …\nAdd a new outline mask to this entity path, combining it …\nAdds a new hover highlight to the entity highlight, …\nAdds a new selection highlight to the entity highlight, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait for naming/identifying <code>crate::VisualizerSystem</code>s &amp; …\nUnique name for a system within a given <code>crate::ViewClass</code>.\nReturns the argument unchanged.\nPrecomputed hash of the string.\nUnique name for a system within a given <code>crate::ViewClass</code>.\nCalls <code>U::from(self)</code>.\nProperties of a view that as recommended to be spawned by …\nHeuristics for spawning views of a given class.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHash together with the View class id to the …\nThe recommended views to spawn\nOutput of view system execution.\nExecuted context systems, may hold state that the ui …\nDraw data gathered during execution of the view part …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExecuted view systems, may hold state that the ui method …\nGive this view lots of space. Used for spatial views …\nThis view can share space with others\nDefines a class of view without any concrete types making …\nUnserialized frame to frame state of a view.\nContext object returned by …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nOptional archetype of the View’s blueprint properties.\nOptional archetype of the View’s blueprint properties.\nChoose the default visualizers to enable for this entity.\nChoose the default visualizers to enable for this entity.\nDefault query range for this view.\nDefault query range for this view.\nDetermines the set of visible entities for a given view.\nDetermines the set of visible entities for a given view.\nUser-facing name of this view class.\nDowncasts this state to a mutable reference of a concrete …\nDowncasts this state to a mutable reference of a concrete …\nDowncasts this state to a reference of a concrete type.\nDowncasts this state to a reference of a concrete type.\nAdditional UI displayed in the tab title bar, between the …\nAdditional UI displayed in the tab title bar, between the …\nReturns the argument unchanged.\nIcon used to identify this view class.\nIcon used to identify this view class.\nIdentifier string of this view class.\nCalls <code>U::from(self)</code>.\nControls how likely this view will get a large tile in the …\nCalled once for every new view instance of this class.\nCalled once upon registration of the class\nPreferred aspect ratio for the ui tiles of this view.\nPreferred aspect ratio for the ui tiles of this view.\nDetermines a suitable origin given the provided set of …\nDetermines a suitable origin given the provided set of …\nUi shown when the user selects a view of this class.\nUi shown when the user selects a view of this class.\nDetermines which views should be spawned by default for …\nControls whether the visible time range UI should be …\nControls whether the visible time range UI should be …\nDraws the ui for this view class and handles ui events.\nCreate context object that is passed to all of this …\nCreate context object that is passed to all of this …\nA placeholder view class that can be used when the actual …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContext system type entry in <code>ViewClassRegistry</code>.\nRegistry of all known view types.\nView class entry in <code>ViewClassRegistry</code>.\nUtility for registering view systems, passed on to …\nVisualizer entry in <code>ViewClassRegistry</code>.\nAdds a new view class.\nQueries a View type by class name, returning <code>None</code> if it is …\nReturns the user-facing name for the given view class.\nHandle to subscription of <code>VisualizerEntitySubscriber</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueries a View type by class name and logs if it fails, …\nFor each visualizer, the set of entities that have at …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over all registered View class types, sorted by …\nFor each visualizer, return the set of entities that may …\nRegisters a new <code>ViewContextSystem</code> type for a view class …\nRegisters a new <code>VisualizerSystem</code> type for a view class …\nRemoves a view class from the registry.\nThe context associated with a view.\nThe active blueprint.\nClears a component in the blueprint store by logging an …\nThe current time query, based on the current time control.\nReturns the argument unchanged.\nReturns the currently hovered objects.\nCalls <code>U::from(self)</code>.\nThe active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StoreId</code> of the active recording.\nReturns the current selection.\nView context that can be used by view parts and ui methods …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nReturns all the component sets that the system is …\nQueries the chunk store and performs data conversions to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is the primary mechanism through which data is passed …\nPath to a specific entity in a specific store used for …\nReturns from which entity path an override originates from.\nWhere to retrieve the data from.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHover/select highlighting information for this view.\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the current component’s value was …\nShorthand for checking for interactivity on data overrides.\nShorthand for checking for visibility on data overrides.\nIterates over all <code>DataResult</code>s of the <code>ViewQuery</code>.\nIterates over all entities of the <code>ViewQuery</code>.\nIter over all of the currently visible <code>DataResult</code>s for a …\nThe time on the timeline we’re currently at.\nAll <code>DataResult</code>s that are queried by active visualizers.\nThe accumulated property overrides for this <code>DataResult</code>.\nReturns the query range for this data result.\nWhat range is queried on the chunk store.\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nAn alternative store and entity path to use for the …\nSaves a recursive override OR clears both (!) individual &amp; …\nThe root of the space in which context the query happens.\nThe timeline we’re on.\nIf true, this path is not actually included in the query …\nThe id of the space in which context the query happens.\nWhich <code>ViewSystems</code>s to pass the <code>DataResult</code> to.\nState for the <code>View</code>s that persists across frames but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdditional filter for visualizability on top of the …\nA store subscriber that keep track which entities in a …\nAdditional filter for visualizability.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of entities that at some point in time had any of the …\nList of all entities in this store that at some point in …\nSee <code>crate::VisualizerQueryInfo::indicators</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of entities that are may be visualizable by the …\nWhich entities the visualizer can be applied to.\nFor each entity, which of the required components are …\nAssigns each required component an index.\nUpdates the internal visualizability filter state based on …\nVisualizer type this subscriber is associated with.\nElement of a scene derived from a single archetype query.\nOptionally retrieves a chunk store reference from the …\nOptionally retrieves a chunk store reference from the …\nAdditional filter for visualizability based on component …\nAdditional filter for visualizability based on component …\nQueries the chunk store and performs data conversions to …\nReturns the fallback provider for this visualizer.\nFilters a set of “maybe visualizable” entities …\nFilters a set of “maybe visualizable” entities …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThese are not required, but if <em>any</em> of these are found, it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all visualizer data that can be downcast to …\nReturns the list of components that the system <em>queries</em>.\nReturns the minimal set of components that the system …\nInformation about which components are queried by the …\nUI config for the current recording (found in <code>EntityDb</code>).\nCommon things needed by many parts of the viewer.\nGlobal options for the whole viewer.\nUI config for the current blueprint.\nThe active blueprint.\nThe <code>StorageEngine</code> for the active blueprint.\nThe blueprint query used for resolving blueprint in this …\nThings that need caching and are shared across the whole …\nClears a component in the blueprint store by logging an …\nInterface for sending commands back to the app\nHow to display components.\nThe current time query, based on the current time control.\nHelper object to manage drag-and-drop operations.\nThe <code>egui::Context</code>.\nItem that got focused on the last frame if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsistently handle the selection, hover, drag start …\nReturns the currently hovered objects.\nFor each visualizer, the set of entities that have at …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre we running inside the Safari browser?\nMapping from class and system to entities for the store\nReturns a placeholder value for a given component, solely …\nAll the query results for this frame.\nQueries a raw component from the default blueprint.\nUI config for the current recording (found in <code>EntityDb</code>).\nThe active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StoreId</code> of the active recording.\nRuntime info about components and archetypes.\nThe global <code>re_renderer</code> context, holds on to all GPU …\nResets a blueprint component to the value it had in the …\nHelper to save a component to the blueprint store.\nReturns the current selection.\nSelection &amp; hovering state.\nThe current view of the store\nThe current time of the time panel, how fast it is moving, …\nRegistry of all known classes of views.\nStop traversal and return this value.\nContinue tree traversal\nContinue tree traversal but skip the children of the …\nType to be returned by visitor closure to control the tree …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates whether we should visit the children of the …")