searchState.loadedDescShard("re_log_encoding", 0, "Crate that handles encoding of rerun log types.\nCompression format used.\nError creating the file.\nReturn an error if the versions aren’t compatible.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nVery fast compression and decompression, but not very good …\nError encoding a log message.\nOn failure to decode <code>EncodingOptions</code>\nHow we serialize the data\nError spawning the file writer thread.\nHow to handle version mismatches during decoding.\nWarn if the versions don’t match, but continue loading.\nDecoding <code>LogMsg</code>:es from <code>.rrd</code> files/streams.\nEncoding of <code>LogMsg</code>es as a binary stream, e.g. to store in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a message header from a byte buffer. Input buffer …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOnly used for diagnostics, not for access after <code>new()</code>.\n<code>compressed_len</code> is equal to <code>uncompressed_len</code> for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTODO(#3741): switch to arrow1 once …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper function that deserializes raw bytes into arrow …\nHelper function that serializes given arrow schema and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a message header from a byte buffer. Input buffer …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecode an object from a its wire (protobuf) representation.\nDecode transport data from a byte stream.\nEncode an object into a wire (protobuf) type.\nEncode a transport chunk into a byte stream.\nOn failure to encode or serialize a <code>LogMsg</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a new decoder.\nInstantiates a new concatenated decoder.\nPeeks ahead in search of additional <code>FileHeader</code>s in the …\nReturns the size in bytes of the data that has been …\nThe size in bytes of the data that has been decoded up to …\nReturns the Rerun version that was used to encode the data …\nThe message content.\nThe beginning of a message.\nThe stream decoder is a state machine which ingests byte …\nThe beginning of the stream.\nThis buffer is used as scratch space for any read bytes, …\nHow many bytes of valid data are currently in <code>self.buffer</code>.\nIncoming chunks are stored here\nCompression options\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny incoming chunks are queued until they are emptied\nThe stream state\nAttempt to read exactly <code>n</code> bytes out of the queued chunks.\nThe uncompressed bytes are stored in this buffer before …\nThe Rerun version used to encode the RRD data.\nHow to handle version mismatches\nflag to indicate if we’re expecting more data to be read.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if <code>data</code> can be successfully decoded into a …\nbuffer used for uncompressing data. This is a tiny …\ninternal buffer for unprocessed bytes\nAn <code>Encoder</code> that properly closes the stream on drop.\nOn failure to encode or serialize a <code>LogMsg</code>.\nEncode a stream of <code>LogMsg</code> into an <code>.rrd</code> file.\nReturns the size in bytes of the encoded data.\nReturns the size in bytes of the encoded data.\nReturns the size in bytes of the encoded data.\nReturns the size in bytes of the encoded data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTracks whether the end-of-stream marker has been written …\nError creating the file.\nStream log messages to an <code>.rrd</code> file.\nErrors that can occur when creating a <code>FileSink</code>.\nError encoding a log message.\nError spawning the file writer thread.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart writing log messages to a file at the given path.\nOnly used for diagnostics, not for access after <code>new()</code>.\nSet <code>filepath</code> to <code>None</code> to stream to standard output.\nStart writing log messages to standard output.\nSomething went wrong. End of stream.\nAn intermediate message when decoding an rrd file fetched …\nThe next <code>LogMsg</code> in the decoding stream.\nEverything has been successfully decoded. End of stream.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStream an rrd file from a HTTP server.")