searchState.loadedDescShard("rerun_bindings", 0, "The Rerun Python Log SDK.\nMethods for handling Arrow datamodel log ingest\nPerform conversion between a pyarrow array to arrow types.\nBuild a <code>Chunk</code> given a ‘**kwargs’-style dictionary of …\nBuild a <code>PendingRow</code> given a ‘**kwargs’-style dictionary …\nPerform Python-to-Rust conversion for a <code>ComponentDescriptor</code>…\nA type alias for any component-column-like object.\nA type alias for any component-column-like object.\nA type alias for index values.\nThe descriptor of a component column.\nA selector for a component column.\nThe descriptor of an index column.\nA selector for an index column.\nAn archive loaded from an RRD.\nA single Rerun recording.\nA view of a recording restricted to a given index, …\nIterate over all the column descriptors in the schema.\nAll the recordings in the archive.\nThe application ID of the recording.\nLook up the column descriptor for a specific entity path …\nReturn a list of all the component columns in the schema.\nThe component name.\nThe component name.\nThe entity path.\nThe entity path.\nConvert a <code>ViewContentsLike</code> into a <code>ViewContentsSelector</code>.\nPopulate any null values in a row with the latest valid …\nFilter the view to only include data at the provided index …\nFilter the view to only include rows where the given …\nFilter the view to only include data between the given …\nFilter the view to only include data between the given …\nFilter the view to only include data between the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of all the index columns in the schema.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPart of generic ColumnDescriptor interface: always False …\nWhether the column is static.\nLoad a rerun archive from an RRD file.\nLoad a single recording from an RRD file.\nThe name of the index.\nThe name of the index.\nCreate a new <code>IndexColumnSelector</code>.\nCreate a new <code>ComponentColumnSelector</code>.\nThe number of recordings in the archive.\nThe recording ID of the recording.\nRegister the <code>rerun.dataframe</code> module.\nThe schema describing all the columns available in the …\nThe schema describing all the columns available in the …\nSelect the columns from the view.\nSelect only the static columns from the view.\nReplace the index in the view with the provided values.\nCreate a [<code>RecordingView</code>][rerun.dataframe.RecordingView] of …\nRelease Callbacks\nCreate a new binary stream sink, and return the associated …\nCleans up internal state if this is the child of a forked …\nConcatenate the contents of the <code>MemorySinkStorage</code> as bytes.\nSpecial binding for directly sending a blueprint stream to …\nDisconnect from remote server (if any).\nDrain all messages logged to the <code>MemorySinkStorage</code> and …\nBlock until outstanding data has been flushed to the sink\nFlush the binary sink manually.\nFlushes the <code>GARBAGE_QUEUE</code>, therefore running all the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a url to an instance of the web-viewer\nReturns the currently active blueprint recording in the …\nReturns the currently active data recording in the global …\nReturns the currently active blueprint recording in the …\nReturns the currently active data recording in the global …\nReturns the currently active blueprint recording in the …\nReturns the currently active data recording in the …\nThe underlying binary sink storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if this stream is operating in the context of a …\nCreate an in-memory rrd file\nCount the number of pending messages in the …\nRead the bytes from the binary sink.\nThe python module is called “rerun_bindings”.\nSpecial binding for directly savings a blueprint stream to …\nDirectly send an arrow chunk to the recording stream.\nSend a blueprint to the given recording stream.\nHelper for forwarding the blueprint memory-sink …\nServe a web-viewer.\nReplaces the currently active recording in the global …\nReplaces the currently active recording in the global …\nReplaces the currently active recording in the …\nReplaces the currently active recording in the …\nStart a web server to host the run web-assets\nReturn a verbose version string\nA type alias for metadata.\nA single Rerun recording.\nA connection to a remote storage node.\nA type alias for either a <code>VectorDistanceMetric</code> enum or a …\nA type alias for a vector (vector search input data).\nThe application ID of the recording.\nThe actual tonic connection.\nLoad a rerun archive from an RRD file.\nCreate a full-text-search index.\nCreate a vector index.\nDownload a [<code>Recording</code>][rerun.dataframe.Recording] by id to …\nExecute a <code>QueryExpression</code> for a single recording in the …\nConvert a <code>ViewContentsLike</code> into a <code>ViewContentsSelector</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the schema for a recording in the storage node.\nGet the <code>StoreInfo</code> for a single recording in the storage …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpen a [<code>Recording</code>][rerun.dataframe.Recording] by id to use …\nGet the metadata for recordings in the storage node.\nThe recording ID of the recording.\nRegister the <code>rerun.remote</code> module.\nRegister a recording along with some metadata.\nA tokio runtime for async operations. This connection will …\nSearch over a full-text-search index.\nSearch over a vector index.\nUpdate the catalog metadata for one or more recordings.\nCreate a [<code>RecordingView</code>][rerun.dataframe.RecordingView] of …\nReads the timestamps of all frames in a video asset.")