searchState.loadedDescShard("re_viewer", 7, "Get the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConvert the builder into a <code>Uuid</code>.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nThe ‘max UUID’ (all ones).\nCreates a random UUID.\nCreates a <code>Builder</code> with an initial <code>Uuid::nil</code>.\nThe ‘nil UUID’ (all zeros).\nGet a timestamp representing the current system time and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nAdapters for alternative <code>serde</code> formats.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nGet a <code>Simple</code> formatter.\nGenerating UUIDs from timestamps.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nGet the value of the timestamp as the number of 100 …\nReturns a 128bit little-endian value containing the value.\nGet the value of the timestamp as a Unix timestamp, as …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nThe number of usable bits from the least significant bit …\nParse <code>Uuid</code>s from string literals at compile time.\nSpecifies the variant of the UUID.\nSpecifies the version number of the UUID.\nFormat a <code>Uuid</code> as a braced hyphenated string, like …\nFormat a <code>Uuid</code> as a hyphenated string, like …\nThe length of a hyphenated <code>Uuid</code> string.\nThe length of a simple <code>Uuid</code> string.\nThe length of a URN <code>Uuid</code> string.\nThe length of a braced <code>Uuid</code> string.\nFormat a <code>Uuid</code> as a simple string, like …\nFormat a <code>Uuid</code> as a URN string, like …\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nGet a reference to the underlying <code>Uuid</code>.\nWrites the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…\nWrites the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as a lower-case hyphenated string …\nWrites the <code>Uuid</code> as an upper-case hyphenated string to …\nWrites the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …\nWrites the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …\nWrites the <code>Uuid</code> as an upper-case hyphenated string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Hyphenated</code> from a <code>Uuid</code>.\nCreates a <code>Simple</code> from a <code>Uuid</code>.\nCreates a <code>Urn</code> from a <code>Uuid</code>.\nCreates a <code>Braced</code> from a <code>Uuid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.\nConsumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nSerialize a <code>Uuid</code> as a <code>[u8; 16]</code>.\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nDeserialize a braced Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Braced</code>\nDeserialize a <code>[u8; 16]</code> as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>[u8; 16]</code>\nDeserialize a simple Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Simple</code>\nDeserialize a urn Uuid string as a <code>Uuid</code>\nSerialize from a <code>Uuid</code> as a <code>uuid::fmt::Urn</code>\nA counter that can be used by versions 1 and 6 UUIDs to …\nThe type of sequence returned by this counter.\nA timestamp that can be encoded into a UUID.\nThe number of 100 nanosecond ticks between the RFC 9562 …\nDefault implementations for the <code>ClockSequence</code> trait.\nGet the next value in the sequence to feed into a …\nGet the next value in the sequence, potentially also …\nThe number of usable bits from the least significant bit …\nAn empty counter that will always return the value <code>0</code>.\nA wrapper for a context that uses thread-local storage.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrap a thread-local container with a context.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>crate::archetypes::Image</code>…\nA depth map (<code>crate::archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a …\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>crate::archetypes::SegmentationImage</code>…\nCould not convert source to <code>TensorData</code>.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nGenerates reflection about all known components.\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nThe total number of components in the archetype: 22 …\nThe total number of components in the archetype: 19 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>AffixFuzzer1</code>.\nClear all the fields of a <code>AffixFuzzer2</code>.\nClear all the fields of a <code>AffixFuzzer3</code>.\nClear all the fields of a <code>AffixFuzzer4</code>.\nPartitions the component data into multiple sub-batches.\nPartitions the component data into multiple sub-batches.\nPartitions the component data into multiple sub-batches.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nHelper to partition the component data into unit-length …\nHelper to partition the component data into unit-length …\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1019</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1020</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1021</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1022</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1118</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1122</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2118</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nCreate a new <code>AffixFuzzer2</code>.\nCreate a new <code>AffixFuzzer3</code>.\nCreate a new <code>AffixFuzzer4</code>.\nUpdate only some specific fields of a <code>AffixFuzzer1</code>.\nUpdate only some specific fields of a <code>AffixFuzzer2</code>.\nUpdate only some specific fields of a <code>AffixFuzzer3</code>.\nUpdate only some specific fields of a <code>AffixFuzzer4</code>.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nOne.\nCorrect.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\nGreat film.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe first value.\nThe second value.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\n-X\n-Y\n-Z\n+X\n+Y\n+Z\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nThe six cardinal directions for 3D view-space and …\nConvert to a unit-length 3D vector.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an upper case letter to one of the six cardinal …\nConvert a dimension index to an axis.\nCreate a <code>Handedness</code> from a boolean.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLong description of the direction, e.g. “Up”, “Down…\nRepresent this direction as the first letter of the …\nPositive or negative.\nIf true, we hide the native window decoration (the top bar …\nA table mapping all combination of <code>Hue</code> and <code>Scale</code> to a …\nA token representing a color in the global color table.\nExtension trait for <code>egui::Context</code>.\nA single row in the controls table.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nA help popup where you can show markdown text and controls …\nA hue for a <code>ColorToken</code>.\nHelper to show text with icons in a row. Usually created …\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nDisplay a short summary. Used in lists.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nHelper to add <code>egui::Modifiers</code> as text with icons. Will …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nHelper to show mouse buttons as text/icons.\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA color scale for a <code>ColorToken</code>.\nA collapsible section header, with support for optional …\nDisplay everything as wide as available, without height …\nDisplay as much information as possible in a compact way. …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nSpecifies the context in which the UI is used and the …\nLabel displaying the placeholder text for a yet unnamed …\nAdd an item to the row.\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nGet the <code>egui::Color32</code> corresponding to the provided …\nColor table for all colors used in the UI.\nAdd a single control row to the last controls section.\nCreate a new empty control section.\nAdd a controls section.\nShow data while respecting the given UI layout.\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nAdd a docs link, to be shown in the top right corner.\nHelpers for drag and drop support for reordering …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nStroke used to indicate that a UI element is a container …\nShows an error label with the entire error text and copies …\nText colored to indicate an error.\nShows a small error label with the given text on hover and …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturn the keyboard shortcut for this command, nicely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nAdd an icon to the row.\nCreate an <code>IconText</code> with the given items.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nAll keyboard shortcuts, with the primary first.\nShow a label while respecting the given UI layout.\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nConvenience function to create a <code>list_item::list_item_scope</code>…\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nAdd a markdown section.\nShow some markdown\nConditionally collapsing header.\nShow this command as a menu-button.\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nBuild a new color table by calling the provided closure …\nCreate a new help popup.\nCreate a new control row.\nCreate a new, empty <code>IconText</code>.\nPaint a collapsing triangle in the Rerun’s style.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nDisplay the header.\nShow the command palette, if it is visible.\nAdds a non-interactive, optionally tinted small icon.\nShows a success label with a large border.\nText colored to indicate success.\nBuild an egui table and configure it for the given UI …\nAdd text to the row.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nBinary toggle switch.\nHeight of the top-most bar.\nShow the help popup. Usually you want to show this in …\nMargin on all sides of views.\nShows a warning label with a large border.\nText colored to indicate a warning.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\nFull-text, case-insensitive matcher.\nState and UI for the filter widget.\nAccumulates highlight ranges for the various parts of a …\nActivate the filter.\nAdd ranges to a given part index.\nReturn a filter matcher for the current query.\nGiven a list of highlight sections defined by start/end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the filter currently active?\nIs the filter currently active?\nMatch a path and return the highlight ranges if any.\nIs the filter set to match everything?\nIs the filter set to match nothing?\nMerge another <code>Self</code>.\nAdd a single range to a given part index.\nReturn the filter if any.\nRemove the ranges for the given part and (if any) return …\nReturn the current session ID of the filter widget, if …\nDisplay the filter widget.\n<code>&gt;</code>\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nShortcut icons\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that mostly delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a content with a custom UI closure.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nControls whether <code>Self</code> calls <code>ListItemContent::ui</code> when the …\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the desired width based on the provided content width. …\nSet the desired width for the entire content.\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nHelper object to handle a <code>ModalWrapper</code> window.\nShow a modal window with Rerun style using <code>egui::Modal</code>.\nResponse returned by <code>ModalWrapper::ui</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model the next time the <code>ModalHandler::ui</code> method …\nWhether the modal should remain open.\nEnclose the contents in a scroll area.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nAn enum representing the available verbosity levels of the …\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nReturns the most verbose logging level.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nFormats an instance number enclosed in square brackets: …\nEasily build syntax-highlighted text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper that contains the results of a latest-at query …\nThe iterator type backing <code>HybridResults::iter_as</code>.\nExtension traits to abstract query result handling for all …\nGap between lines and their outline.\nGap between points and their outline.\nClamp the last value in <code>values</code> in order to reach a length …\nIterate as indexed deserialized batches.\nUtility for implementing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>UnitChunkShared</code> for the specified …\nUtility for retrieving a single instance of a component.\nUtility for retrieving a single instance of a component.\nUtility for retrieving the first instance of a component.\nUtility for retrieving the first instance of a component.\nReturns component data for the given component or an empty …\nReturns component data for the given component, ignores …\nUtility for retrieving a single instance of a component, …\nUtility for retrieving the first instance of a component, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a zero-copy iterator over all the results for the …\nQueries for the given <code>component_names</code> using latest-at …\nProduce an <code>re_renderer::OutlineConfig</code> based on the …\nResolves all annotations and keypoints for the given …\nResolves all annotations for the given entity view.\nProcess <code>Color</code> components using annotations and default …\nQueries for the given <code>component_names</code> using range …\nIterate as indexed, sliced, deserialized component batches.\nIterate as indexed, sliced, deserialized component batches …\nSpawns a view for each single entity which is visualizable …\nDraw view property ui for a single component of a view …\nDraw view property ui for a single component of a view …\nDisplay the UI for editing all components of a blueprint …\nModifier to press for scroll to change aspect ratio.\nWhich mouse button to drag for panning a 2D view.\nWhich mouse button to drag for panning a 2D view.\nModifier to press for scroll to pan horizontally.\nClicking this button moves the timeline to where the …\nWhich mouse button rolls the camera.\nWhich mouse button rolls the camera if the roll modifier …\nSee <code>ROLL_MOUSE_ALT</code>.\nWhich mouse button to drag for rotating a 3D view.\nRectangles drawn with this mouse button zoom in 2D views.\nWhich modifier speeds up the 3D camera movement.\nKey to restore the camera.\nModifier to press for scroll to zoom.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll features disabled.\n<code>Self::DEFAULT</code>, but with changelog disabled.\n<code>Self::DEFAULT</code>, but with compaction entirely disabled.\nDense arrow-based storage of N rows of multi-component …\nReports which <code>Chunk</code>s were merged into a new <code>Chunk</code> during a …\nA unique ID for a <code>Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nA complete chunk store: covers all timelines, all …\nStats about a collection of chunks.\nDescribes an atomic change in the Rerun <code>ChunkStore</code>: a …\nIs it an addition or a deletion?\nThe atomic unit of change in the Rerun <code>ChunkStore</code>.\nIncremented on each edit.\nA ref-counted, inner-mutable handle to a <code>ChunkStore</code>.\nA <code>ChunkStoreSubscriber</code> subscribes to atomic changes from …\nDescribes a column selection to return as part of a query.\nDescribes a data/component column, such as <code>Position3D</code>, in …\nSelect a component based on its <code>EntityPath</code> and …\nDefault configuration, applicable to most use cases, …\nTry to drop <em>at least</em> the given fraction.\nContains no time at all.\nEnvironment variable to configure <code>Self::chunk_max_bytes</code>.\nEnvironment variable to configure <code>Self::chunk_max_rows</code>.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::enable_changelog</code>.\nContains all time.\nContains the error value\nGC Everything that isn’t protected.\nFill null values using global-scope latest-at semantics.\nA query at a given time, for a given timeline.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nNo sparse filling. Nulls stay nulls.\nContains the success value\nError when parsing configuration from environment.\nA <code>ChunkStoreSubscriber</code> that is instantiated for each …\nDescribes a complete query for Rerun’s dataframe API.\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nSpecifies how null values should be filled in the returned …\nNormal wall time.\nDescribes a time column, such as <code>log_time</code>.\nSelect a time column.\nA 64-bit number describing either nanoseconds, sequence …\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nThe view contents specify which subset of the database …\nThe amount of time or sequences covered by this range.\nUnconditionally inserts an <code>ArrowListArray</code> as a component …\nUnconditionally inserts a <code>TimeColumn</code>.\nRetrieve all <code>ComponentName</code>s in the store.\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all <code>ComponentName</code>s in the store.\nRetrieve all <code>EntityPath</code>s in the store.\nRetrieve all <code>EntityPath</code>s in the store.\nRetrieve all <code>Timeline</code>s in the store.\nRetrieve all <code>Timeline</code>s in the store.\nReturns a copy of <code>self</code>, overriding existing fields with …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nReturns <code>true</code> is two <code>Chunk</code>s are similar, although not …\nWorkaround for downcasting support, simply return <code>self</code>:\nWorkaround for downcasting support, simply return <code>self</code>:\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>ChunkBuilder</code>.\nReturns the cell corresponding to the specified <code>RowId</code> for …\nGet a chunk based on its ID.\nThe chunk that was added or removed.\nWhat is the threshold, in bytes, after which a <code>Chunk</code> …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nClones the chunk and assign new IDs to the resulting chunk …\nReports which <code>Chunk</code>s were merged into a new <code>Chunk</code> during a …\nReturns the deserialized data for the specified component.\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the raw data for the specified component.\nReturns the component data of the specified instance.\nReturns the deserialized data for the specified component …\nReturns the raw data for the specified component at the …\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component, …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns the raw data for the specified component, assuming …\nSemantic name associated with this data.\nSemantic name associated with this data.\nReturns an iterator over the <code>RowId</code>s of a <code>Chunk</code>, for a …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nRemoves all component columns from the <code>Chunk</code>.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nReturns true if two chunks are concatenable.\nConcatenates two <code>Chunk</code>s into a new one.\nSee <code>ChunkStoreConfig</code> for more information about …\nDoes this range fully contain the other?\nReturns the appropriate arrow datatype to represent this …\nReturns the appropriate arrow datatype to represent this …\nThe Arrow datatype of the column.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nRemoves duplicate rows from sections of consecutive …\n<code>-1</code> for deletions, <code>+1</code> for additions.\nDensifies the <code>Chunk</code> vertically based on the <code>component_name</code> …\nWhat actually changed?\nUnconditionally drops all the data for a given <code>entity_path</code>.\nNotifies all <code>PerStoreChunkSubscriber</code>s that a store was …\nDrop all events that are in the given range on the given …\nEmpties the <code>Chunk</code> vertically.\nIf <code>true</code> (the default), the store will emit events when its …\nCheck whether an entity has a static component or a …\nCheck whether an entity has a static component or a …\nCheck whether an entity has any static data or any …\nCheck whether an entity has any data on a specific …\nCheck whether an entity has a specific static component.\nCheck whether an entity has any static data.\nCheck whether an entity has a temporal component on any …\nCheck whether an entity has a temporal component on a …\nCheck whether an entity has any temporal data.\nCheck whether an entity has any temporal data.\nFind the earliest time at which something was logged for a …\nThe path of the entity.\nThe path of the entity.\nStats about all the chunks that has data for an entity on …\nStats about all chunks with static data for an entity.\nReturns the min and max times at which data was logged for …\nMonotonically increasing ID of the event.\nApplies a filter kernel to the <code>Chunk</code> as a whole.\nThe index used to filter out <em>rows</em> from the view contents.\nThe range of index values used to filter out <em>rows</em> from the …\nThe specific index values used to filter out <em>rows</em> from the …\nThe component column used to filter out <em>rows</em> from the view …\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Chunk</code>.\nCreates a new <code>ChunkStoreConfig</code> using the default values, …\nInstantiate a new <code>ChunkStore</code> with the given …\nFor time timelines.\nFor time timelines.\nCreates a new <code>Chunk</code>.\nInstantiate a new <code>ChunkStore</code> with the given …\nFor time timelines.\nFor sequence timelines.\nTriggers a garbage collection according to the desired …\nReturn the current <code>ChunkStoreGeneration</code>. This can be used …\nReturns any list-array that matches the given <code>ComponentName</code>…\nInstantiate a new <code>ChunkStore</code> with the given …\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nSee <code>RangeQueryOptions::include_extended_bounds</code> for more …\nIf true, the results will include one extra tick on each …\nWhether the <code>view_contents</code> should ignore columns …\nWhether the <code>view_contents</code> should ignore semantically empty …\nWhether the <code>view_contents</code> should ignore columns …\nReturns the <code>n</code>-next logical <code>ChunkId</code>.\nReturns the <code>n</code>-next logical <code>RowId</code>.\nReturns the index (<code>(TimeInt, RowId)</code> pair) of the single …\nInserts a <code>Chunk</code> in the store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClones the chunk into a new chunk without any time data.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nIf true, we cannot remove this chunk.\nWhether this column represents an indicator component.\nWhether this column represents an indicator component.\nWhether this column contains either no data or only …\nWhether this column contains either no data or only …\nIs the chunk currently ascendingly sorted by <code>crate::RowId</code>?\nWhether this column represents static data.\nWhether this column represents static data.\nIs the chunk ascendingly sorted by time, for all of its …\nIs the chunk ascendingly sorted by time, for a specific …\nWhether this column represents a <code>Clear</code>-related components.\nWhether this column represents a <code>Clear</code>-related component.\nIterate over all chunks in the store, in ascending <code>ChunkId</code> …\nReturns an iterator over the deserialized batches of a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the offsets (<code>(offset, len)</code>) of a …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>, for a …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the indices (<code>(TimeInt, RowId)</code>) of …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the all the sliced component …\nReturns an iterator over the <code>TimePoint</code>s of a <code>Chunk</code>.\nSee <code>RangeQueryOptions::keep_extra_components</code> for more …\nShould the results contain all extra component information …\nSee <code>RangeQueryOptions::keep_extra_timelines</code> for more …\nShould the results contain all extra timeline information …\nAddition or deletion?\nRuns a <code>LatestAtQuery</code> filter on a <code>Chunk</code>.\nReturns the most-relevant chunk(s) for the given …\nReturns the most-relevant <em>temporal</em> chunk(s) for the given …\nThe log tick timeline to which all API functions will …\nThe log time timeline to which all API functions will …\nLookup the <code>ColumnMetadata</code> for a specific <code>EntityPath</code> and …\nLookup the <em>latest</em> arrow <code>ArrowDataType</code> used by a specific …\nReturns an array with the appropriate datatype.\nArbitrary name for the subscriber.\nArbitrary name for the subscriber.\nWhen the <code>ChunkId</code> was created, in nanoseconds since unix …\nWhen the <code>RowId</code> was created, in nanoseconds since unix …\nSelect a component of a given type, based on its  …\nCreates a new <code>Chunk</code>.\nInstantiate a new empty <code>ChunkStore</code> with the given …\nThe returned query is guaranteed to never include …\nThe returned query is guaranteed to never include …\nCreate a new unique <code>ChunkId</code> based on the current time.\nCreate a new unique <code>RowId</code> based on the current time.\nCreates a new temporal <code>ResolvedTimeRange</code>.\nThe new chunk that was created as the result of the …\nSelect a component based on its <code>EntityPath</code> and …\nInstantiate a new empty <code>ChunkStore</code> with the given …\nUsed when returning a null column, i.e. when a lookup …\nFor things like camera frames or iteration count.\nSimple helper for <code>Self::new</code> for static data.\nCreates a new temporal <code>TimeInt</code>.\nFor absolute or relative time.\nReturns the next logical <code>ChunkId</code>.\nReturns the next logical <code>RowId</code>.\nGet the number of chunks.\nThe number of chunks this is the stats for.\nHow many columns in total? Includes control, time, and …\nHow many <em>component batches</em> (“cells”).\nThe cumulative number of events in this chunk.\nThe cumulative number of events in this chunk for each …\nThe number of events in this chunk for the specified …\nReturns the number of instances of the single row within …\nNumber of rows.\nReturns the number of static events logged for an entity …\nReturns the number of temporal events logged for an entity …\nReturns the number of temporal events logged for an entity …\nNotifies a subscriber that an entire store was dropped.\nThe core of this trait: get notified of changes happening …\nGet notified of changes happening in a <code>ChunkStore</code>, see …\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on their <code>RowId</code> range.\nReturns <code>true</code> if <code>self</code> and <code>rhs</code> overlap on any of their time …\nA temporary migration kernel for blueprint data.\nThe returned range is guaranteed to never include …\nHow many component revisions to preserve on each timeline.\nDo not remove any data within these time ranges.\nRuns a <code>RangeQuery</code> filter on a <code>Chunk</code>.\nReturns the most-relevant chunk(s) for the given <code>RangeQuery</code>…\nReturns the most-relevant <em>temporal</em> chunk(s) for the given …\nRegisters a <code>PerStoreChunkSubscriber</code> type so it gets …\nRegisters a <code>ChunkStoreSubscriber</code> so it gets automatically …\nGiven a <code>ComponentColumnSelector</code>, returns the corresponding …\nGiven a set of <code>ColumnSelector</code>s, returns the corresponding …\nGiven a <code>TimeColumnSelector</code>, returns the corresponding …\nReturns the <code>RowId</code> of the single row within, on the given …\nReturns the <code>RowId</code>-range covered by this <code>Chunk</code>.\nComputes the <code>RowId</code> range covered by each individual …\nAll the <code>RowId</code> in this chunk.\nReturns the <code>RowId</code>s in their raw-est form: a tuple of …\nSlices the <code>Chunk</code> vertically.\nReturns <code>true</code> if both chunks share the same datatypes for …\nReturns <code>true</code> if both chunks share the same descriptors for …\nReturns <code>true</code> if both chunks share the same entity path.\nReturns <code>true</code> if both chunks contains the same set of …\nReturns an error if the Chunk’s invariants are not …\nReturns the full schema of the store.\nReturns the filtered schema for the given <code>QueryExpression</code>.\nThe specific <em>columns</em> to sample from the final view …\nOverwrites the end bound of the range.\nOverwrites the start bound of the range.\nRandomly shuffles the chunk using the given <code>seed</code>.\nSort the chunk, if needed.\nReturns a new <code>Chunk</code> that is sorted by <code>(&lt;timeline&gt;, RowId)</code>.\nSpecifies how null values should be filled in the returned …\nMoves all indicator components from <code>self</code> into a new, …\nThe chunks that were merged into a new chunk.\nThe Arrow datatype of the stored column.\nWhat was the store’s generation when it sent that event?\nWhich <code>ChunkStore</code> sent this event?\nApplies a take kernel to the <code>Chunk</code> as a whole.\nWhat target threshold should the GC try to meet.\nHow long the garbage collection in allowed to run for.\nReturns the min and max times at which data was logged on …\nComputes the time range covered by each individual …\nThe timeline this column is associated with.\nThe name of the timeline.\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nSlices the <code>Chunk</code> horizontally by keeping only the selected …\nComputes the maximum value for each and every timeline …\nPrepare the <code>Chunk</code> for transport.\nPrepare the <code>Chunk</code> for transport.\nTurns the chunk into a <code>UnitChunkShared</code>, if possible.\nIncludes everything: arrow payloads, timelines, rowids, …\nThe specific index values used to sample <em>rows</em> from the …\nThe subset of the database that the query will run on: a …\nThe returned query is guaranteed to never include …\nReturns a version of us with a new <code>ChunkId</code>.\nPasses a reference to the downcasted per-store subscriber …\nPasses a mutable reference to the downcasted per-store …\nPasses a reference to the downcasted per-store subscriber …\nPasses a reference to the downcasted subscriber to the …\nPasses a mutable reference to the downcasted subscriber to …\nPasses a reference to the downcasted subscriber to the …\nClones the chunk into a new chunk where all <code>RowId</code>s are …\nAlways flushes ASAP.\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nAn array in the arrow columnar format\nThe key used to identify a Rerun <code>EntityPath</code> in chunk-level …\nThe key used to identify the size in bytes of the data, …\nThe key used to identify a Rerun <code>ChunkId</code> in chunk-level …\nThe marker used to identify whether a chunk is sorted in …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nHelper to incrementally build a <code>Chunk</code>.\nThe actual iterator implementation for …\nThe underlying item type for <code>ChunkComponentIter</code>.\nA <code>ChunkComponentSlicer</code> knows how to efficiently slice …\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nThe fully-qualified name of a <code>Component</code>, e.g. …\nDefault configuration, applicable to most use cases.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::flush_num_bytes</code>.\nEnvironment variable to configure <code>Self::flush_num_rows</code>.\nEnvironment variable to configure <code>Self::flush_tick</code>.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nContains the error value\nContains the error value\nThe key used to identify the <code>crate::ArchetypeFieldName</code> in …\nThe key used to identify the <code>crate::ArchetypeName</code> in …\nThe key used to identify the kind of a Rerun column in …\nThe marker used to identify whether a column is sorted in …\nThe value used to identify a Rerun control column in …\nThe value used to identify a Rerun data column in …\nThe value used to identify a Rerun time column in …\nA query at a given time, for a given timeline.\nNever flushes unless manually told to (or hitting one the …\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nError spawning one of the background threads.\nHelper to incrementally build a <code>TimeColumn</code>.\nErrors when deserializing/parsing/reading a column of time …\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nReturns a copy of <code>self</code>, overriding existing fields with …\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nBuilds and returns the final <code>Chunk</code>.\nBuilds and returns the final <code>TimeColumn</code>.\nBuilds and returns the final <code>Chunk</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nSplit a chunk if it contains &gt;= rows than this threshold …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns the appropriate chunk-level <code>ArrowSchema</code> metadata …\nReturns a <em>shared</em> channel in which are sent the batched …\nReturns the first common ancestor of two paths.\nReturns the first common ancestor of a list of entity …\nIterates all data columns present in this chunk.\nThe component data.\nConcatenates two <code>TimeColumn</code>s into a new one.\nIterates all control columns present in this chunk.\nReturns a reference to the <code>DataType</code> of this array.\nWeb URL to the Rerun documentation for this component.\nEmpties the <code>TimeColumn</code> vertically.\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nReturns the appropriate field-level <code>ArrowSchema</code> metadata …\nInitiates a flush of the pipeline and returns immediately.\nInitiates a flush the batching pipeline and waits for it …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>ChunkBatcherConfig</code> using the default values, …\nTreat the file path as an entity path hierarchy.\nTreat the file path as one opaque string.\nTreat the string as one opaque string, NOT splitting on …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns all list arrays for the given component name.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed 64-bit hash.\nThe size in bytes of the data, once loaded in memory, in …\nCallbacks you can install on the <code>ChunkBatcher</code>.\nIf true, the results will include one extra tick on each …\nHelper function to iterate over all incremental <code>EntityPath</code>…\nIf this is an indicator component, for which archetype?\nLike <code>Self::insert</code>, but automatically infers the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a single row into a <code>Chunk</code> of its own.\nReturns the underlying data of this array\nIs this a direct child of the other path.\nIs this a strict descendant of the given path.\nReturns whether this array is empty.\nIs this an indicator component for an archetype?\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nIs the timeline sorted?\nLooks in the chunk metadata for the <code>IS_SORTED</code> marker.\nLike <code>Self::is_sorted</code>, but actually checks the entire …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nShould the results contain all extra component information …\nShould the results contain all extra timeline information …\nReturns the length (i.e., number of elements) of this …\nNumber of parts\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nThis turns a batch of <code>PendingRow</code>s into a <code>Chunk</code>.\nDetermine if component matches a string\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nInitializes a new <code>ChunkBuilder</code>.\nInitializes a new <code>TimeColumnBuilder</code>.\nCreates a new <code>TimeColumn</code>.\nCreates a new <code>ChunkBatcher</code> using the passed in <code>config</code>.\nCreates a new <code>TimeColumn</code> of nanoseconds type.\nCreates a new <code>TimeColumn</code> of sequence type.\nCreates a new <code>TimeColumn</code> of sequence type.\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nReturn <code>None</code> if root.\nParses an entity path, handling any malformed input with a …\nParse an entity path from a string, with strict checks for …\nPushes a <code>PendingRow</code> down the batching pipeline.\nParse the given <code>ArrowArray</code> as a time column.\nParse the given <code>ArrowArray</code> as a time column where null …\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nSlices the <code>TimeColumn</code> vertically.\nReturns an error if the Chunk’s invariants are not …\nReturns the unqualified name, e.g. <code>Points3D</code>.\nReturns the unqualified name, e.g. <code>Position2D</code>.\nReturns short names for a collection of entities based on …\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nIs this equals to, or a descendant of, the given path.\nComputes the time range covered by each individual …\nIterates all timeline columns present in this chunk.\nUser-specified <code>TimePoint</code> for this event.\nReturns an array with the appropriate datatype.\nReturns the underlying data of this array\nComputes the union of two <code>TimePoint</code>s, keeping the maximum …\nAdd a row’s worth of data by destructuring an archetype …\nAdd a row’s worth of data by serializing a single …\nAdd a row’s worth of data by serializing many …\nAdd a row’s worth of data using the given component data.\nAdd a row’s worth of time data using the given timestamp.\nAdd a row’s worth of data by serializing a single …\nAdd a row’s worth of data by serializing many …\nAdd a row’s worth of data by serializing many sparse …\nAdd a row’s worth of data using the given sparse …\nAdd a row’s worth of data by serializing many sparse …\nAtomic types.\nCreates a new scope for spawning threads.\nSelects from a set of channel operations.\nThread synchronization primitives.\nThreads that can borrow variables from the stack.\nMiscellaneous utilities.\nA thread-safe mutable memory location.\nTrait which allows reading from primitive atomic types …\nType returned by <code>load_consume</code>.\nReturns a raw pointer to the underlying data in this …\nIf the current value equals <code>current</code>, stores <code>new</code> into the …\nIf the current value equals <code>current</code>, stores <code>new</code> into the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nIncrements the current value by <code>val</code> and returns the …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nApplies logical “and” to the current value and returns …\nApplies bitwise “and” to the current value and returns …\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nApplies logical “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies logical “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nFetches the value, and applies a function to it that …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies logical “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nReturns <code>true</code> if operations on values of this type are …\nLoads a value from the atomic cell.\nLoads a value from the atomic using a “consume” memory …\nCreates a new atomic cell initialized with <code>val</code>.\nStores <code>val</code> into the atomic cell.\nStores <code>val</code> into the atomic cell and returns the previous …\nTakes the value of the atomic cell, leaving …\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of the selected operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nUnwraps the message.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation timed out.\nReturns <code>true</code> if the receive operation timed out.\nA blocking iterator over messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nCreates a receiver that never delivers messages.\nCreates an empty list of channel operations for selection.\nBlocks until one of the operations becomes ready.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is received or …\nAdds a receive operation.\nCompletes the receive operation.\nWaits for a message to be received from the channel, but …\nWaits for a message to be received from the channel, but …\nRemoves a previously added operation.\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nBlocks until one of the operations becomes ready and …\nSelects from a set of channel operations.\nSelects from a set of channel operations.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is sent or the …\nAdds a send operation.\nCompletes the send operation.\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a receiver that delivers messages periodically.\nA non-blocking iterator over messages in the channel.\nAttempts to find a ready operation without blocking.\nAttempts to receive a message from the channel without …\nAttempts to select one of the operations without blocking.\nAttempts to send a message into the channel without …\nCreates a channel of unbounded capacity.\nThe queue was empty at the time of stealing.\nAn injector queue.\nThe steal operation needs to be retried.\nPossible outcomes of a steal operation.\nA stealer handle of a worker queue.\nAt least one task was successfully stolen.\nA worker queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes items until a <code>Success</code> is found and returns it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue was empty at the time of …\nReturns <code>true</code> if the steal operation needs to be retried.\nReturns <code>true</code> if at least one task was stolen.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the queue.\nCreates a new injector queue.\nCreates a FIFO worker queue.\nCreates a LIFO worker queue.\nIf no task was stolen, attempts another steal operation.\nPops a task from the queue.\nPushes a task into the queue.\nPushes a task into the queue.\nSteals a task from the queue.\nSteals a task from the queue.\nSteals a batch of tasks and pushes them into another …\nSteals a batch of tasks and pushes them into a worker.\nSteals a batch of tasks, pushes them into another worker, …\nSteals a batch of tasks, pushes them into a worker, and …\nSteals no more than <code>limit</code> of tasks and pushes them into …\nSteals no more than of tasks and pushes them into a worker.\nSteals no more than <code>limit</code> of tasks, pushes them into …\nSteals no more than <code>limit</code> of tasks, pushes them into a …\nCreates a stealer for this queue.\nReturns the result of the operation, if successful.\nThe alignment of pointer.\nAn atomic pointer that can be safely shared between …\nAn epoch-based garbage collector.\nThe error returned on failed compare-and-set operation.\nMemory orderings for compare-and-set operations.\nThe error returned on failed compare-and-swap operation.\nA guard that keeps the current thread pinned.\nThe type for initializers.\nA handle to a garbage collector.\nAn owned heap-allocated object.\nTypes that are pointed to by a single word.\nA trait for either <code>Owned</code> or <code>Shared</code> pointers.\nA pointer to an object protected by the epoch GC.\nConverts the pointer to a raw pointer (without the tag).\nConverts the pointer to a reference.\nReturns a copy of the atomic value.\nCreates another reference to the same garbage collector.\nReturns the <code>Collector</code> associated with this handle.\nReturns the <code>Collector</code> associated with this guard.\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nThe value in the atomic pointer at the time of the failed …\nThe value in the atomic pointer at the time of the failed …\nReturns the default global collector.\nStores a function so that it can be executed at some point …\nStores a destructor for an object so that it can be …\nStores a function so that it can be executed at some point …\nDereferences the given pointer.\nDereferences the pointer.\nMutably dereferences the given pointer.\nDereferences the pointer.\nDrops the object pointed to by the given pointer.\nChecks if both handles point to the same collector.\nThe ordering of the operation when it fails.\nBitwise “and” with the current tag.\nBitwise “or” with the current tag.\nFetches the pointer, and then applies a function to it …\nBitwise “xor” with the current tag.\nClears up the thread-local cache of deferred functions by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new atomic pointer pointing to <code>raw</code>.\nReturns a new atomic pointer pointing to <code>owned</code>.\nReturns a new atomic pointer pointing to <code>ptr</code>.\nReturns a new owned pointer pointing to <code>b</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new pointer pointing to <code>raw</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new owned pointer pointing to <code>raw</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nInitializes a with the given initializer.\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the owned pointer into a <code>Box</code>.\nTakes ownership of the pointee.\nTakes ownership of the pointee.\nConverts the owned pointer into a <code>Shared</code>.\nReturns the machine representation of the pointer.\nReturns <code>true</code> if the pointer is null.\nReturns <code>true</code> if the current thread is pinned.\nReturns <code>true</code> if the handle is pinned.\nLoads a <code>Shared</code> from the atomic pointer.\nLoads a <code>Shared</code> from the atomic pointer using a “consume…\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCreates a new collector.\nThe new value, which the operation failed to store.\nThe new value, which the operation failed to store.\nReturns a new null atomic pointer.\nReturns a new null pointer.\nPins the current thread.\nPins the handle.\nRegisters a new handle for the collector.\nUnpins and then immediately re-pins the thread.\nTemporarily unpins the thread, executes the given function …\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.\nThe ordering of the operation when it succeeds.\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …\nReturns the tag stored within the pointer.\nReturns the tag stored within the pointer.\nTakes ownership of the pointee if it is non-null.\nTakes ownership of the pointee if it is not null.\nReturns a reference to a dummy guard that allows …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nA bounded multi-producer multi-consumer queue.\nAn unbounded multi-producer multi-consumer queue.\nReturns the capacity of the queue.\nPushes an element into the queue, replacing the oldest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is full.\nReturns the number of elements in the queue.\nReturns the number of elements in the queue.\nCreates a new bounded queue with the given capacity.\nCreates a new unbounded queue.\nAttempts to pop an element from the queue.\nPops an element from the queue.\nAttempts to push an element into the queue.\nPushes an element into the queue.\nA thread parking primitive.\nA sharded reader-writer lock.\nA guard used to release the shared read access of a …\nA guard used to release the exclusive write access of a …\nUnparks a thread parked by the associated <code>Parker</code>.\nEnables threads to synchronize the beginning or end of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a raw pointer into a <code>Parker</code>.\nConverts a raw pointer into an <code>Unparker</code>.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this lock, returning the underlying data.\nConverts a <code>Parker</code> into a raw pointer.\nConverts an <code>Unparker</code> into a raw pointer.\nReturns <code>true</code> if the lock is poisoned.\nCreates a new <code>Parker</code>.\nCreates a new sharded reader-writer lock.\nCreates a new wait group and returns the single reference …\nBlocks the current thread until the token is made …\nBlocks the current thread until the token is made …\nBlocks the current thread until the token is made …\nLocks with shared read access, blocking the current thread …\nAttempts to acquire this lock with shared read access.\nAttempts to acquire this lock with exclusive write access.\nAtomically makes the token available if it is not already.\nReturns a reference to an associated <code>Unparker</code>.\nDrops this reference and waits until all other references …\nLocks with exclusive write access, blocking the current …\nA scope for spawning threads.\nA handle that can be used to join its scoped thread.\nConfigures the properties of a new thread.\nCreates a builder that can configure a thread before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaits for the thread to finish and returns its result.\nSets the name for the new thread.\nCreates a new scope for spawning threads.\nSpawns a scoped thread.\nSpawns a scoped thread with this configuration.\nSets the size of the stack for the new thread.\nReturns a handle to the underlying thread.\nPerforms exponential backoff in spin loops.\nPads and aligns a value to the length of a cache line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value.\nReturns <code>true</code> if exponential backoff has completed and …\nCreates a new <code>Backoff</code>.\nPads and aligns a value to the length of a cache line.\nResets the <code>Backoff</code>.\nBacks off in a blocking loop.\nBacks off in a lock-free loop.\nAn alias for <code>BuildHasherDefault</code> for use with <code>NoHashHasher</code>.\nA <code>HashMap</code> with an integer domain, using <code>NoHashHasher</code> to …\nA <code>HashSet</code> of integers, using <code>NoHashHasher</code> to perform no …\nTypes which are safe to use with <code>NoHashHasher</code>.\nFor an enabled type <code>T</code>, a <code>NoHashHasher&lt;T&gt;</code> implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApproximations of stack and heap size for both internal …\nReturns how many bytes <code>self</code> uses on the heap.\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nRefer to all instances in a batch.\nThe user-chosen name of the application doing the logging.\nMessage containing an Arrow payload\nLog an entity using an <code>ArrowMsg</code>.\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nA signed duration represented as nanoseconds since unix …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nSometimes used as the hash of <code>None</code>.\nAn integer that is known not to equal its minimum value.\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nUsed e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nThe user clicked on a recording URI in the viewer.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe union of all rules\nInclude this entity with subtree.\nInclude this path or variable expression, but not the …\nInclude this entity, but not the subtree.\nAdds a rule to this filter.\nAdds a rule to this filter.\nInclude this entity or variable expression with subtree.\nCreates a filter that accepts everything.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nSchema and data for all control &amp; data columns.\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\nMost specific last, which means recursive first.\n“color”\nInclusive\nIs there any rule for this entity path?\nRuntime asserts that an archetype has the given components.\nNo variable substitutions.\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nUse this when it is part of a full entity path.\nMatch this path or variable expression, but not children.\nMatch this path, but not children.\nMatch this path, but not children.\nExample components to be used for tests and docs\nHuman-readable formatting\nUseful when showing dates/times on a timeline and you want …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSaturating cast\nReturns the argument unchanged.\nSaturating cast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Instance</code> that identifies a 2D coordinate.\nBuild a filter from a list of query expressions.\nFor instance:\nFrom an existing u64. Use this only for data conversions.\nReturns the value as a primitive type.\nWhether this rule includes a subtree.\nMatch this path and any entity in its subtree.\nMatch this path or variable expression and any entity in …\nMatch this path and any entity in its subtree.\nInserts multiple elements at <code>index</code> within the deque, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere in the range is this value? Returns 0-1 if within …\nIf true, this time is likely relative to unix epoch.\nAre we referring to all instances of the entity (e.g. all …\nIs anything under this path included (including self)?\nWhether this <code>StoreInfo</code> is the default used when a user is …\nIs this entity path explicitly excluded?\nIs this entity path explicitly included?\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\nAre we referring to a specific instance of the entity …\nChecks whether this results of this filter “fully contain…\nIterates the expressions in alphabetical order.\nIterate over the raw expressions of the rules, displaying …\nThe amount of time or sequences covered by this range.\ne.g. 3\nImmediately make <code>blueprint_id</code> the active blueprint for its …\nImmediately make this the active blueprint for the …\nMake <code>blueprint_id</code> the default blueprint for its associated …\nMake this the default blueprint for the <code>app_id</code>.\nDoes this filter include the given entity path?\nWhether this rule matches the given path.\nIs there a rule for this exact entity path (ignoring …\ne.g. 11\nFind the most specific matching rule and return its effect.\nCreate a new <code>EntityPathRule</code> from a string.\nThe given string is expected to be unescaped, i.e. any <code>\\</code> …\nCreates a new non-min if the given value is not the …\nCreates a new non-min without checking the value.\nCreate a new set of substitutions from a single origin.\nParse an entity path filter from a string, ignoring any …\nUnescape the string, forgiving any syntax error with a …\nUnescape the string, forgiving any syntax error with a …\nParse an entity path filter from a string.\nUnescape the string, returning errors on wrongly escaped …\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nRemoves and returns the elements in the given <code>range</code> from …\nRemove any rule for the given entity path (ignoring …\nRemove a subtree and any existing rules that it would …\nResolve variables &amp; parse paths, ignoring any errors.\nResolve variables &amp; parse paths, returning an error if any …\nResolve variables &amp; parse paths, without any substitutions.\nThe resolved path, with all variables Resolved.\nA time-based UID that is only used to help keep track of …\nThe original rule, with unresolved variables.\nIterate over all rules in the filter.\nIterate over all rules in the filter.\nCreates a new entity path filter that includes only a …\nCreates a new entity path filter that includes only a …\nSorts <code>self</code>.\nReturns <code>None</code> if <code>ALL</code>, otherwise the index.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\nUSE ONLY FOR TESTS\nCreates a new entity path filter that includes a single …\nCreates a new entity path filter that includes a single …\ne.g. <code>a0</code> for alpha releases.\nThe union of all rules\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nRetrieves 2D image coordinates (x, y) encoded in an …\nReturns the absolute datetime if applicable.\nThe style of string to use in a UI\nThe unescaped string.\nThe default <code>ApplicationId</code> if the user hasn’t set one.\nTurns the resolved filter back into an unresolved filter.\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nMessage containing an Arrow payload\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nSchema and data for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nThe maximum values for all timelines across the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n64-bit hash.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nCalls <code>U::from(self)</code>.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nStats for a single <code>crate::RangeCache</code>.\nStats for all primary caches.\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nContains the error value\nResults for a latest-at query.\nContains the success value\nA ref-counted, inner-mutable handle to a <code>QueryCache</code>.\nUniquely identifies cached query results in the <code>QueryCache</code>.\nResults for a range query.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nKeeps track of handles towards a <code>ChunkStore</code> and its …\nAnything that can expose references to a <code>ChunkStore</code> and …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nReturns the deserialized data for the specified component.\nReturns the deserialized data for the specified component.\nReturns the raw data for the specified component.\nReturns the deserialized data for the specified component.\nReturns the deserialized data for the specified component …\nReturns the deserialized data for the specified component …\nReturns the raw data for the specified component at the …\nReturns the raw data for the specified component at the …\nReturns the raw data for the specified component at the …\nReturns the deserialized data for the specified component …\nReturns the deserialized data for the specified component, …\nReturns the deserialized data for the specified component, …\nReturns the raw data for the specified component, assuming …\nReturns the raw data for the specified component, assuming …\nReturns the raw data for the specified component, assuming …\nReturns the deserialized data for the specified component, …\nReturns the <code>RowId</code> for the specified component.\nResults for each individual component.\nResults for each individual component.\nThe compound index of this query result.\nThe associated <code>EntityPath</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>UnitChunkShared</code> for the specified <code>Component</code>.\nReturns the <code>Chunk</code>s for the specified <code>component_name</code>.\nReturns the <code>UnitChunkShared</code> for the specified <code>Component</code>.\nReturns the <code>Chunk</code>s for the specified <code>component_name</code>.\nReturns the compound index (<code>(TimeInt, RowId)</code> pair) of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueries for the given <code>component_names</code> using latest-at …\nCreates a new <code>StorageEngine</code> with the specified <code>ChunkStore</code> …\nFree up some RAM by forgetting the older parts of all …\nThe query that yielded these results.\nThe query that yielded these results.\nQueries for the given <code>component_names</code> using range …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nComputes the stats for all primary caches.\nWhat is the actual size of this cache after deduplication?\nHow many chunks in the cache?\nWhat would be the size of this cache in the worst case, …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nImplements a clamped zip iterator combinator with 2 …\nReturns a new <code>ClampedZip1x1</code> iterator.\nReturns a new <code>ClampedZip1x2</code> iterator.\nReturns a new <code>ClampedZip1x3</code> iterator.\nReturns a new <code>ClampedZip1x4</code> iterator.\nReturns a new <code>ClampedZip1x5</code> iterator.\nReturns a new <code>ClampedZip1x6</code> iterator.\nReturns a new <code>ClampedZip1x7</code> iterator.\nReturns a new <code>ClampedZip1x8</code> iterator.\nReturns a new <code>ClampedZip1x9</code> iterator.\nReturns a new <code>ClampedZip2x1</code> iterator.\nReturns a new <code>ClampedZip2x2</code> iterator.\nReturns a new <code>ClampedZip2x3</code> iterator.\nReturns a new <code>ClampedZip2x4</code> iterator.\nReturns a new <code>ClampedZip2x5</code> iterator.\nReturns a new <code>ClampedZip2x6</code> iterator.\nReturns a new <code>ClampedZip2x7</code> iterator.\nReturns a new <code>ClampedZip2x8</code> iterator.\nReturns a new <code>ClampedZip2x9</code> iterator.\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nImplements a range zip iterator combinator with 2 required …\nReturns a new <code>RangeZip1x1</code> iterator.\nReturns a new <code>RangeZip1x2</code> iterator.\nReturns a new <code>RangeZip1x3</code> iterator.\nReturns a new <code>RangeZip1x4</code> iterator.\nReturns a new <code>RangeZip1x5</code> iterator.\nReturns a new <code>RangeZip1x6</code> iterator.\nReturns a new <code>RangeZip1x7</code> iterator.\nReturns a new <code>RangeZip1x8</code> iterator.\nReturns a new <code>RangeZip1x9</code> iterator.\nReturns a new <code>RangeZip2x1</code> iterator.\nReturns a new <code>RangeZip2x2</code> iterator.\nReturns a new <code>RangeZip2x3</code> iterator.\nReturns a new <code>RangeZip2x4</code> iterator.\nReturns a new <code>RangeZip2x5</code> iterator.\nReturns a new <code>RangeZip2x6</code> iterator.\nReturns a new <code>RangeZip2x7</code> iterator.\nReturns a new <code>RangeZip2x8</code> iterator.\nReturns a new <code>RangeZip2x9</code> iterator.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTry to load the given <code>.blueprint</code> file.\nUsed by <code>eframe</code> to decide where to store the app state.\nDetermine the default path for a blueprint based on its …\nConvert to lowercase and replace any character that is not …\nHelper for screenshotting the entire app\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, temporarily re-style the UI to make it suitable …\nIf true, the screenshotter was told at startup to quit …\nUsed for generating screenshots in dev builds.\nCall once per frame\nThe main Rerun drop-down menu found in the top panel.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNote that we purged memory at this time, to show in stats.\nCall once per frame\nDraw the recording list.\nShow the currently open Recordings in a selectable list. …\nShows the e2e latency.\nShows the latency in the input queue.\nLay out the panel button right-to-left\nShows clickable website link as an image (text doesn’t …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWelcome screen shown in place of the viewport when no data …\nStructure to track both an example description and its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo a HEAD request to get the size of a file.\nMove the egui cursor to the bottom of this example card.\n<code>snake_case</code> version of the example name\nWe do an async HEAD request to get the size of the RRD file\nURL of the source code in GitHub\nhuman-readable version of the example name\nDraw the example section of the welcome screen.\nShow a minimal welcome section.\nShow the welcome section.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen we have loaded the start of a new recording.\nWhen the viewer is first started\nReturns true if the current process is running under WSL.")