searchState.loadedDescShard("re_log_types", 0, "The different types that make up the rerun log format.\nThe user-chosen name of the application doing the logging.\nLog an entity using an <code>ArrowMsg</code>.\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA signed duration represented as nanoseconds since unix …\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nEither nanoseconds or sequence numbers.\nSeconds since unix epoch\nThe user clicked on a recording URI in the viewer.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nIf this store is the result of a clone, which store was it …\nRuntime asserts that an archetype has the given components.\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nExample components to be used for tests and docs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts multiple elements at <code>index</code> within the deque, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this <code>StoreInfo</code> is the default used when a user is …\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\ne.g. 3\nImmediately make <code>blueprint_id</code> the active blueprint for its …\nImmediately make this the active blueprint for the …\nMake <code>blueprint_id</code> the default blueprint for its associated …\nMake this the default blueprint for the <code>app_id</code>.\ne.g. 11\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nRemoves and returns the elements in the given <code>range</code> from …\nA time-based UID that is only used to help keep track of …\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\nUSE ONLY FOR TESTS\ne.g. <code>a0</code> for alpha releases.\nRemoves an element from anywhere in the deque and returns …\nThe default <code>ApplicationId</code> if the user hasn’t set one.\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nMessage containing an Arrow payload\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nSchema and data for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum values for all timelines across the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n64-bit hash.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nHash the given value.\nCalls <code>U::from(self)</code>.\nRefer to all instances in a batch.\nA unique numeric index for each individual instance within …\nReturns the argument unchanged.\nCreates a new <code>Instance</code> that identifies a 2D coordinate.\nCalls <code>U::from(self)</code>.\nAre we referring to all instances of the entity (e.g. all …\nAre we referring to a specific instance of the entity …\nReturns <code>None</code> if <code>ALL</code>, otherwise the index.\nRetrieves 2D image coordinates (x, y) encoded in an …\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nprecomputed hash\nImplement natural ordering for strings, so that “file5”…\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA general path to some data.\nReturns the argument unchanged.\nFor instance:\nCalls <code>U::from(self)</code>.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nSometimes used as the hash of <code>None</code>.\nReturns the first common ancestor of two paths.\nReturns the first common ancestor of a list of entity …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTreat the file path as an entity path hierarchy.\nTreat the file path as one opaque string.\nTreat the string as one opaque string, NOT splitting on …\nFrom an existing u64. Use this only for data conversions.\nprecomputed hash\nPrecomputed 64-bit hash.\nHelper function to iterate over all incremental <code>EntityPath</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a direct child of the other path.\nIs this a strict descendant of the given path.\nNumber of parts\nReturn <code>None</code> if root.\nParses an entity path, handling any malformed input with a …\nParse an entity path from a string, with strict checks for …\nReturns short names for a collection of entities based on …\nIs this equals to, or a descendant of, the given path.\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\nThe union of all rules\nInclude this entity with subtree.\nInclude this path or variable expression, but not the …\nInclude this entity, but not the subtree.\nAdds a rule to this filter.\nAdds a rule to this filter.\nInclude this entity or variable expression with subtree.\nCreates a filter that accepts everything.\nMost specific last, which means recursive first.\nIs there any rule for this entity path?\nNo variable substitutions.\nMatch this path or variable expression, but not children.\nMatch this path, but not children.\nMatch this path, but not children.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a filter from a list of query expressions.\nWhether this rule includes a subtree.\nMatch this path and any entity in its subtree.\nMatch this path or variable expression and any entity in …\nMatch this path and any entity in its subtree.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs anything under this path included (including self)?\nIs this entity path explicitly excluded?\nIs this entity path explicitly included?\nChecks whether this results of this filter “fully contain…\nIterates the expressions in alphabetical order.\nIterate over the raw expressions of the rules, displaying …\nDoes this filter include the given entity path?\nWhether this rule matches the given path.\nIs there a rule for this exact entity path (ignoring …\nFind the most specific matching rule and return its effect.\nCreate a new <code>EntityPathRule</code> from a string.\nCreate a new set of substitutions from a single origin.\nParse an entity path filter from a string, ignoring any …\nParse an entity path filter from a string.\nRemove any rule for the given entity path (ignoring …\nRemove a subtree and any existing rules that it would …\nResolve variables &amp; parse paths, ignoring any errors.\nResolve variables &amp; parse paths, returning an error if any …\nResolve variables &amp; parse paths, without any substitutions.\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nIterate over all rules in the filter.\nIterate over all rules in the filter.\nCreates a new entity path filter that includes only a …\nCreates a new entity path filter that includes only a …\nSplit a string into whitespace-separated tokens with extra …\nCreates a new entity path filter that includes a single …\nCreates a new entity path filter that includes a single …\nThe union of all rules\nTurns the resolved filter back into an unresolved filter.\nThe different parts that make up an <code>EntityPath</code>.\nUse this when it is part of a full entity path.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe given string is expected to be unescaped, i.e. any <code>\\</code> …\nUnescape the string, forgiving any syntax error with a …\nUnescape the string, forgiving any syntax error with a …\nUnescape the string, returning errors on wrongly escaped …\nParses e.g. <code>{262E}</code>.\nThe style of string to use in a UI\nThe unescaped string.\nNatural ordering for strings, so that “file5” &lt; “…\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>&quot;/foo/bar[#42]:Color&quot;</code> -&gt; …\n<code>&quot;/foo/bar&quot;</code> -&gt; <code>[&quot;/&quot;, &quot;foo&quot;, &quot;/&quot;, &quot;bar&quot;]</code>\nContains no time at all.\nContains all time.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe amount of time or sequences covered by this range.\nInclusive\nDoes this range fully contain the other?\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere in the range is this value? Returns 0-1 if within …\nThe amount of time or sequences covered by this range.\nCreates a new temporal <code>ResolvedTimeRange</code>.\nThe returned range is guaranteed to never include …\nOverwrites the end bound of the range.\nOverwrites the start bound of the range.\nA signed duration represented as nanoseconds since unix …\nA date-time represented as nanoseconds since unix epoch\nSeconds since unix epoch\nHuman-readable formatting\nUseful when showing dates/times on a timeline and you want …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this time is likely relative to unix epoch.\nReturns the absolute datetime if applicable.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nReturns the appropriate arrow datatype to represent this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an array with the appropriate datatype.\nName of the timeline (e.g. <code>log_time</code>).\nSequence or time?\nComputes the union of two <code>TimePoint</code>s, keeping the maximum …\nAn integer that is known not to equal its minimum value.\nAn error type returned when a checked integral type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value as a primitive type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new non-min if the given value is not the …\nCreates a new non-min without checking the value.\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSpecial value used to represent static data.\nA 64-bit number describing either nanoseconds, sequence …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nFor time timelines.\nFor sequence timelines.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nCalls <code>U::from(self)</code>.\nCreates a new temporal <code>TimeInt</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nReturns the appropriate arrow datatype to represent this …\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrecomputed hash of the string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe log tick timeline to which all API functions will …\nThe log time timeline to which all API functions will …\nName of the timeline (e.g. <code>log_time</code>).\nFor things like camera frames or iteration count.\nFor absolute or relative time.\nSequence or time?\nEither nanoseconds or sequence numbers.\nSaturating cast\nReturns the argument unchanged.\nSaturating cast\nCalls <code>U::from(self)</code>.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nInserts multiple elements at <code>index</code> within the deque, …\nCheck whether <code>self</code> is sorted.\nRemoves and returns the elements in the given <code>range</code> from …\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nRemoves an element from anywhere in the deque and returns …")