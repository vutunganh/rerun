searchState.loadedDescShard("re_types", 0, "The standard Rerun data types, component types, and …\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nRotation defined with an axis and an angle.\nA unique ID for a <code>Chunk</code>.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nRotation defined by a quaternion.\nA 3D rotation.\nA unique ID for a row’s worth of data within a chunk.\nThe serialized contents of a <code>ComponentBatch</code> with …\nA column’s worth of component data.\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nThe raw UTF8 bytes.\nExposes the object’s contents as a set of …\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nThe blueprint-specific components.\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nThe low-level datatypes that <code>components</code> are built from.\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nReadable name for displaying in UI.\nWeb URL to the Rerun documentation for this component.\nRe-exports of external crates that are used throughout the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nImage-related utilities.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nReturns the <code>n</code>-next logical <code>ChunkId</code>.\nReturns the <code>n</code>-next logical <code>RowId</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nIf this is an indicator component, for which archetype?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an indicator component for an archetype?\nDetermine if component matches a string\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nWhen the <code>ChunkId</code> was created, in nanoseconds since unix …\nWhen the <code>RowId</code> was created, in nanoseconds since unix …\nCreate a new unique <code>ChunkId</code> based on the current time.\nCreate a new unique <code>RowId</code> based on the current time.\nCreate an array of indicator components of this type with …\nReturns the next logical <code>ChunkId</code>.\nReturns the next logical <code>RowId</code>.\nThe number of instances of T stored in this buffer.\nReturns all component descriptors that <em>may</em> be provided by …\nSets <code>Self::archetype_field_name</code> to the given one iff it’…\nSets the descriptor’s <code>archetype_field_name</code> to the given …\nSets <code>Self::archetype_name</code> to the given one iff it’s not …\nSets the descriptor’s <code>archetype_name</code> to the given one …\nPartitions the component data into multiple sub-batches.\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nRepartitions the component data into multiple sub-batches, …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nReturns the unqualified name, e.g. <code>Points3D</code>.\nReturns the unqualified name, e.g. …\nReturns the unqualified name, e.g. <code>Position2D</code>.\nReturns the unqualified name, e.g. <code>Vec2D</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>ArrowBuffer</code> that is a slice of this buffer …\nUseful macro for statically asserting that a <code>struct</code> …\nInternal helpers; not part of the public API.\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\nUnconditionally sets <code>Self::archetype_field_name</code> to the …\nUnconditionally sets the descriptor’s …\nUnconditionally sets <code>Self::archetype_name</code> to the given one.\nUnconditionally sets the descriptor’s <code>archetype_name</code> to …\nThe source of the error, without any <code>Self::Context</code>.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nClear all the fields of a <code>Clear</code>.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::is_recursive</code>.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nReturns a non-recursive clear.\nThe format of the image.\nThe format of the image.\nThe format of the image.\nReturns the argument unchanged.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nCreate a new <code>Clear</code>.\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nReturns a recursive clear.\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nUpdate only some specific fields of a <code>Clear</code>.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThis method makes it possible to pack multiple …\nThe directions of the [x, y, z] axes.\n<strong>Archetype</strong>: The annotation context provides additional …\nIndicator component for the <code>AnnotationContext</code> …\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>AnnotationContext</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nList of class descriptions, mapping class indices to class …\nReturns the <code>ComponentDescriptor</code> for <code>Self::context</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AnnotationContext</code>.\nUpdate only some specific fields of a <code>AnnotationContext</code>.\nList of class descriptions, mapping class indices to class …\nThis method makes it possible to pack multiple …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\nIndicator component for the <code>Arrows2D</code> …\nThe total number of components in the archetype: 1 …\nOptional class Ids for the points.\nClear all the fields of a <code>Arrows2D</code>.\nOptional colors for the points.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::origins</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vectors</code>.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCreates new 2D arrows pointing in the given directions, …\nCalls <code>U::from(self)</code>.\nOptional text labels for the arrows.\nCreate a new <code>Arrows2D</code>.\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Arrows2D</code>.\nAll the vectors for each arrow in the batch.\nOptional class Ids for the points.\nOptional colors for the points.\nAn optional floating point value that specifies the 2D …\nOptional text labels for the arrows.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\nAll the vectors for each arrow in the batch.\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\nIndicator component for the <code>Arrows3D</code> …\nThe total number of components in the archetype: 1 …\nOptional class Ids for the points.\nClear all the fields of a <code>Arrows3D</code>.\nOptional colors for the points.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::origins</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vectors</code>.\nReturns the argument unchanged.\nCreates new 3D arrows pointing in the given directions, …\nCalls <code>U::from(self)</code>.\nOptional text labels for the arrows.\nCreate a new <code>Arrows3D</code>.\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Arrows3D</code>.\nAll the vectors for each arrow in the batch.\nOptional class Ids for the points.\nOptional colors for the points.\nOptional text labels for the arrows.\nThis method makes it possible to pack multiple …\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\nAll the vectors for each arrow in the batch.\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\nIndicator component for the <code>Asset3D</code> …\nThe total number of components in the archetype: 1 …\nA color multiplier applied to the whole asset.\nThe asset’s bytes.\nClear all the fields of a <code>Asset3D</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::albedo_factor</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::blob</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the argument unchanged.\nCreates a new <code>Asset3D</code> from the file contents at <code>path</code>.\nCreates a new <code>Asset3D</code> from the given <code>contents</code>.\nCalls <code>U::from(self)</code>.\nThe Media Type of the asset.\nCreate a new <code>Asset3D</code>.\nUpdate only some specific fields of a <code>Asset3D</code>.\nA color multiplier applied to the whole asset.\nThe asset’s bytes.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe Media Type of the asset.\n<strong>Archetype</strong>: A video binary.\nIndicator component for the <code>AssetVideo</code> …\nThe total number of components in the archetype: 1 …\nThe asset’s bytes.\nClear all the fields of a <code>AssetVideo</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::blob</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the argument unchanged.\nCreates a new <code>AssetVideo</code> from the given <code>contents</code>.\nCreates a new <code>AssetVideo</code> from the file contents at <code>path</code>.\nCalls <code>U::from(self)</code>.\nThe Media Type of the asset.\nCreate a new <code>AssetVideo</code>.\nDetermines the presentation timestamps of all frames …\nUpdate only some specific fields of a <code>AssetVideo</code>.\nThe asset’s bytes.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe Media Type of the asset.\n<strong>Archetype</strong>: A bar chart.\nIndicator component for the <code>BarChart</code> …\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>BarChart</code>.\nThe color of the bar chart\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::values</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BarChart</code>.\nUpdate only some specific fields of a <code>BarChart</code>.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nThe color of the bar chart\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe values. Should always be a 1-dimensional tensor (i.e. …\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\nIndicator component for the <code>Boxes2D</code> …\nThe total number of components in the archetype: 1 …\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nClear all the fields of a <code>Boxes2D</code>.\nOptional colors for the boxes.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::centers</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::half_sizes</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> centered around …\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> created from …\nAll half-extents that make up the batch of boxes.\nCalls <code>U::from(self)</code>.\nOptional text labels for the boxes.\nCreate a new <code>Boxes2D</code>.\nOptional radii for the lines that make up the boxes.\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Boxes2D</code>.\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional colors for the boxes.\nAn optional floating point value that specifies the 2D …\nAll half-extents that make up the batch of boxes.\nOptional text labels for the boxes.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nOptional radii for the lines that make up the boxes.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\nIndicator component for the <code>Boxes3D</code> …\nThe total number of components in the archetype: 1 …\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nClear all the fields of a <code>Boxes3D</code>.\nOptional colors for the boxes.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::centers</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fill_mode</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::half_sizes</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nOptionally choose whether the boxes are drawn with lines …\nReturns the argument unchanged.\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> centered around …\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> created from …\nAll half-extents that make up the batch of boxes.\nCalls <code>U::from(self)</code>.\nOptional text labels for the boxes.\nCreate a new <code>Boxes3D</code>.\nRotations via quaternion.\nOptional radii for the lines that make up the boxes.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Boxes3D</code>.\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional colors for the boxes.\nOptionally choose whether the boxes are drawn with lines …\nAll half-extents that make up the batch of boxes.\nOptional text labels for the boxes.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nRotations via quaternion.\nOptional radii for the lines that make up the boxes.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\nIndicator component for the <code>Capsules3D</code> …\nThe total number of components in the archetype: 2 …\nOptional class ID for the ellipsoids.\nClear all the fields of a <code>Capsules3D</code>.\nOptional colors for the capsules.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::lengths</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::translations</code>.\nReturns the argument unchanged.\nCreates a new <code>Capsules3D</code> where each capsule extends …\nCreates a new <code>Capsules3D</code> with the given axis-aligned …\nCalls <code>U::from(self)</code>.\nOptional text labels for the capsules, which will be …\nLengths of the capsules, defined as the distance between …\nCreate a new <code>Capsules3D</code>.\nRotations via quaternion.\nRadii of the capsules.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nOptional translations of the capsules.\nUpdate only some specific fields of a <code>Capsules3D</code>.\nOptional class ID for the ellipsoids.\nOptional colors for the capsules.\nOptional text labels for the capsules, which will be …\nLengths of the capsules, defined as the distance between …\nThis method makes it possible to pack multiple …\nRotations via quaternion.\nRadii of the capsules.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nOptional translations of the capsules.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\nIndicator component for the <code>DepthImage</code> …\nThe total number of components in the archetype: 2 …\nThe raw depth image data.\nClear all the fields of a <code>DepthImage</code>.\nColormap to use for rendering the depth image.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nThe expected range of depth values.\nReturns the <code>ComponentDescriptor</code> for <code>Self::buffer</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colormap</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::depth_range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::format</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::meter</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::point_fill_ratio</code>.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nReturns the argument unchanged.\nConstruct a depth image from a byte buffer given its …\nFrom an 16-bit grayscale image.\nCalls <code>U::from(self)</code>.\nAn optional floating point value that specifies how long a …\nCreate a new <code>DepthImage</code>.\nScale the radii of the points in the point cloud generated …\nTry to construct a <code>DepthImage</code> from anything that can be …\nUpdate only some specific fields of a <code>DepthImage</code>.\nThe raw depth image data.\nColormap to use for rendering the depth image.\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nAn optional floating point value that specifies how long a …\nScale the radii of the points in the point cloud generated …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\nIndicator component for the <code>Ellipsoids3D</code> …\nThe total number of components in the archetype: 1 …\nOptional center positions of the ellipsoids.\nOptional class ID for the ellipsoids.\nClear all the fields of a <code>Ellipsoids3D</code>.\nOptional colors for the ellipsoids.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::centers</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fill_mode</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::half_sizes</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::line_radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nOptionally choose whether the ellipsoids are drawn with …\nReturns the argument unchanged.\nCreates a new <code>Ellipsoids3D</code> with <code>Self::centers</code> and …\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nCreates a new <code>Ellipsoids3D</code> with <code>Self::half_sizes</code>.\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nFor each ellipsoid, half of its size on its three axes.\nCalls <code>U::from(self)</code>.\nOptional text labels for the ellipsoids.\nOptional radii for the lines used when the ellipsoid is …\nCreate a new <code>Ellipsoids3D</code>.\nRotations via quaternion.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Ellipsoids3D</code>.\nOptional center positions of the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional colors for the ellipsoids.\nOptionally choose whether the ellipsoids are drawn with …\nFor each ellipsoid, half of its size on its three axes.\nOptional text labels for the ellipsoids.\nOptional radii for the lines used when the ellipsoid is …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nRotations via quaternion.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\nIndicator component for the <code>EncodedImage</code> …\nThe total number of components in the archetype: 1 …\nThe encoded content of some image file, e.g. a PNG or JPEG.\nClear all the fields of a <code>EncodedImage</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::blob</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::opacity</code>.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCreates a new image from the file contents at <code>path</code>.\nConstruct an image given the encoded content of some image …\nCalls <code>U::from(self)</code>.\nThe Media Type of the asset.\nCreate a new <code>EncodedImage</code>.\nOpacity of the image, useful for layering several images.\nUpdate only some specific fields of a <code>EncodedImage</code>.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nAn optional floating point value that specifies the 2D …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe Media Type of the asset.\nOpacity of the image, useful for layering several images.\n<strong>Archetype</strong>: Geospatial line strings with positions …\nIndicator component for the <code>GeoLineStrings</code> …\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>GeoLineStrings</code>.\nOptional colors for the line strings.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::line_strings</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the argument unchanged.\nCreate a new <code>GeoLineStrings</code> from EPSG:4326 latitude and …\nCalls <code>U::from(self)</code>.\nThe line strings, expressed in EPSG:4326 coordinates …\nCreate a new <code>GeoLineStrings</code>.\nOptional radii for the line strings.\nUpdate only some specific fields of a <code>GeoLineStrings</code>.\nOptional colors for the line strings.\nThe line strings, expressed in EPSG:4326 coordinates …\nOptional radii for the line strings.\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\nIndicator component for the <code>GeoPoints</code> …\nThe total number of components in the archetype: 1 …\nOptional class Ids for the points.\nClear all the fields of a <code>GeoPoints</code>.\nOptional colors for the points.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the argument unchanged.\nCreate a new <code>GeoPoints</code> from EPSG:4326 latitude and …\nCalls <code>U::from(self)</code>.\nCreate a new <code>GeoPoints</code>.\nThe EPSG:4326 coordinates for the points …\nOptional radii for the points, effectively turning them …\nUpdate only some specific fields of a <code>GeoPoints</code>.\nOptional class Ids for the points.\nOptional colors for the points.\nThe EPSG:4326 coordinates for the points …\nOptional radii for the points, effectively turning them …\n<strong>Archetype</strong>: A list of edges in a graph.\nIndicator component for the <code>GraphEdges</code> …\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>GraphEdges</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::edges</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::graph_type</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nA list of node tuples.\nReturns the argument unchanged.\nSpecifies if the graph is directed or undirected.\nCalls <code>U::from(self)</code>.\nCreate a new <code>GraphEdges</code>.\nUpdate only some specific fields of a <code>GraphEdges</code>.\nCreates a graph with directed edges.\nA list of node tuples.\nSpecifies if the graph is directed or undirected.\nThis method makes it possible to pack multiple …\nCreates a graph with undirected edges.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\nIndicator component for the <code>GraphNodes</code> …\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>GraphNodes</code>.\nOptional colors for the boxes.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::node_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional text labels for the node.\nCreate a new <code>GraphNodes</code>.\nA list of node IDs.\nOptional center positions of the nodes.\nOptional radii for nodes.\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>GraphNodes</code>.\nOptional colors for the boxes.\nOptional text labels for the node.\nThis method makes it possible to pack multiple …\nA list of node IDs.\nOptional center positions of the nodes.\nOptional radii for nodes.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: A monochrome or color image.\nIndicator component for the <code>Image</code> …\nThe total number of components in the archetype: 2 …\nThe raw image data.\nClear all the fields of a <code>Image</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::buffer</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::format</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::opacity</code>.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nReturns the argument unchanged.\nConstruct an image from a byte buffer given its …\nTry to construct an <code>Image</code> from a color model (L, RGB, …\nConstruct an image from <code>image::DynamicImage</code>.\nConstruct an image from a byte buffer given its …\nCreates a new <code>Image</code> from the contents of a file.\nCreates a new <code>Image</code> from a file.\nConstruct an image from something that can be turned into …\nConstruct an image from the contents of an image file.\nFrom an 8-bit grayscale image.\nConstruct an image from a byte buffer given its resolution …\nAssumes RGB, 8-bit per channel, interleaved as <code>RGBRGBRGB</code>.\nAssumes RGBA, 8-bit per channel, with separate alpha.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Image</code>.\nOpacity of the image, useful for layering several images.\nUpdate only some specific fields of a <code>Image</code>.\nThe raw image data.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nOpacity of the image, useful for layering several images.\n<strong>Archetype</strong>: One or more transforms between the current …\nIndicator component for the <code>InstancePoses3D</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>InstancePoses3D</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::mat3x3</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternions</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::scales</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::translations</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n3x3 transformation matrices.\nCreate a new <code>InstancePoses3D</code>.\nRotations via quaternion.\nRotations via axis + angle.\nScaling factors.\nTranslation vectors.\nUpdate only some specific fields of a <code>InstancePoses3D</code>.\n3x3 transformation matrices.\nRotations via quaternion.\nRotations via axis + angle.\nScaling factors.\nTranslation vectors.\n<strong>Archetype</strong>: 2D line strips with positions and optional …\nIndicator component for the <code>LineStrips2D</code> …\nThe total number of components in the archetype: 1 …\nOptional <code>components::ClassId</code>s for the lines.\nClear all the fields of a <code>LineStrips2D</code>.\nOptional colors for the line strips.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strips</code>.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional text labels for the line strips.\nCreate a new <code>LineStrips2D</code>.\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nUpdate only some specific fields of a <code>LineStrips2D</code>.\nOptional <code>components::ClassId</code>s for the lines.\nOptional colors for the line strips.\nAn optional floating point value that specifies the 2D …\nOptional text labels for the line strips.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\n<strong>Archetype</strong>: 3D line strips with positions and optional …\nIndicator component for the <code>LineStrips3D</code> …\nThe total number of components in the archetype: 1 …\nOptional <code>components::ClassId</code>s for the lines.\nClear all the fields of a <code>LineStrips3D</code>.\nOptional colors for the line strips.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strips</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional text labels for the line strips.\nCreate a new <code>LineStrips3D</code>.\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\nAll the actual 3D line strips that make up the batch.\nUpdate only some specific fields of a <code>LineStrips3D</code>.\nOptional <code>components::ClassId</code>s for the lines.\nOptional colors for the line strips.\nOptional text labels for the line strips.\nThis method makes it possible to pack multiple …\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\nAll the actual 3D line strips that make up the batch.\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\nIndicator component for the <code>Mesh3D</code> …\nThe total number of components in the archetype: 1 …\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nOptional class Ids for the vertices.\nClear all the fields of a <code>Mesh3D</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::albedo_factor</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::triangle_indices</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_normals</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::vertex_texcoords</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Mesh3D</code>.\nThe total number of triangles.\nThe total number of vertices.\nCheck that this is a valid mesh, e.g. that the vertex …\nOptional indices for the triangles that make up the mesh.\nUpdate only some specific fields of a <code>Mesh3D</code>.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nA color multiplier applied to the whole mesh.\nUse this image as the albedo texture.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nUse this image as the albedo texture.\nOptional class Ids for the vertices.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nOptional indices for the triangles that make up the mesh.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCamera orientation used when there’s no camera …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\nIndicator component for the <code>Pinhole</code> …\nWidth/height ratio of the camera sensor.\nSets the view coordinates for the camera.\nClear all the fields of a <code>Pinhole</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::camera_xyz</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::image_from_camera</code>…\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::resolution</code>.\nX &amp; Y focal length in pixels.\nField of View on the Y axis, i.e. the angle between top …\nReturns the argument unchanged.\nCreates a pinhole from the camera focal length and …\nCreates a pinhole from the camera vertical field of view …\nCamera projection, from image coordinates to view …\nDeserializes the pinhole projection from the …\nThe distance from the camera origin to the image plane …\nCalls <code>U::from(self)</code>.\nCreate a new <code>Pinhole</code>.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nThe resolution of the camera sensor in pixels.\nPixel resolution (usually integers) of child image space. …\nDeserializes the resolution from the <code>resolution</code> field.\nGiven pixel coordinates and a world-space depth, return a …\nUpdate only some specific fields of a <code>Pinhole</code>.\nSets the view coordinates for the camera.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nPrincipal point of the pinhole camera, i.e. the …\nPixel resolution (usually integers) of child image space. …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\nIndicator component for the <code>Points2D</code> …\nOptional class Ids for the points.\nClear all the fields of a <code>Points2D</code>.\nOptional colors for the points.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::keypoint_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nCreate a new <code>Points2D</code>.\nAll the 2D positions at which the point cloud shows points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Points2D</code>.\nOptional class Ids for the points.\nOptional colors for the points.\nAn optional floating point value that specifies the 2D …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nAll the 2D positions at which the point cloud shows points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\nIndicator component for the <code>Points3D</code> …\nOptional class Ids for the points.\nClear all the fields of a <code>Points3D</code>.\nOptional colors for the points.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colors</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::keypoint_ids</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::labels</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::positions</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::radii</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::show_labels</code>.\nReturns the argument unchanged.\nCreates a new <code>Points3D</code> from the contents of a <code>.ply</code> file.\nCreates a new <code>Points3D</code> from a <code>.ply</code> file.\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nCreate a new <code>Points3D</code>.\nAll the 3D positions at which the point cloud shows points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nUpdate only some specific fields of a <code>Points3D</code>.\nOptional class Ids for the points.\nOptional colors for the points.\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nThis method makes it possible to pack multiple …\nAll the 3D positions at which the point cloud shows points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\nIndicator component for the <code>Scalar</code> …\nClear all the fields of a <code>Scalar</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::scalar</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Scalar</code>.\nThe scalar value to log.\nUpdate only some specific fields of a <code>Scalar</code>.\nThis method makes it possible to pack multiple …\nThe scalar value to log.\nThe total number of components in the archetype: 2 …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\nIndicator component for the <code>SegmentationImage</code> …\nThe raw image data.\nClear all the fields of a <code>SegmentationImage</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::buffer</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::draw_order</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::format</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::opacity</code>.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SegmentationImage</code>.\nOpacity of the image, useful for layering the segmentation …\nTry to construct a <code>SegmentationImage</code> from anything that …\nUpdate only some specific fields of a <code>SegmentationImage</code>.\nThe raw image data.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nOpacity of the image, useful for layering the segmentation …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Define the style properties for a line series …\nIndicator component for the <code>SeriesLine</code> …\nConfigures the zoom-dependent scalar aggregation.\nClear all the fields of a <code>SeriesLine</code>.\nColor for the corresponding series.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::width</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplay name of the series.\nCreate a new <code>SeriesLine</code>.\nUpdate only some specific fields of a <code>SeriesLine</code>.\nStroke width for the corresponding series.\nConfigures the zoom-dependent scalar aggregation.\nColor for the corresponding series.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nDisplay name of the series.\nStroke width for the corresponding series.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Define the style properties for a point series …\nIndicator component for the <code>SeriesPoint</code> …\nClear all the fields of a <code>SeriesPoint</code>.\nColor for the corresponding series.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::marker</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::marker_size</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::name</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhat shape to use to represent the point\nSize of the marker.\nDisplay name of the series.\nCreate a new <code>SeriesPoint</code>.\nUpdate only some specific fields of a <code>SeriesPoint</code>.\nColor for the corresponding series.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nWhat shape to use to represent the point\nSize of the marker.\nDisplay name of the series.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\nIndicator component for the <code>Tensor</code> …\nClear all the fields of a <code>Tensor</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nThe tensor data\nReturns the <code>ComponentDescriptor</code> for <code>Self::data</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::value_range</code>.\nReturns the argument unchanged.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from something that can be turned into …\nCalls <code>U::from(self)</code>.\nCreate a new <code>Tensor</code>.\nTry to construct a <code>Tensor</code> from anything that can be …\nUpdate only some specific fields of a <code>Tensor</code>.\nThe expected range of values.\nThe tensor data\nUpdate the <code>names</code> of the contained <code>TensorData</code> dimensions.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe expected range of values.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A text element intended to be displayed in its …\nIndicator component for the <code>TextDocument</code> …\nClear all the fields of a <code>TextDocument</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::media_type</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::text</code>.\nReturns the argument unchanged.\nCreates a new <code>TextDocument</code> from the contents of a utf8 …\nCreates a new <code>TextDocument</code> from a utf8 file.\nCreates a new <code>TextDocument</code> containing Markdown.\nCalls <code>U::from(self)</code>.\nThe Media Type of the text.\nCreate a new <code>TextDocument</code>.\nContents of the text document.\nUpdate only some specific fields of a <code>TextDocument</code>.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe Media Type of the text.\nContents of the text document.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\nIndicator component for the <code>TextLog</code> …\nClear all the fields of a <code>TextLog</code>.\nOptional color to use for the log line in the Rerun Viewer.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::level</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::text</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe verbosity level of the message.\nCreate a new <code>TextLog</code>.\nThe body of the message.\nUpdate only some specific fields of a <code>TextLog</code>.\nOptional color to use for the log line in the Rerun Viewer.\nThe verbosity level of the message.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThe body of the message.\nThe identity transform.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\nIndicator component for the <code>Transform3D</code> …\nVisual length of the 3 axes.\nClear all the fields of a <code>Transform3D</code>.\nClear all the fields of a <code>Transform3D</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for <code>Self::axis_length</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::mat3x3</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::quaternion</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::relation</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::scale</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::translation</code>.\nReturns the argument unchanged.\nFrom a 3x3 matrix, clearing all other fields.\nFrom a rotation, clearing all other fields.\nFrom a rotation &amp; scale, clearing all other fields.\nFrom a scale, clearing all other fields.\nFrom a translation, clearing all other fields.\nFrom a translation applied after a 3x3 matrix, clearing …\nFrom a translation applied after a rotation, known as a …\nFrom a translation, applied after a rotation &amp; scale, …\nFrom a translation applied after a scale, clearing all …\nCalls <code>U::from(self)</code>.\n3x3 transformation matrix.\nRotation via quaternion.\nSpecifies the relation this transform establishes between …\nRotation via axis + angle.\nScaling factor.\nTranslation vector.\nUpdate only some specific fields of a <code>Transform3D</code>.\nVisual length of the 3 axes.\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\n3x3 transformation matrix.\nRotation via quaternion.\nSpecifies the relation this transform establishes between …\nConvenience method that takes any kind of (single) …\nRotation via axis + angle.\nScaling factor.\nTranslation vector.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: References a single video frame.\nIndicator component for the <code>VideoFrameReference</code> …\nClear all the fields of a <code>VideoFrameReference</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::timestamp</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::video_reference</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VideoFrameReference</code>.\nReferences the closest video frame to this timestamp.\nUpdate only some specific fields of a <code>VideoFrameReference</code>.\nOptional reference to an entity with a …\nThis method makes it possible to pack multiple …\nThis method makes it possible to pack multiple …\nReferences the closest video frame to this timestamp.\nOptional reference to an entity with a …\nX=Back, Y=Down, Z=Left\nX=Back, Y=Down, Z=Right\nX=Back, Y=Left, Z=Down\nX=Back, Y=Left, Z=Up\nX=Back, Y=Right, Z=Down\nX=Back, Y=Right, Z=Up\nX=Back, Y=Up, Z=Left\nX=Back, Y=Up, Z=Right\nX=Down, Y=Back, Z=Left\nX=Down, Y=Back, Z=Right\nX=Down, Y=Forward, Z=Left\nX=Down, Y=Forward, Z=Right\nX=Down, Y=Left, Z=Back\nX=Down, Y=Left, Z=Forward\nX=Down, Y=Right, Z=Back\nX=Down, Y=Right, Z=Forward\nX=Forward, Y=Down, Z=Left\nX=Forward, Y=Down, Z=Right\nX=Forward, Y=Left, Z=Down\nX=Forward, Y=Left, Z=Up\nX=Forward, Y=Right, Z=Down\nX=Forward, Y=Right, Z=Up\nX=Forward, Y=Up, Z=Left\nX=Forward, Y=Up, Z=Right\nX=Left, Y=Back, Z=Down\nX=Left, Y=Back, Z=Up\nX=Left, Y=Down, Z=Back\nX=Left, Y=Down, Z=Forward\nX=Down, Y=Right, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Right, Y=Down, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Back, Z=Up\nX=Left, Y=Forward, Z=Down\nX=Left, Y=Forward, Z=Up\nX=Left, Y=Up, Z=Back\nX=Left, Y=Up, Z=Forward\nThe total number of components in the archetype: 1 …\nX=Right, Y=Back, Z=Down\nX=Right, Y=Back, Z=Up\nX=Right, Y=Down, Z=Back\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Down, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Up, Z=Back\nX=Right, Y=Back, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Right, Y=Up, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Up, Y=Back, Z=Left\nX=Up, Y=Back, Z=Right\nX=Up, Y=Forward, Z=Left\nX=Up, Y=Forward, Z=Right\nX=Up, Y=Left, Z=Back\nX=Up, Y=Left, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nIndicator component for the <code>ViewCoordinates</code> …\nClear all the fields of a <code>ViewCoordinates</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::xyz</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ViewCoordinates</code>.\nUpdate only some specific fields of a <code>ViewCoordinates</code>.\nThis method makes it possible to pack multiple …\nThe directions of the [x, y, z] axes.\nThe directions of the [x, y, z] axes.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\nThe blueprint-specific archetypes.\nThe blueprint-specific components.\nThe blueprint-specific datatypes.\nThe blueprint-specific views.\n<strong>Archetype</strong>: Configuration for the background of a view.\n<strong>Archetype</strong>: The description of a container.\n<strong>Archetype</strong>: The query for the dataframe view.\n<strong>Archetype</strong>: Tries to move the center of mass of the graph …\n<strong>Archetype</strong>: Resolves collisions between the bounding …\n<strong>Archetype</strong>: Aims to achieve a target distance between two …\n<strong>Archetype</strong>: A force between each pair of nodes that …\n<strong>Archetype</strong>: Similar to gravity, this force pulls nodes …\n<strong>Archetype</strong>: Configuration for the 3D line grid.\n<strong>Archetype</strong>: Configuration for the background map of the map …\n<strong>Archetype</strong>: Configuration of the map view zoom level.\n<strong>Archetype</strong>: Controls the distance to the near clip plane in …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\n<strong>Archetype</strong>: Configuration for the legend of a plot.\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\n<strong>Archetype</strong>: The description of a single view.\n<strong>Archetype</strong>: The contents of a <code>View</code>.\n<strong>Archetype</strong>: The top-level description of the viewport.\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nWhich tab is active.\nShould empty cells be filled with latest-at queries?\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nThe class of the view.\nThe layout shares of each column in the container.\nColor used for the solid background type.\nColor used for the grid.\nHow scalar values map to colors.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nTo what corner the legend is aligned.\nThe name of the container.\nThe name of the view.\nThe target distance between two nodes.\nWhether the center force is enabled.\nWhether the collision force is enabled.\nWhether the link force is enabled.\nWhether the many body force is enabled.\nWhether the position force is enabled.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nGamma exponent applied to normalized values before mapping …\nHow many columns this grid should have.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nSpecifies how often this force should be applied per …\nSpecifies how often this force should be applied per …\nThe type of the background.\nFilter used when zooming in on the tensor.\nShow one tab as maximized?\nControls the distance to the near clip plane in 3D scene …\nHashes of all recommended views the viewer has already …\nIn what plane the grid is drawn.\nThe position where the nodes should be pulled towards.\nMap provider and style to use.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe range of the axis.\nControls the visible range of a 2D view.\nThe time ranges to show for each timeline unless specified …\nThe layout of the views\nThe layout shares of each row of the container.\nHow the image is scaled to fit the view.\nSelected columns. If unset, all columns are selected.\nAny dimension listed here will have a slider for the index.\nThe “anchor point” of this view.\nSpace between grid lines spacing of one line to the next …\nCurrent state of the panels.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nHow thick the lines should be in ui units.\nThe timeline for this query.\nWhether this container is visible.\nWhether the grid is visible.\nWhether the legend is shown at all.\nWhether this view is visible.\nWhich dimension to map to width.\nZoom level for the map.\nIf enabled, the Y axis range will remain locked to the …\n<strong>Archetype</strong>: Configuration for the background of a view.\nIndicator component for the <code>Background</code> …\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>Background</code>.\nColor used for the solid background type.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::kind</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe type of the background.\nCreate a new <code>Background</code>.\nUpdate only some specific fields of a <code>Background</code>.\nColor used for the solid background type.\nThe type of the background.\n<strong>Archetype</strong>: The description of a container.\nIndicator component for the <code>ContainerBlueprint</code> …\nThe total number of components in the archetype: 1 …\nWhich tab is active.\nClear all the fields of a <code>ContainerBlueprint</code>.\nThe layout shares of each column in the container.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nReturns the <code>ComponentDescriptor</code> for <code>Self::active_tab</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::col_shares</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::container_kind</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::contents</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::display_name</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::grid_columns</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::row_shares</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nThe name of the container.\nReturns the argument unchanged.\nHow many columns this grid should have.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ContainerBlueprint</code>.\nThe layout shares of each row of the container.\nUpdate only some specific fields of a <code>ContainerBlueprint</code>.\nWhether this container is visible.\nWhich tab is active.\nThe layout shares of each column in the container.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nThe name of the container.\nHow many columns this grid should have.\nThe layout shares of each row of the container.\nWhether this container is visible.\n<strong>Archetype</strong>: The query for the dataframe view.\nIndicator component for the <code>DataframeQuery</code> …\nThe total number of components in the archetype: 0 …\nShould empty cells be filled with latest-at queries?\nClear all the fields of a <code>DataframeQuery</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::apply_latest_at</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::filter_by_range</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::select</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::timeline</code>.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DataframeQuery</code>.\nSelected columns. If unset, all columns are selected.\nThe timeline for this query.\nUpdate only some specific fields of a <code>DataframeQuery</code>.\nShould empty cells be filled with latest-at queries?\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nSelected columns. If unset, all columns are selected.\nThe timeline for this query.\n<strong>Archetype</strong>: Tries to move the center of mass of the graph …\nIndicator component for the <code>ForceCenter</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>ForceCenter</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nWhether the center force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ForceCenter</code>.\nThe strength of the force.\nUpdate only some specific fields of a <code>ForceCenter</code>.\nWhether the center force is enabled.\nThe strength of the force.\n<strong>Archetype</strong>: Resolves collisions between the bounding …\nIndicator component for the <code>ForceCollisionRadius</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>ForceCollisionRadius</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::iterations</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nWhether the collision force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecifies how often this force should be applied per …\nCreate a new <code>ForceCollisionRadius</code>.\nThe strength of the force.\nUpdate only some specific fields of a <code>ForceCollisionRadius</code>.\nWhether the collision force is enabled.\nSpecifies how often this force should be applied per …\nThe strength of the force.\n<strong>Archetype</strong>: Aims to achieve a target distance between two …\nIndicator component for the <code>ForceLink</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>ForceLink</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::distance</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::iterations</code>.\nThe target distance between two nodes.\nWhether the link force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecifies how often this force should be applied per …\nCreate a new <code>ForceLink</code>.\nUpdate only some specific fields of a <code>ForceLink</code>.\nThe target distance between two nodes.\nWhether the link force is enabled.\nSpecifies how often this force should be applied per …\n<strong>Archetype</strong>: A force between each pair of nodes that …\nIndicator component for the <code>ForceManyBody</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>ForceManyBody</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nWhether the many body force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ForceManyBody</code>.\nThe strength of the force.\nUpdate only some specific fields of a <code>ForceManyBody</code>.\nWhether the many body force is enabled.\nThe strength of the force.\n<strong>Archetype</strong>: Similar to gravity, this force pulls nodes …\nIndicator component for the <code>ForcePosition</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>ForcePosition</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::enabled</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::position</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::strength</code>.\nWhether the position force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ForcePosition</code>.\nThe position where the nodes should be pulled towards.\nThe strength of the force.\nUpdate only some specific fields of a <code>ForcePosition</code>.\nWhether the position force is enabled.\nThe position where the nodes should be pulled towards.\nThe strength of the force.\n<strong>Archetype</strong>: Configuration for the 3D line grid.\nIndicator component for the <code>LineGrid3D</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>LineGrid3D</code>.\nColor used for the grid.\nReturns the <code>ComponentDescriptor</code> for <code>Self::color</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::plane</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::spacing</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::stroke_width</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LineGrid3D</code>.\nIn what plane the grid is drawn.\nSpace between grid lines spacing of one line to the next …\nHow thick the lines should be in ui units.\nUpdate only some specific fields of a <code>LineGrid3D</code>.\nWhether the grid is visible.\nColor used for the grid.\nIn what plane the grid is drawn.\nSpace between grid lines spacing of one line to the next …\nHow thick the lines should be in ui units.\nWhether the grid is visible.\n<strong>Archetype</strong>: Configuration for the background map of the map …\nIndicator component for the <code>MapBackground</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>MapBackground</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::provider</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>MapBackground</code>.\nMap provider and style to use.\nUpdate only some specific fields of a <code>MapBackground</code>.\nMap provider and style to use.\n<strong>Archetype</strong>: Configuration of the map view zoom level.\nIndicator component for the <code>MapZoom</code> …\nThe total number of components in the archetype: 0 …\nClear all the fields of a <code>MapZoom</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::zoom</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>MapZoom</code>.\nUpdate only some specific fields of a <code>MapZoom</code>.\nZoom level for the map.\nZoom level for the map.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Controls the distance to the near clip plane in …\nIndicator component for the <code>NearClipPlane</code> …\nClear all the fields of a <code>NearClipPlane</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::near_clip_plane</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nControls the distance to the near clip plane in 3D scene …\nCreate a new <code>NearClipPlane</code>.\nUpdate only some specific fields of a <code>NearClipPlane</code>.\nControls the distance to the near clip plane in 3D scene …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\nIndicator component for the <code>PanelBlueprint</code> …\nClear all the fields of a <code>PanelBlueprint</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::state</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PanelBlueprint</code>.\nCurrent state of the panels.\nUpdate only some specific fields of a <code>PanelBlueprint</code>.\nCurrent state of the panels.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configuration for the legend of a plot.\nIndicator component for the <code>PlotLegend</code> …\nClear all the fields of a <code>PlotLegend</code>.\nTo what corner the legend is aligned.\nReturns the <code>ComponentDescriptor</code> for <code>Self::corner</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PlotLegend</code>.\nUpdate only some specific fields of a <code>PlotLegend</code>.\nWhether the legend is shown at all.\nTo what corner the legend is aligned.\nWhether the legend is shown at all.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\nIndicator component for the <code>ScalarAxis</code> …\nClear all the fields of a <code>ScalarAxis</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::range</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::zoom_lock</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ScalarAxis</code>.\nThe range of the axis.\nUpdate only some specific fields of a <code>ScalarAxis</code>.\nThe range of the axis.\nIf enabled, the Y axis range will remain locked to the …\nIf enabled, the Y axis range will remain locked to the …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\nIndicator component for the <code>TensorScalarMapping</code> …\nClear all the fields of a <code>TensorScalarMapping</code>.\nHow scalar values map to colors.\nReturns the <code>ComponentDescriptor</code> for <code>Self::colormap</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::gamma</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::mag_filter</code>.\nReturns the argument unchanged.\nGamma exponent applied to normalized values before mapping …\nCalls <code>U::from(self)</code>.\nFilter used when zooming in on the tensor.\nCreate a new <code>TensorScalarMapping</code>.\nUpdate only some specific fields of a <code>TensorScalarMapping</code>.\nHow scalar values map to colors.\nGamma exponent applied to normalized values before mapping …\nFilter used when zooming in on the tensor.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\nIndicator component for the <code>TensorSliceSelection</code> …\nClear all the fields of a <code>TensorSliceSelection</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::height</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::indices</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::slider</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::width</code>.\nReturns the argument unchanged.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TensorSliceSelection</code>.\nAny dimension listed here will have a slider for the index.\nUpdate only some specific fields of a <code>TensorSliceSelection</code>.\nWhich dimension to map to width.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nAny dimension listed here will have a slider for the index.\nWhich dimension to map to width.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\nIndicator component for the <code>TensorViewFit</code> …\nClear all the fields of a <code>TensorViewFit</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::scaling</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TensorViewFit</code>.\nHow the image is scaled to fit the view.\nUpdate only some specific fields of a <code>TensorViewFit</code>.\nHow the image is scaled to fit the view.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: The description of a single view.\nIndicator component for the <code>ViewBlueprint</code> …\nThe class of the view.\nClear all the fields of a <code>ViewBlueprint</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::class_identifier</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::display_name</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::space_origin</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::visible</code>.\nThe name of the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ViewBlueprint</code>.\nThe “anchor point” of this view.\nUpdate only some specific fields of a <code>ViewBlueprint</code>.\nWhether this view is visible.\nThe class of the view.\nThe name of the view.\nThe “anchor point” of this view.\nWhether this view is visible.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: The contents of a <code>View</code>.\nIndicator component for the <code>ViewContents</code> …\nClear all the fields of a <code>ViewContents</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::query</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ViewContents</code>.\nThe <code>QueryExpression</code> that populates the contents for the …\nUpdate only some specific fields of a <code>ViewContents</code>.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: The top-level description of the viewport.\nIndicator component for the <code>ViewportBlueprint</code> …\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nClear all the fields of a <code>ViewportBlueprint</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::auto_layout</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::auto_views</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::maximized</code>.\nReturns the <code>ComponentDescriptor</code> for …\nReturns the <code>ComponentDescriptor</code> for <code>Self::root_container</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow one tab as maximized?\nCreate a new <code>ViewportBlueprint</code>.\nHashes of all recommended views the viewer has already …\nThe layout of the views\nUpdate only some specific fields of a <code>ViewportBlueprint</code>.\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nShow one tab as maximized?\nHashes of all recommended views the viewer has already …\nThe layout of the views\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\nIndicator component for the <code>VisibleTimeRanges</code> …\nClear all the fields of a <code>VisibleTimeRanges</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::ranges</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VisibleTimeRanges</code>.\nThe time ranges to show for each timeline unless specified …\nUpdate only some specific fields of a <code>VisibleTimeRanges</code>.\nThe time ranges to show for each timeline unless specified …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nIndicator component for the <code>VisualBounds2D</code> …\nClear all the fields of a <code>VisualBounds2D</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::range</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VisualBounds2D</code>.\nControls the visible range of a 2D view.\nUpdate only some specific fields of a <code>VisualBounds2D</code>.\nControls the visible range of a 2D view.\n<strong>Component</strong>: The active tab in a tabbed container.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\n<strong>Component</strong>: Whether the viewport layout is determined …\n<strong>Component</strong>: Whether or not views should be created …\n<strong>Component</strong>: The type of the background in a view.\nVisible, but as small as possible on its shorter axis.\n<strong>Component</strong>: The layout share of a column in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\n<strong>Component</strong>: One of four 2D corners, typically used to align …\n<strong>Component</strong>: Whether a procedure is enabled.\nFully expanded.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\n<strong>Component</strong>: Configuration for the filter is not null …\n<strong>Component</strong>: The target distance between two nodes.\n<strong>Component</strong>: Specifies how often this force should be …\n<strong>Component</strong>: The strength of a given force.\nA bright gradient.\nA dark gradient.\nOrganize children in a grid layout\n<strong>Component</strong>: How many columns a grid container should have.\n<strong>Component</strong>: Space between grid lines of one line to the …\nCompletely hidden.\nOrder the children left to right\n<strong>Component</strong>: All the contents in the container.\n<strong>Component</strong>: Whether the entity can be interacted with.\nLeft bottom corner.\nLeft top corner.\n<strong>Component</strong>: Indicate whether the range should be locked …\n<strong>Component</strong>: Name of the map provider to be used in Map …\nMapbox Dark is a dark-themed map designed by Mapbox.\nMapbox Satellite is a satellite map designed by Mapbox.\nMapbox Streets is a minimalistic map designed by Mapbox.\n<strong>Component</strong>: Distance to the near clip plane used for …\n<code>OpenStreetMap</code> is the default map provider.\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Tri-state for panel controls.\n<strong>Component</strong>: An individual query expression used to filter a …\nRight bottom corner.\nRight top corner.\n<strong>Component</strong>: The container that sits at the root of a …\n<strong>Component</strong>: The layout share of a row in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\nSimple uniform color.\nPut children in separate tabs\n<strong>Component</strong>: Show a slider for the index of some dimension …\n<strong>Component</strong>: A timeline identified by its name.\nOrder the children top to bottom\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\n<strong>Component</strong>: Determines whether an image or texture should …\n<strong>Component</strong>: Whether a view is maximized.\n<strong>Component</strong>: The origin of a view.\n<strong>Component</strong>: Hash of a viewer recommendation.\n<strong>Component</strong>: Whether the container, view, entity or instance …\n<strong>Component</strong>: The range of values on a given timeline that …\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\n<strong>Component</strong>: Override the visualizers for an entity.\n<strong>Component</strong>: A zoom level determines how much of the world …\n<strong>Component</strong>: The active tab in a tabbed container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether the viewport layout is determined …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether or not views should be created …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The type of the background in a view.\nA bright gradient.\nA dark gradient.\nSimple uniform color.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The layout share of a column in the container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Describe a component column to be selected in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\nOrganize children in a grid layout\nOrder the children left to right\nPut children in separate tabs\nOrder the children top to bottom\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: One of four 2D corners, typically used to align …\nLeft bottom corner.\nLeft top corner.\nRight bottom corner.\nRight top corner.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether a procedure is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new range filter with the provided time …\n<strong>Component</strong>: Configuration for the filter is not null …\nIs the filter active?\nComponent name of the filter column.\nEntity path of the filter column.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Self</code>.\n<strong>Component</strong>: The target distance between two nodes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Specifies how often this force should be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The strength of a given force.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: How many columns a grid container should have.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Space between grid lines of one line to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: All the contents in the container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether the entity can be interacted with.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Indicate whether the range should be locked …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Name of the map provider to be used in Map …\nMapbox Dark is a dark-themed map designed by Mapbox.\nMapbox Satellite is a satellite map designed by Mapbox.\nMapbox Streets is a minimalistic map designed by Mapbox.\n<code>OpenStreetMap</code> is the default map provider.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Distance to the near clip plane used for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisible, but as small as possible on its shorter axis.\nFully expanded.\nCompletely hidden.\n<strong>Component</strong>: Tri-state for panel controls.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is <code>PanelState::Expanded</code>\nReturns <code>true</code> if self is <code>PanelState::Hidden</code>\nSets the panel to <code>Self::Hidden</code> if it is collapsed or …\n<strong>Component</strong>: An individual query expression used to filter a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The container that sits at the root of a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The layout share of a row in the container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Describe a component column to be selected in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Show a slider for the index of some dimension …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TensorDimensionIndexSlider</code> to determine the …\n<strong>Component</strong>: A timeline identified by its name.\nReturns the argument unchanged.\nCreate a <code>Self</code> from a <code>re_log_types::Timeline</code>.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Determines whether an image or texture should …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether a view is maximized.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The origin of a view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Hash of a viewer recommendation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether the container, view, entity or instance …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The range of values on a given timeline that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Override the visualizers for an entity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A zoom level determines how much of the world …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: Describe a component column to be selected in …\n<strong>Datatype</strong>: Configuration for the filter-by-range feature of …\n<strong>Datatype</strong>: Configuration for the filter is not null feature …\n<strong>Datatype</strong>: List of selected columns in a dataframe.\n<strong>Datatype</strong>: Defines a slider for the index of some dimension.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nWhether the filter by event feature is active.\nThe column used when the filter by event feature is used.\nThe name of the component.\nThe component columns to include\nThe dimension number.\nEnd of the time range (inclusive).\nThe entity path for this component.\nBeginning of the time range.\nThe time columns to include\n<strong>Datatype</strong>: Describe a component column to be selected in …\nThe name of the component.\nThe entity path for this component.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\n<strong>Datatype</strong>: Configuration for the filter-by-range feature of …\nEnd of the time range (inclusive).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBeginning of the time range.\n<strong>Datatype</strong>: Configuration for the filter is not null feature …\nWhether the filter by event feature is active.\nThe column used when the filter by event feature is used.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: List of selected columns in a dataframe.\nThe component columns to include\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe time columns to include\n<strong>Datatype</strong>: Defines a slider for the index of some dimension.\nThe dimension number.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates through the list of strings as Rust <code>str</code> …\n<strong>View</strong>: A bar chart view.\n<strong>View</strong>: A view to display any data in a tabular form.\n<strong>View</strong>: A graph view to display time-variying, directed or …\n<strong>View</strong>: A 2D map view to display geospatial primitives.\n<strong>View</strong>: For viewing spatial 2D data.\n<strong>View</strong>: For viewing spatial 3D data.\n<strong>View</strong>: A view on a tensor of any dimensionality.\n<strong>View</strong>: A view of a single text document, for use with …\n<strong>View</strong>: A view of a text log, for use with …\n<strong>View</strong>: A time series view for scalars over time, for use …\nConfigures the vertical axis of the plot.\nConfiguration for the background map of the map view.\nConfiguration for the background of the view.\nConfiguration for the background of the view.\nTries to move the center of mass of the graph to the …\nResolves collisions between the bounding spheres, …\nAllows to control the interaction between two nodes …\nA force between each pair of nodes that ressembles an …\nSimilar to gravity, this force pulls nodes towards a …\nConfiguration for the 3D line grid.\nConfigures the legend of the plot.\nConfigures the legend of the plot.\nQuery of the dataframe.\nConfigures how scalars are mapped to color.\nHow to select the slice of the tensor to show.\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures how the selected slice should fit into the view.\nEverything within these bounds is guaranteed to be visible.\nThe visible parts of the scene, in the coordinate space of …\nConfigures the zoom level of the map view.\n<strong>View</strong>: A bar chart view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the legend of the plot.\n<strong>View</strong>: A view to display any data in a tabular form.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery of the dataframe.\n<strong>View</strong>: A graph view to display time-variying, directed or …\nTries to move the center of mass of the graph to the …\nResolves collisions between the bounding spheres, …\nAllows to control the interaction between two nodes …\nA force between each pair of nodes that ressembles an …\nSimilar to gravity, this force pulls nodes towards a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEverything within these bounds is guaranteed to be visible.\n<strong>View</strong>: A 2D map view to display geospatial primitives.\nConfiguration for the background map of the map view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the zoom level of the map view.\n<strong>View</strong>: For viewing spatial 2D data.\nConfiguration for the background of the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures which range on each timeline is shown by this …\nThe visible parts of the scene, in the coordinate space of …\n<strong>View</strong>: For viewing spatial 3D data.\nConfiguration for the background of the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for the 3D line grid.\nConfigures which range on each timeline is shown by this …\n<strong>View</strong>: A view on a tensor of any dimensionality.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures how scalars are mapped to color.\nHow to select the slice of the tensor to show.\nConfigures how the selected slice should fit into the view.\n<strong>View</strong>: A view of a single text document, for use with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>View</strong>: A view of a text log, for use with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>View</strong>: A time series view for scalars over time, for use …\nConfigures the vertical axis of the plot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the legend of the plot.\nConfigures which range on each timeline is shown by this …\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Component</strong>: The annotation context provides additional …\n<code>*</code>\nAverage all points in the range together.\n<strong>Component</strong>: The length of an axis in local units of the …\n<strong>Component</strong>: A binary blob of data.\nThe transform describes how to transform into the child …\n<code>⏺</code>\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Component</strong>: Colormap for mapping scalar values within a …\n<code>x</code>\nRasmusgo’s Cyan to Yellow colormap\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\n<code>◆</code>\nThe graph has directed edges.\n<code>▼</code>\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\n<strong>Component</strong>: A path to an entity, usually to reference some …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Component</strong>: How much a primitive fills out the available …\n<strong>Component</strong>: A gamma correction value to be used with a …\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\n<strong>Component</strong>: An edge in a graph connecting two nodes.\n<strong>Component</strong>: A string-based ID representing a node in a …\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nA simple black to white gradient.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n<strong>Component</strong>: A buffer that is known to store image data.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Component</strong>: The distance from the camera origin to the …\nThe Inferno colormap from Matplotlib.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\n<code>◀</code>\n<strong>Component</strong>: Length, or one-dimensional size.\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\nLinearly interpolate the nearest neighbors, creating a …\nThe Magma colormap from Matplotlib.\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nLines are drawn around the parts of the shape which …\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nKeep only the maximum values in the range.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\n<strong>Component</strong>: A display name, typically for an entity or a …\nShow the nearest pixel value.\nNo aggregation.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Camera projection, from image coordinates to …\n<strong>Component</strong>: An infinite 3D plane represented by a unit …\nThe Plasma colormap from Matplotlib.\n<code>+</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Component</strong>: A recording URI (Uniform Resource Identifier).\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\n<code>▶</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nThe surface of the shape is filled in with a solid color. …\n<code>◼️</code>\n<strong>Component</strong>: The width of a stroke specified in UI points.\n<strong>Component</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\n<strong>Component</strong>: Specifies which dimension to use for height.\n<strong>Component</strong>: Specifies which dimension to use for width.\n<strong>Component</strong>: A 2D texture UV coordinate.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: A translation vector in 3D space.\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nGoogle’s Turbo colormap map.\nThe graph has undirected edges.\n<code>▲</code>\n<strong>Component</strong>: Range of expected or valid values, specifying a …\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\n<strong>Component</strong>: How we interpret the coordinate system of an …\nThe Viridis colormap from Matplotlib\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\nAverage all points in the range together.\nKeep only the maximum values in the range.\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\nNo aggregation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The annotation context provides additional …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The length of an axis in local units of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A binary blob of data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlack and opaque.\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\nFully transparent (invisible).\nWhite and opaque.\nReturns the argument unchanged.\nFrom gamma-space sRGB values.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nFrom gamma-space sRGB values, with a separate/unmultiplied …\nCalls <code>U::from(self)</code>.\nCreate a new color.\n<code>[r, g, b, a]</code>\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\n<strong>Component</strong>: Colormap for mapping scalar values within a …\nRasmusgo’s Cyan to Yellow colormap\nA simple black to white gradient.\nThe Inferno colormap from Matplotlib.\nThe Magma colormap from Matplotlib.\nThe Plasma colormap from Matplotlib.\nGoogle’s Turbo colormap map.\nThe Viridis colormap from Matplotlib\nReturns the argument unchanged.\nInstantiate a new <code>Colormap</code> from a u8 value.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDraw order used for 2D boxes if no draw order was …\nDraw order used for depth image when they’re not shown …\nDraw order used for images if no draw order was specified.\nDraw order used for 2D lines if no draw order was …\nDraw order used for 2D points if no draw order was …\nDraw order used for segmentation images if no draw order …\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A path to an entity, usually to reference some …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\nLines are drawn around the parts of the shape which …\nThe surface of the shape is filled in with a solid color. …\nReturns the argument unchanged.\nInstantiate a new <code>FillMode</code> from a u8 value.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: How much a primitive fills out the available …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A gamma correction value to be used with a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\nReturns the argument unchanged.\nCreate a new line string from a list of positions.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: An edge in a graph connecting two nodes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A string-based ID representing a node in a …\nReturns the string slice of the graph node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe graph has directed edges.\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nThe graph has undirected edges.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\nReturns the maximum of a box with these half-extents and a …\nReturns the min position of a box with these half-extents …\nReturns the argument unchanged.\nHeight of a box using this half-extent.\nCalls <code>U::from(self)</code>.\nCreate a new half-extent from half-width and half-height.\nWidth of a box using this half-extent.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\nReturns the maximum of a box with these half-extents and a …\nReturns the min position of a box with these half-extents …\nHeight of a box using this half-extent.\nReturns the argument unchanged.\nHeight of a box using this half-extent.\nCalls <code>U::from(self)</code>.\nCreate a new half-extent from half-width, half-height, …\nCreate a new half-extent with all the same sizes (a …\nWidth of a box using this half-extent.\n<strong>Component</strong>: A buffer that is known to store image data.\nReturns the argument unchanged.\nConstruct an image buffer &amp; image format from …\nUtility method for constructing an image &amp; format from a …\nConstruct an image buffer &amp; image format from something …\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The metadata describing the contents of a …\nThe color model represented by this image format.\nThe datatype represented by this image format.\nCreate a new depth image format with the given resolution …\nReturns the argument unchanged.\nCreate a new image format from a color model and datatype.\nFrom a specific pixel format.\nDetermine if the image format has an alpha channel.\nCalls <code>U::from(self)</code>.\nDetermine if the image format represents floating point …\nNumber of bytes for the whole image.\nCreate a new rgb image format with 8 bit per channel with …\nCreate a new rgba image format with 8 bit per channel with …\nCreate a new segmentation image format with the given …\n<strong>Component</strong>: The distance from the camera origin to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe latitude.\nThe longitude.\nCreate a new position.\n<strong>Component</strong>: Length, or one-dimensional size.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A line strip in 2D space.\nReturns the argument unchanged.\nCreate a new line strip from a list of positions.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A line strip in 3D space.")