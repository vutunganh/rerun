searchState.loadedDescShard("re_view_spatial", 0, "Rerun Spatial Views\nHandles picking in 2D and 3D spaces.\nProcedurally-generated meshes for rendering objects that …\nResponsible for populating <code>SceneSpatialPrimitives</code> and …\nContext objects for a single entity in a spatial scene.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContext for creating a mapping from <code>DrawOrder</code> to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProvides transforms from an entity to a chosen reference …\nResolved transforms at an entity.\nReturns reference from instance transforms, repeating the …\nDetermines transforms for all entities relative to a space …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGather transforms for everything <em>above</em> the root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPinhole camera ancestor (may be this entity itself).\nThe transform from the entity to the reference space.\nList of transforms per instance including poses.\nThe last 3D from 3D transform at the pinhole camera, …\nReturns the first instance transform and warns if there …\nReturns the first instance transform and does not warn if …\nAll transforms provided are relative to this reference …\nCompute transform info for when we walk down the tree from …\nRetrieves transform information for a given entity.\nCompute transform info for when we walk up the tree from …\nAll reachable entities.\nIf this entity is under (!) a pinhole camera, this …\nWarns that multiple transforms within the entity are not …\nAn eye in a 3D view.\nThe mode of an <code>ViewEye</code>.\nAvoids zentith/nadir singularity.\nAn eye (camera) in 3D space, controlled by the user.\nCenter of orbit, or camera position in first person mode.\nCreate an <code>ViewEye</code> from a <code>Eye</code>.\nThe local up-axis, if set\nThe up-axis of the eye itself, in world-space.\nIf no angle is present, this is an orthographic camera.\nVertical field of view in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWorld-direction we are looking at\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nListen to WSAD and QE to move the eye.\nFirst person or orbital?\nIf in orbit mode, what are we orbiting around?\nIf in orbit mode, how far from the orbit center are we?\nIgnored for <code>EyeMode::FirstPerson</code>, but kept for if/when the …\nPicking ray for a given pointer in the parent space (i.e. …\nOnly valid if we have an up-vector set.\nThe world-space position of the eye.\nRotate around forward axis\nRotate based on a certain number of pixel delta.\nSet what we orbit around, and at what distance.\nGiven a delta in view-space, translate the eye.\nReturns <code>true</code> if interaction occurred. I.e. the camera …\nFor controlling the eye with WSAD in a smooth way.\nRotate to world-space from view-space (RUB).\nReturns all entities for which a visualizer of the given …\nThe size of the largest image and/or video at a given …\nAccesses the image/video dimension information for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccesses the global store subscriber.\nEither a <code>re_types::archetypes::Asset3D</code> or …\nCaches meshes based on their <code>MeshCacheKey</code>.\nKey used for caching <code>LoadedMesh</code>es.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf there are any textures associated with that mesh …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe rectangle represents an error icon.\nThe rectangle is an image with pixel data, potentially …\nImage rectangle that can be picked in the view.\nThe rectangle is a frame in a video.\nPath to the image (note image instance ids would refer to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolution of the underlying texture.\nAssociated data.\nTextured rectangle used by the renderer.\nThe result came from GPU based picking.\nWe hit a egui ui element, meaning that depth information …\nPicking context in which picking is performed.\nThe hit was a textured rect.\nRadius in which cursor interactions may snap to the …\nTransforms ui coordinates to “ui-camera-plane-coordinates…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAny additional information about the picking hit.\nPicking ray hits.\nWhat entity or instance got hit by the picking ray.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PickingContext</code> for executing picking …\nPerforms picking for a given scene.\nCursor position in the UI coordinates after panning &amp; …\nCursor position on the renderer canvas in pixels.\nCursor position in the UI coordinate system.\nThe picking ray used. Given in the coordinates of the …\nWhere the ray hit the entity.\nIf available, finds pixel info for a picking hit.\nVia a GPU texture readback.\nFull image information. Use this whenever reasonably …\nHow we figure out what value to show for a single pixel.\nIdentifies an image/texture interaction.\nInfo about the buffer we’re reading back.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex of the interaction. This is important in case there…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShows the value of a pixel in an image. If no image info …\nRect on the texture that was read back.\n<code>meter</code>: iff this is a depth map, how long is one meter?\nDraws a border for the area zoomed in by …\n<code>meter</code>: iff this is a depth map, how long is one meter?\nA pinhole camera model.\nWidth/height ratio of the camera sensor.\nX &amp; Y focal length in pixels.\nField of View on the Y axis, i.e. the angle between top …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nUtility for querying the pinhole from the store.\nThe pinhole sensor rectangle: [0, 0] - [width, height], …\nGiven pixel coordinates and a world-space depth, return a …\nA capsule; a cylinder with hemispherical end caps.\nA unit cube, centered; its bounds are ±0.5.\nErrors that may arise from attempting to generate a mesh …\nEither the GPU mesh could not be allocated, or the …\nBase shape for <code>hexasphere</code>’s subdivision algorithm which …\nDescription of a mesh that can be procedurally generated.\nCache for the computation of triangle meshes from …\nA renderable mesh generated from a <code>ProcMeshKey</code> by the …\nA sphere of unit radius.\nThe requested drawing primitive type (solid or wireframe) …\nCache for the computation of wireframe meshes from …\nA renderable mesh generated from a <code>ProcMeshKey</code> by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a solid triangle mesh without caching.\nGenerate a wireframe mesh without caching.\nMesh to render. Note that its colors are set to black, so …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollection of line strips making up the wireframe.\nReturns the bounding box which can be computed from the …\nIf true, then when a wireframe mesh is generated, it …\nThe length of the capsule; the distance between the …\nNumber of triangle subdivisions to perform to create a …\nNumber of triangle subdivisions to use to create a finer, …\nOverall bounding box of the scene for the current query.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPer-entity bounding boxes for the current query.\nA bounding box that smoothly transitions to the current …\nA logged camera that connects spaces.\nPath to the entity which has the projection (pinhole, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDistance of a picture plane from the camera.\nThe projection transform of a child-entity.\nThe coordinate system of the pinhole entity (“view-space…\nWhere in scene-space is the camera origin?\nReturns x, y, and depth in image/pixel coordinates.\nCamera “Extrinsics”, i.e. the pose of the camera.\nScene-space from Rerun view-space (RUB).\nMarks entities that are of special interest for heuristics.\nSpatial topological information about a store.\nSpatial subspace within we typically expect a homogeneous …\nAccesses the spatial topology for a given store.\nAdds a new entity to the spatial topology that wasn’t …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nOrigin paths of child spaces.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe connection to the parent space.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nAll entities that were logged at any point in time and are …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nEntities in this space that qualify for one or more …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nIterates over all subspaces.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe transform root of this subspace.\nOrigin of the parent space.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAccesses the global store subscriber.\nReturns the subspace an entity belongs to.\nReturns the subspace for a given origin.\nMaps each logged entity to the origin of a subspace.\nAll subspaces, identified by their origin-hash.\nWhether 2D content in this subspace can be displayed.\nWhether 3D content in this subspace can be displayed.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCached transforms for a single timeline.\nThe entity has a clear component.\nPoints in time that have changed for a given entity, i.e. …\nThe entity has a pinhole projection or view coordinates, …\nMaps from time to pinhole projection.\nThe entity has instance poses, i.e. any non-style …\nFlags for the different kinds of independent transforms …\nStore subscriber that resolves all transform components at …\nCached transforms for a single entity.\nThe entity has a tree transform, i.e. any non-style …\nAccesses the transform component tracking data for a given …\nAccesses the transform component tracking data for a given …\nGet a flags value with all known bits set.\nMakes sure the transform cache is up to date with the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates that should be applied to the cache. I.e. times &amp; …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll components related to pinholes (i.e. …\nAll components of <code>archetypes::InstancePoses3D</code>\nQueries all components that are part of pose transforms, …\nQueries all components that are part of pose transforms, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAccesses the global store subscriber.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAll components of <code>archetypes::Transform3D</code>\nAccesses the transform component tracking data for a given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nView coordinates at this pinhole camera.\nTODO(andreas): Should turn this “inside out” - …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of images &amp; depth images processed last frame.\nPinhole component logged at the origin if any.\nLast frame’s picking result.\nUpdates the state with statistics from the latest system …\nPan and zoom, and return the current transform.\nEye pose just before we started following an entity …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe taregt mode will be ignored, and the mode of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to show the orbit center of the eye-camera when the …\nLast known view coordinates. Used to detect changes in …\nShow center of orbit camera when interacting with camera …\nCurrently tracked entity.\nConfiguration for the background of the view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures which range on each timeline is shown by this …\nThe visible parts of the scene, in the coordinate space of …\nConfiguration for the background of the view.\nChoose the default visualizers to enable for this entity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the 3D line grid.\nConfigures which range on each timeline is shown by this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCollection of keypoints for annotation context.\nShows a loading animation in a spatial view.\nReturns the argument unchanged.\nThe “radius” along one local axis.\nThe “radius” along the other local axis.\nReturns the view coordinates used for 2D (image) views.\nCalls <code>U::from(self)</code>.\nProcess <code>re_types::components::Radius</code> components to …\nList of all visualizers that read …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpose image infos for depth clouds - we need this for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks entities only as “maybe visualizable” for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>AxisLengthDetector</code> doesn’t actually visualize …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all the values in the slice, then repeat the …\nClamp the last value in <code>values</code> in order to reach a length …\nClamp the last value in <code>values</code> in order to reach a length …\nIterate <code>chunks</code> as indexed deserialized batches.\nIterate <code>chunks</code> as indexed primitives.\nIterates through all entity views for a given archetype.\nStyle it like an error message\nInputs for <code>process_labels()</code>, defining the label(s) of a …\nMaximum number of labels after which we stop displaying …\nLabels a given point (in scene coordinates)\nA point in space.\nLabels a given rect (in scene coordinates)\nColors from the batch to apply to the labels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNote: If we find a reason to make this data type usable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat is hovered if this label is hovered.\nLabel data from the batch.\n<code>num_instances</code> should be equal to the length of …\nThe position where a single shared label will be displayed …\nProduces ui labels from component data, allowing the …\nProduces 2D ui labels from component data.\nProduces 3D ui labels from component data.\nThe <code>ShowLabels</code> component value.\nGiven a visualizer’s query context, compute its …\nThe shape/position being labeled.\nA batch of instances to draw. This struct is just …\nTo be used within the scope of a single …\nAdd a batch of data to be drawn.\nBounding box and label info here will be updated by the …\nIterator of mesh fill modes. Must be at least as long as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinal operation. Produce the <code>re_renderer::QueueableDrawData</code>…\nAccumulates lines to render. TODO(kpreid): Should be using …\nIterator of meshes. Must be at least as long as <code>half_sizes</code>.\nAccumulates triangle mesh instances to render.\nCommon data struct for all spatial scene elements.\nBounding boxes of all visualizations that the visualizer …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoading icons/spinners shown using egui, in world/scene …\nTextured rectangles that the visualizer produced which can …\nThe view kind preferred by this visualizer (used for …\nLabels that should be shown using egui.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQueries a video from the datstore and caches it in the …")