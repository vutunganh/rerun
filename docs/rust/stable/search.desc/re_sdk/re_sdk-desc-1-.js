searchState.loadedDescShard("re_sdk", 1, "Flushes any buffered records.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogs a message at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nThe verbosity level of the message.\nSet <code>Metadata::level</code>.\nThe verbosity level of the message.\nSetter for <code>level</code>.\nThe line containing the message.\nSet <code>line</code>\nLogs the <code>Record</code>.\nThe standard logging macro.\nDetermines if a message logged at the specified level in …\nReturns a reference to the logger.\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nReturns the current maximum log level.\nMetadata about the log directive.\nSet <code>metadata</code>. Construct a <code>Metadata</code> object with …\nThe module path of the message.\nSet <code>module_path</code>\nThe module path of the message, if it is a <code>&#39;static</code> string.\nSet <code>module_path</code> to a <code>&#39;static</code> string\nConstruct new <code>RecordBuilder</code>.\nConstruct a new <code>MetadataBuilder</code>.\nSets the global logger to a <code>Box&lt;Log&gt;</code>.\nSets the global logger to a <code>&amp;&#39;static Log</code>.\nA thread-unsafe version of <code>set_logger</code>.\nSets the global maximum log level.\nA thread-unsafe version of <code>set_max_level</code>.\nThe name of the target of the directive.\nSet <code>Metadata::target</code>\nThe name of the target of the directive.\nSetter for <code>target</code>.\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nLogs a message at the trace level.\nLogs a message at the warn level.\nAn alias for <code>BuildHasherDefault</code> for use with <code>NoHashHasher</code>.\nA <code>HashMap</code> with an integer domain, using <code>NoHashHasher</code> to …\nA <code>HashSet</code> of integers, using <code>NoHashHasher</code> to perform no …\nTypes which are safe to use with <code>NoHashHasher</code>.\nFor an enabled type <code>T</code>, a <code>NoHashHasher&lt;T&gt;</code> implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApproximations of stack and heap size for both internal …\nReturns how many bytes <code>self</code> uses on the heap.\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nThe user-chosen name of the application doing the logging.\nMessage containing an Arrow payload\nLog an entity using an <code>ArrowMsg</code>.\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nA signed duration represented as nanoseconds since unix …\nContains no time at all.\nContains all time.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSometimes used as the hash of <code>None</code>.\nAn integer that is known not to equal its minimum value.\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nThe user clicked on a recording URI in the viewer.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe amount of time or sequences covered by this range.\nThe union of all rules\nInclude this entity with subtree.\nInclude this path or variable expression, but not the …\nInclude this entity, but not the subtree.\nAdds a rule to this filter.\nAdds a rule to this filter.\nInclude this entity or variable expression with subtree.\nCreates a filter that accepts everything.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nSchema and data for all control &amp; data columns.\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\nMost specific last, which means recursive first.\n“color”\nInclusive\nDoes this range fully contain the other?\nIs there any rule for this entity path?\nReturns the appropriate arrow datatype to represent this …\nRuntime asserts that an archetype has the given components.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nNo variable substitutions.\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nMatch this path or variable expression, but not children.\nMatch this path, but not children.\nMatch this path, but not children.\nExample components to be used for tests and docs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSaturating cast\nSaturating cast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nBuild a filter from a list of query expressions.\nFor time timelines.\nFor sequence timelines.\nFor instance:\nFrom an existing u64. Use this only for data conversions.\nReturns the value as a primitive type.\nPrecomputed hash of the string.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nWhether this rule includes a subtree.\nMatch this path and any entity in its subtree.\nMatch this path or variable expression and any entity in …\nMatch this path and any entity in its subtree.\nInserts multiple elements at <code>index</code> within the deque, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere in the range is this value? Returns 0-1 if within …\nIs anything under this path included (including self)?\nWhether this <code>StoreInfo</code> is the default used when a user is …\nIs this entity path explicitly excluded?\nIs this entity path explicitly included?\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\nChecks whether this results of this filter “fully contain…\nIterates the expressions in alphabetical order.\nIterate over the raw expressions of the rules, displaying …\nThe amount of time or sequences covered by this range.\ne.g. 3\nImmediately make <code>blueprint_id</code> the active blueprint for its …\nImmediately make this the active blueprint for the …\nReturns an array with the appropriate datatype.\nMake <code>blueprint_id</code> the default blueprint for its associated …\nMake this the default blueprint for the <code>app_id</code>.\nDoes this filter include the given entity path?\nWhether this rule matches the given path.\nIs there a rule for this exact entity path (ignoring …\ne.g. 11\nFind the most specific matching rule and return its effect.\nCreate a new <code>EntityPathRule</code> from a string.\nCreates a new non-min if the given value is not the …\nCreates a new temporal <code>ResolvedTimeRange</code>.\nCreates a new temporal <code>TimeInt</code>.\nCreates a new non-min without checking the value.\nCreate a new set of substitutions from a single origin.\nParse an entity path filter from a string, ignoring any …\nParse an entity path filter from a string.\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nThe returned range is guaranteed to never include …\nRemoves and returns the elements in the given <code>range</code> from …\nRemove any rule for the given entity path (ignoring …\nRemove a subtree and any existing rules that it would …\nResolve variables &amp; parse paths, ignoring any errors.\nResolve variables &amp; parse paths, returning an error if any …\nResolve variables &amp; parse paths, without any substitutions.\nThe resolved path, with all variables Resolved.\nA time-based UID that is only used to help keep track of …\nThe original rule, with unresolved variables.\nIterate over all rules in the filter.\nIterate over all rules in the filter.\nOverwrites the end bound of the range.\nOverwrites the start bound of the range.\nCreates a new entity path filter that includes only a …\nCreates a new entity path filter that includes only a …\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\nUSE ONLY FOR TESTS\nCreates a new entity path filter that includes a single …\nCreates a new entity path filter that includes a single …\ne.g. <code>a0</code> for alpha releases.\nThe union of all rules\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nTurns the resolved filter back into an unresolved filter.\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nMessage containing an Arrow payload\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nSchema and data for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nThe maximum values for all timelines across the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA unique ID for a <code>Chunk</code>.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nA unique ID for a row’s worth of data within a chunk.\nThe serialized contents of a <code>ComponentBatch</code> with …\nA column’s worth of component data.\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nExposes the object’s contents as a set of …\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nReadable name for displaying in UI.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nCalls <code>U::from(self)</code>.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nWe give an actual name to <code>Tuid</code>, and inject that name into …\nAll ones.\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA unique ID for a <code>Chunk</code>.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nA unique ID for a row’s worth of data within a chunk.\nThe serialized contents of a <code>ComponentBatch</code> with …\nA column’s worth of component data.\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nThe raw UTF8 bytes.\nExposes the object’s contents as a set of …\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nReadable name for displaying in UI.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nReturns the <code>n</code>-next logical <code>ChunkId</code>.\nReturns the <code>n</code>-next logical <code>RowId</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nWhen the <code>ChunkId</code> was created, in nanoseconds since unix …\nWhen the <code>RowId</code> was created, in nanoseconds since unix …\nCreate a new unique <code>ChunkId</code> based on the current time.\nCreate a new unique <code>RowId</code> based on the current time.\nReturns the next logical <code>ChunkId</code>.\nReturns the next logical <code>RowId</code>.\nThe number of instances of T stored in this buffer.\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>ArrowBuffer</code> that is a slice of this buffer …\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nThe total number of components in the archetype: 1 …\nClear all the fields of a <code>Clear</code>.\nPartitions the component data into multiple sub-batches.\nHelper to partition the component data into unit-length …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::is_recursive</code>.\nReturns a non-recursive clear.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Clear</code>.\nReturns a recursive clear.\nUpdate only some specific fields of a <code>Clear</code>.\nThis method makes it possible to pack multiple …\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA range of zero length exactly at the time cursor.\nPut the boundary at the current time cursor.\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\nThe range encompassing all time, from -∞ to +∞.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nReturns the correct time assuming this boundary is an end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nReturns the time assuming this boundary is a start …\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nGet the backtrace for this Error.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nThe lowest level cause of this error — this error’s …\nWrap the error value with additional context that is …\nArrow crate version\nDefines the low-level <code>Allocation</code> API for shared memory …\nStatically typed implementations of Arrow Arrays\nTypes of shared memory region\nComputation kernels on Arrow Arrays\nDefines the logical data types of Arrow arrays.\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDefines <code>ArrowError</code> for representing failures in various …\nPass Arrow objects from and to PyArrow, using Arrow’s C …\nContains the <code>RecordBatch</code> type and associated traits\nArrow Tensor Type, defined in <code>format/Tensor.fbs</code>.\nUtility functions for working with Arrow data\nCache and allocation multiple alignment size\nThe owner of an allocation. The trait implementation is …\nBuffer is always null. Unused currently in Rust …\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nDon’t preallocate inner buffers and rely on array growth …\nA generic trait for accessing the values of an <code>Array</code>\nTrait for dealing with different array builders at runtime\nA generic representation of Arrow array data which …\nBuilder for <code>ArrayData</code> type\nA thread-safe, shared reference to the Arrow array data.\nAn iterator that returns Some(T) or None, that can be used …\nA reference-counted reference to a generic <code>Array</code>\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nBinary, Utf8 and LargeUtf8 data types\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nArray builder for <code>BinaryViewArray</code>\nBuffer holds a bitmap.\nAn array of boolean values\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for creating a Buffer object.\nLayout specification for a single data type buffer\nHelper to access views of <code>GenericByteViewArray</code> (…\nDefine capacities to pre-allocate for child data or data …\nData type of the array.\nthe corresponding Arrow data type of this primitive type.\nThe data type constructor of list array. The input is the …\nThe data type constructor of listview array. The input is …\nLayout specification for a data type\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nA possibly <code>Scalar</code> <code>Array</code>\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nDictionary type\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nCompare the values at two arbitrary indices in two arrays.\nAn array of fixed size binary arrays\nBuilder for <code>FixedSizeBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of [fixed length lists], similar to JSON arrays …\nBuilder for <code>FixedSizeListArray</code>\nan iterator that returns Some(T) or None, that can be used …\nEach element is a fixed width primitive, with the given …\nA <code>PrimitiveArray</code> of <code>f16</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f32</code>\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nA <code>PrimitiveArray</code> of <code>f64</code>\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nArray builder for <code>GenericBinaryArray</code>\nan iterator that returns Some(T) or None, that can be used …\nAn array of variable length byte arrays\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nVariable-size Binary View Layout: An array of variable …\nA builder for <code>GenericByteViewArray</code>\nAn array of variable length lists, similar to JSON arrays …\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>GenericListArray</code>\nDifferent from <code>crate::GenericListArray</code> as it stores both …\nan iterator that returns Some(T) or None, that can be used …\nA <code>GenericByteArray</code> for storing <code>str</code>\nArray builder for <code>GenericStringArray</code>\nan iterator that returns Some(T) or None, that can be used …\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>LargeListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nList and LargeList data types\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nBuilder for <code>ListArray</code>\nA <code>GenericListViewArray</code> of variable size lists, storing …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value and identity for the <code>max</code> aggregation. …\nAn array of key-value maps\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nEfficiently create an ArrayData from one or more existing …\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nBuilder for <code>NullArray</code>\nThe multiplicative identity\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nan iterator that returns Some(T) or None, that can be used …\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nAn array of run-end encoded values\nA wrapper around a single value <code>Array</code> that implements <code>Datum</code>…\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nA <code>GenericByteViewArray</code> that stores utf8 data\nArray builder for <code>StringViewArray</code>\nStruct type\nAn array of structs\nBuilder for <code>StructArray</code>\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nBuilder for <code>UnionArray</code>\nVariable width, such as string data for utf8 data\nThe additive identity\nAdds a single buffer to the ArrayData’s buffers\nAdds multiple buffers to the ArrayData’s buffers\nChecked addition operation\nAdds a single child data to the ArrayData’s child data\nWrapping addition operation\nVerifies that the buffers meet the minimum alignment …\nThe concrete array definitions\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns the builder as a non-mutable <code>Any</code> reference.\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nReturns the builder as a mutable <code>Any</code> reference.\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an Array, such as an ArrayRef to …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nConvert <code>ByteView</code> to <code>u128</code> by concatenating the fields\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nReturns the <code>buffer</code> as a slice of type <code>T</code> starting at …\nThe buffer index.\nReturns the <code>Buffer</code> storing data for this <code>ArrayData</code>\nSets the buffers of the ArrayData\nA vector of buffer layout specifications, one for each …\nCreates an array data, validating all inputs\nCreates an array data, validating all inputs, and aligning …\nCreates an array data, without any validation\nDefines push-based APIs for constructing arrays\nReturns a builder to construct a <code>ArrayData</code> instance of the …\nReturns a new primitive array builder\nReturns a new boolean array builder\nReturns a new null array builder\nReturns an iterator over the bytes of this array, …\nCan contain a null bitmask\nDefines helper functions for downcasting <code>dyn Array</code> to …\nAccesses the child array for <code>type_id</code>.\nReturns a slice of children <code>ArrayData</code>. This will be non …\nSets the child data of the ArrayData\nWrite footer or termination data, then mark the writer as …\nReturns the field at <code>pos</code>.\nReturn child array whose field name equals to column_name\nReturn field names in this struct array\nReturns the fields of the struct array\nReturns child array refs of the struct array\nCompare operation\nCompare two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nCreates an array from a literal slice of values, suitable …\nReturns the buffers storing string data\nReturns a reference to the <code>DataType</code> of this array.\nReturns a reference to the <code>DataType</code> of this <code>ArrayData</code>\nCreates a new array data builder from an existing one, …\nReturns a default value of this primitive type.\nChecked division operation\nWrapping division operation\nDowncast this <code>RunArray</code> to a <code>TypedRunArray</code>\nDowncasts a <code>dyn Array</code> to a concrete type\nDowncast this dictionary to a <code>TypedDictionaryArray</code>\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDowncast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …\nGiven one or more expressions evaluating to an integer …\nGiven one or more expressions evaluating to primitive …\nDowncast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …\nReturns a reference to the <code>StructArray</code> entries of this map\n<code>Field</code> name for map entries\nExports an array to raw pointers of the C Data Interface …\nExtends the in progress array with a region of the input …\nExtends the in progress array with null elements, ignoring …\nReturns the number of non null, false values within this …\nContains declarations to bind to the C Data Interface.\nContains declarations to bind to the C Stream Interface.\nReturns the <code>Fields</code> of this <code>StructArray</code>\nBuilds the array\nBuilds the array without resetting the underlying builder.\nCreates a ArrayData from the in progress array, consuming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>BooleanArray</code> by evaluating the binary operation …\nCreates a <code>GenericListArray</code> from an iterator of primitive …\nCreates a <code>FixedSizeListArray</code> from an iterator of primitive …\nCreates a <code>GenericByteArray</code> based on an iterator of values …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a <code>GenericByteViewArray</code> based on an iterator of …\nCreates a PrimitiveArray based on an iterator of values …\nCreates a GenericBinaryArray from a vector of Optional …\nConstruct a timestamp array from a vec of <code>Option&lt;i64&gt;</code> …\nCreates a <code>PrimitiveArray</code> from an iterator of trusted …\nApplies a unary infallible function to each value in an …\nCreate a <code>BooleanArray</code> by evaluating the operation for each …\nCreates a PrimitiveArray based on a constant value with …\nCreates a GenericBinaryArray from a vector of byte slices\nConstruct a timestamp array from a vec of i64 values and …\nReturns a “compacted” version of this array\nReturns the value for this <code>Datum</code> and a boolean indicating …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the total number of bytes of memory occupied by the\nReturns the byte width of this primitive type.\nGet the data type of the array.\nGet the data type of the array.\nReturns the physical index at which the array slice ends.\nReturns index to the physical array for the given index to …\nReturns the physical indices of the input logical indices. …\nReturns the total number of the bytes of memory occupied by\nReturns the physical index at which the array slice starts.\nGet a reference to a column’s array by name.\nReturns the first <code>len</code> bytes the inline value of the view.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns <code>GenericByteBuilder</code> of this byte array for mutating …\nConsume self and returns the in progress array as …\nConverts this <code>ArrayData</code> into an <code>ArrayDataBuilder</code>\nReturns a <code>PrimitiveBuilder</code> for this array, suitable for …\nReturns the underlying data of this array\nReturns the inner array\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nDeconstruct this array into its constituent parts\nReturns <code>PrimitiveDictionaryBuilder</code> of this dictionary …\nReturns true if all data within this string array is ASCII\nReturns true if all data within this array is ASCII\nReturns true if all data within this array is ASCII\nReturns if this <code>PrimitiveArray</code> is compatible with the …\nReturns whether this array is empty.\nWhether this dictionary is empty\nReturns true if len is 0\nReturns whether this <code>ArrayData</code> is empty\nReturns whether this array is empty.\nReturns whether number of array slots is zero\nReturns whether this array is empty.\nEquality operation\nGreater than equals operation\nGreater than operation\nLess than equals operation\nLess than operation\nNot equal operation\nReturns whether the element at index <code>i</code> is null\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nCurrently exists for compatibility purposes with Arrow IPC.\nReturns whether the element at index <code>i</code> is not null\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nReturns true if zero else false\nConstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nConstructs a new iterator for iterating over the values of …\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nconstructs a new iterator\nConstructs a new iterator\nIdiomatic iterators for <code>Array</code>\nReturn the value of <code>keys</code> (the dictionary key) at index <code>i</code>, …\n<code>Field</code> name for map key\nReturns the data type of the map’s keys.\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturn an array view of the keys of this dictionary as a …\nReturns the keys of this <code>TypedDictionaryArray</code>\nReturns a reference to the keys of this map\nReturn an iterator over the keys (indexes into the …\nReturn the expected <code>DataTypeLayout</code> Arrays of this data …\nReturns the length (i.e., number of elements) of this …\nReturns the number of array slots in the builder\nThe length of the dictionary is the length of the keys …\nReturns the current length\nReturns the length (i.e., number of elements) of this …\nSets the length of the ArrayData\nReturns the length of this array.\nReturns the length of this array.\nThe length of the string/bytes.\nCalculates the logical length of the array encoded by the …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nIf <code>value</code> is present in <code>values</code> (aka the dictionary), …\nConstructs an array using the input <code>data</code>. Returns a …\nReturns a builder with capacity for <code>capacity</code> elements of …\nReturns a comparison function that compares two values at …\nCreate a view based on the given data, block id and offset.\nMatch field names of structs and lists. If set to <code>true</code>, …\nChecked remainder operation\nWrapping remainder operation\nChecked multiplication operation\nWrapping multiplication operation\nCorresponding Rust native type if available\nChecked negation operation\nWrapping negation operation\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nAttempt to create a new DictionaryArray with a specified …\nReturns a new MutableArrayData with capacity to <code>capacity</code> …\nCreates a new array data builder\nCreate a new <code>GenericListArray</code> from the provided parts\nConstruct a <code>ByteView</code> for data <code>length</code> of bytes with the …\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>BooleanArray</code> from the provided values and …\nCreate a new <code>FixedSizeBinaryArray</code> with <code>size</code> element size, …\nCreate a new <code>FixedSizeListArray</code> with <code>size</code> element size, …\nCreate a new <code>MapArray</code> from the provided parts\nCreate a new <code>NullArray</code> of the specified length\nCreate a new <code>StructArray</code> from the provided parts, …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nCreate a new <code>Scalar</code> from an <code>Array</code>\nDescribes a basic numeric array where each element has a …\nReturns a new empty ArrayData valid for <code>data_type</code>.\nDescribes arrays which have no data of their own (e.g. …\nCreates a new empty array\nCreate a new <code>StructArray</code> containing no fields\nDescribes a basic numeric array where each element has …\nCreate a new <code>BooleanArray</code> from a <code>Buffer</code> specified by <code>offset</code>…\nCreates map array from provided keys, values and …\nCreate a new <code>BooleanArray</code> from <code>&amp;[u8]</code> This method uses …\nDescribes a list view type\nCreate a new <code>GenericByteArray</code> of length <code>len</code> where all …\nReturns a new <code>ArrayData</code> valid for <code>data_type</code> containing <code>len</code> …\nCreate a new <code>GenericListArray</code> of length <code>len</code> where all …\nCreate a new <code>PrimitiveArray</code> of the given length where all …\nCreate a new <code>GenericByteViewArray</code> of length <code>len</code> where all …\nCreate a new <code>BooleanArray</code> with length <code>len</code> consisting only …\nCreate a new <code>FixedSizeBinaryArray</code> of length <code>len</code> where all …\nCreate a new <code>FixedSizeListArray</code> of length <code>len</code> where all …\nCreate a new <code>StructArray</code> of length <code>len</code> where all values …\nCreate a new <code>GenericListViewArray</code> of length <code>len</code> where all …\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nDescribes arrays which have no data of their own but may …\nCreate a new <code>Scalar</code> from <code>v</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>Scalar</code> from <code>value</code>\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nCreate a new <code>DictionaryArray</code> without performing validation\nCreate a new ArrayData instance;\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>StructArray</code> from the provided parts without …\nCreates a new <code>UnionArray</code>.\nDescribes a view type\nReads the next <code>RecordBatch</code>.\nReturns the keys of this dictionary as usize\nSets the <code>null_bit_buffer</code> of the ArrayData\nReturns the current null count\nReturns the total number of nulls in this array\nSets the null count of the ArrayData\nReturns the total number of physical null values in this …\nValidates the Decimal Array, if the value of slot is …\nReturns the null buffer of this array if any.\nReturns a reference to the null buffer of this <code>ArrayData</code> …\nSets the null buffer of the ArrayData\nReturns the number of <code>Unicode Scalar Value</code> in the string …\nReturn the number of fields in this struct array\nComputes an occupancy mask for this dictionary’s values\nReturns the offset into the underlying data used by this …\nReturns the offset of this <code>ArrayData</code>\nSets the offset of the ArrayData\nThe offset into the buffer.\nReturns a reference to the offsets of this array\nReturns a reference to the offsets of this list\nReturns a reference to the offsets of this map\nReturns the <code>offsets</code> buffer if this is a dense array\nReturns a reference to the offsets of this list\nChecked exponentiation operation\nWrapping exponentiation operation\nReturns the decimal precision of this array\nFirst 4 bytes of string/bytes data.\nReturns an iterator over the first <code>prefix_len</code> bytes of …\nReturns true if this <code>ArrayData</code> is equal to <code>other</code>, using …\nCreates a record batch from literal slice of values, …\nReinterprets this array’s contents as a different data …\nOptional row count, useful for specifying a row count for …\nReturns the run array of this <code>TypedRunArray</code>\nReturns a reference to <code>RunEndBuffer</code>\nReturns the run_ends of this <code>TypedRunArray</code>\nIdiomatic iterator for <code>RunArray</code>\nReturns the decimal scale of this array\nReturns the schema of this <code>RecordBatchReader</code>.\nShrinks the capacity of any exclusively owned buffer as …\nReturns a reference to the sizes of this list\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nCreates a zero-copy slice of itself. This creates a new …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nReturns a zero-copy slice of this array with the indicated …\nChecked subtraction operation\nWrapping subtraction operation\nReturns an iterator over the last <code>suffix_len</code> bytes of each …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nReturns an iterator that returns the values of …\nConversion methods for dates and times.\nTimezone for timestamp arrays\nReturns the timezone of this array if any\nConvert the <code>StringViewArray</code> to <code>BinaryViewArray</code>\nReturns the underlying data of this array\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code> If items …\nConvert the <code>BinaryViewArray</code> to <code>StringViewArray</code>\nReturns the number of non null, true values within this …\nbuilds a StructArray from a vector of names and arrays.\nFallibly creates a <code>GenericStringArray</code> from a …\nCreate an array from an iterable argument of byte slices.\nCreate an array from an iterable argument of sparse byte …\nCreate an array from an iterable argument of sparse byte …\nCreate a new <code>GenericByteArray</code> from the provided parts, …\nAttempt to create a new DictionaryArray with a specified …\nCreate a new ArrayData, validating that the provided …\nCreate a new <code>GenericListArray</code> from the provided parts\nCreate a new <code>PrimitiveArray</code> from the provided values and …\nAttempts to create RunArray using given run_ends (index …\nCreate a new <code>GenericByteViewArray</code> from the provided parts, …\nCreate a new <code>FixedSizeBinaryArray</code> from the provided parts, …\nCreate a new <code>FixedSizeListArray</code> from the provided parts, …\nCreate a new <code>MapArray</code> from the provided parts\nCreate a new <code>StructArray</code> from the provided parts, …\nAttempts to create a new <code>UnionArray</code>, validating the inputs …\nCreate a new <code>GenericListViewArray</code> from the provided parts\nApplies a unary fallible function to all valid values in a …\nApplies a unary fallible function to all valid values in a …\nReturns the <code>type_id</code> for the array slot at <code>index</code>.\nReturns the <code>type_ids</code> buffer for this array\nReturns the names of the types in the union.\nZero-sized types used to parameterize generic array …\nApplies a unary infallible function to a primitive array, …\nApplies an unary and infallible function to a mutable …\nApplies a unary and infallible function to the array in …\nApplies a unary and nullable function to all valid values …\n“cheap” validation of an <code>ArrayData</code>. Ensures buffers are\nValidate that the data contained within this <code>ArrayData</code> is …\nValidates values in this array can be properly interpreted …\nPerforms a full recursive validation of this <code>ArrayData</code> and …\nValidates the values stored within this <code>ArrayData</code> are valid\nValidates the values stored within this <code>ArrayData</code> are valid\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns ith value of this list array.\nReturns the primitive value at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the boolean value at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns ith value of this list array.\nReturns ith value of this map array.\nReturns the array’s value at index <code>i</code>.\nReturns ith value of this list view array.\n<code>Field</code> name for map value\nReturns value as a chrono <code>NaiveDate</code> by using …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns value as a chrono <code>NaiveDateTime</code>, handling time …\nReturns a value as a chrono <code>Duration</code>\nReturns <code>Self::value</code> formatted as a string\nReturns a value as a chrono <code>NaiveTime</code>\nReturns the raw value data\nReturns the raw value data.\nReturns the length for value at index <code>i</code>.\nReturns the length for value at index <code>i</code>.\nReturns the length for an element.\nReturns the length for an element.\nReturns the length for value at index <code>i</code>.\nReturns the offset for the element at index <code>i</code>.\nReturns the offset for value at index <code>i</code>.\nReturns the offset into the underlying values array for …\nReturns the offset for value at index <code>i</code>.\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the offset values in the offsets buffer\nReturns the size for value at index <code>i</code>.\nReturns the sizes values in the offsets buffer\nReturns a clone of the value type of this list.\nReturns a clone of the value type of this list.\nReturns a clone of the value type of this list.\nReturns the data type of the map’s values.\nReturns a clone of the value type of this list.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns ith value of this list array.\nReturns the primitive value at index <code>i</code>.\nReturns the element at index <code>i</code> without bounds checking\nReturns the boolean value at index <code>i</code>.\nReturns the element at index <code>i</code> as a byte slice.\nReturns ith value of this map array.\nReturns ith value of this list view array.\nReturns the values of this dictionary\nReturns the values of this array\nReturns a reference to the dictionary values array\nReturns the values of this <code>TypedDictionaryArray</code>\nReturns a reference to the values of this list\nReturns the values of this array\nReturns a reference to values array\nReturns the values of this <code>TypedRunArray</code>\nReturns the underlying <code>BooleanBuffer</code> holding all the …\nReturns the values of this array.\nReturns a reference to the values of this list.\nReturns a reference to the values of this map\nReturns a reference to the values of this list\nThis field only applies to the view type …\nReturns the views buffer\nSet the <code>Self::buffer_index</code> field\nSimilar to MutableArrayData::new, but lets users define the\nOverrides the <code>DataType</code> of this <code>PrimitiveArray</code>\nSet the <code>Self::offset</code> field\nReturns a Decimal array with the same data as self, with …\nConstruct a timestamp array with new timezone\nConstruct a timestamp array with an optional timezone\nConstruct a timestamp array with UTC\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nReturns a new dictionary with the same keys as the current …\nWrite a single batch to the writer.\nThe alignment required by Rust for an array of the …\nThe width of each element in bytes\nA <code>DictionaryArray</code> with the key type erased\nAn array in the arrow columnar format\nA generic trait for accessing the values of an <code>Array</code>\nA reference-counted reference to a generic <code>Array</code>\nTrait for primitive values.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets\nA <code>GenericByteViewArray</code> of <code>[u8]</code>\nAn array of boolean values\nthe corresponding Arrow data type of this primitive type.\nA <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of 128-bit fixed point decimals\nA <code>PrimitiveArray</code> of 256-bit fixed point decimals\nAn array of dictionary encoded values\nA <code>PrimitiveArray</code> of elapsed durations in microseconds\nA <code>PrimitiveArray</code> of elapsed durations in milliseconds\nA <code>PrimitiveArray</code> of elapsed durations in nanoseconds\nA <code>PrimitiveArray</code> of elapsed durations in seconds\nAn array of fixed size binary arrays\nAn array of [fixed length lists], similar to JSON arrays …\nA <code>PrimitiveArray</code> of <code>f16</code>\nA <code>PrimitiveArray</code> of <code>f32</code>\nA <code>PrimitiveArray</code> of <code>f64</code>\nA <code>GenericBinaryArray</code> for storing <code>[u8]</code>\nAn array of variable length byte arrays\nVariable-size Binary View Layout: An array of variable …\nAn array of variable length lists, similar to JSON arrays …\nDifferent from <code>crate::GenericListArray</code> as it stores both …\nA <code>GenericByteArray</code> for storing <code>str</code>\nTrue for 64 bit offset size and false for 32 bit offset …\nA <code>PrimitiveArray</code> of <code>i16</code>\nA <code>DictionaryArray</code> indexed by <code>i16</code>\nA <code>RunArray</code> with <code>i16</code> run ends\nA <code>PrimitiveArray</code> of <code>i32</code>\nA <code>DictionaryArray</code> indexed by <code>i32</code>\nA <code>RunArray</code> with <code>i32</code> run ends\nA <code>PrimitiveArray</code> of <code>i64</code>\nA <code>DictionaryArray</code> indexed by <code>i64</code>\nA <code>RunArray</code> with <code>i64</code> run ends\nA <code>PrimitiveArray</code> of <code>i8</code>\nA <code>DictionaryArray</code> indexed by <code>i8</code>\nA <code>PrimitiveArray</code> of “calendar” intervals in days and …\nA <code>PrimitiveArray</code> of “calendar” intervals in  months, …\nA <code>PrimitiveArray</code> of “calendar” intervals in whole …\nThe Arrow type of the element being accessed.\nA <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nA <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets\nA <code>GenericListArray</code> of variable size lists, storing offsets …\nA <code>GenericListViewArray</code> of variable size lists, storing …\nAn array of key-value maps\nCorresponding Rust native type for the primitive type.\nAn optional primitive value\nAn array of null values\nA type that can be used within a variable-size array to …\nPrefix for the offset size\nAn array of primitive values, of type <code>ArrowPrimitiveType</code>\nAn array of run-end encoded values\nA <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets\nA trait for Arrow String Arrays, currently three types are …\nA <code>GenericByteViewArray</code> that stores utf8 data\nAn array of structs\nA <code>PrimitiveArray</code> of milliseconds since midnight stored as …\nA <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>\nA <code>PrimitiveArray</code> of microseconds since midnight stored as …\nA <code>PrimitiveArray</code> of nanoseconds since midnight stored as …\nA <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …\nA <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …\nA <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>\nA <code>DictionaryArray</code> typed on its child values array\nA <code>RunArray</code> typed typed on its child values array\nA <code>PrimitiveArray</code> of <code>u16</code>\nA <code>DictionaryArray</code> indexed by <code>u16</code>\nA <code>PrimitiveArray</code> of <code>u32</code>\nA <code>DictionaryArray</code> indexed by <code>u32</code>\nA <code>PrimitiveArray</code> of <code>u64</code>\nA <code>DictionaryArray</code> indexed by <code>u64</code>\nA <code>PrimitiveArray</code> of <code>u8</code>\nA <code>DictionaryArray</code> indexed by <code>u8</code>\nAn array of values of varying types\nReturns the array as <code>Any</code> so that it can be downcasted to a …\nReturns a reference to the <code>DataType</code> of this array.\nReturns a default value of this primitive type.\nReturns the total number of bytes of memory occupied …\nReturns the total number of bytes of memory pointed to by …\nReturns the byte width of this primitive type.\nReturns the underlying data of this array\nReturns true if all data within this string array is ASCII\nReturns whether this array is empty.\nReturns whether the element at <code>index</code> is null according to …\nReturns <code>false</code> if the array is guaranteed to not contain …\nReturns whether the element at <code>index</code> is <em>not</em> null, the …\nConstructs a new iterator\nReturns the primitive keys of this dictionary as an <code>Array</code>\nReturns the length (i.e., number of elements) of this …\nReturns the total number of logical null values in this …\nReturns a potentially computed <code>NullBuffer</code> that represents …\nConstructs an array using the input <code>data</code>. Returns a …\nCorresponding Rust native type if available\nCreates a new empty array\nCreates a new array of <code>data_type</code> of length <code>length</code> filled …\nReturns the keys of this dictionary as usize\nReturns the total number of physical null values in this …\nReturns the null buffer of this array if any.\nReturns the offset into the underlying data used by this …\nShrinks the capacity of any exclusively owned buffer as …\nReturns a zero-copy slice of this array with the indicated …\nReturns the underlying data of this array\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>\nReturns the values of this dictionary\nCreate a new <code>DictionaryArray</code> replacing <code>values</code> with the new …\nTrait for dealing with different array builders at runtime\nBuilder for <code>BinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>BinaryArray</code>\nBuilder for <code>RunArray</code> of <code>BinaryArray</code>\nArray builder for <code>BinaryViewArray</code>\nBuilder for <code>BooleanBuffer</code>\nBuilder for <code>BooleanArray</code>\nBuilder for creating a Buffer object.\nBuffer builder for 32-bit date type.\nA 32-bit date array builder.\nBuffer builder for 64-bit date type.\nA 64-bit date array builder.\nBuffer builder for 128-bit decimal type.\nA decimal 128 array builder\nBuffer builder for 256-bit decimal type.\nA decimal 256 array builder\nBuffer builder for elaspsed time of microseconds unit.\nAn elapsed time in microseconds array builder.\nBuffer builder for elaspsed time of milliseconds unit.\nAn elapsed time in milliseconds array builder.\nBuffer builder for elaspsed time of nanoseconds unit.\nAn elapsed time in nanoseconds array builder.\nBuffer builder for elaspsed time of second unit.\nAn elapsed time in seconds array builder.\nBuilder for <code>FixedSizeBinaryArray</code>\nBuilder for <code>FixedSizeListArray</code>\nBuffer builder for 16-bit floating point type.\nA 16-bit floating point array builder.\nBuffer builder for 32-bit floating point type.\nA 32-bit floating point array builder.\nBuffer builder for 64-bit floating point type.\nA 64-bit floating point array builder.\nArray builder for <code>GenericBinaryArray</code>\nBuilder for <code>GenericByteArray</code>\nBuilder for <code>DictionaryArray</code> of <code>GenericByteArray</code>\nBuilder for <code>RunArray</code> of <code>GenericByteArray</code>\nA builder for <code>GenericByteViewArray</code>\nBuilder for <code>GenericListArray</code>\nArray builder for <code>GenericStringArray</code>\nBuffer builder for signed 16-bit integer type.\nA signed 16-bit integer array builder.\nBuffer builder for signed 32-bit integer type.\nA signed 32-bit integer array builder.\nBuffer builder for signed 64-bit integer type.\nA signed 64-bit integer array builder.\nBuffer builder for signed 8-bit integer type.\nA signed 8-bit integer array builder.\nBuffer builder for “calendar” interval in days and …\nA “calendar” interval in days and milliseconds array …\nBuffer builder “calendar” interval in months, days, …\nA “calendar” interval in months, days, and nanoseconds …\nBuffer builder for “calendar” interval in months.\nA “calendar” interval in months array builder.\nBuilder for <code>LargeBinaryArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>RunArray</code> of <code>LargeBinaryArray</code>\nBuilder for <code>LargeListArray</code>\nBuilder for <code>LargeStringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>LargeStringArray</code>\nBuilder for <code>RunArray</code> of <code>LargeStringArray</code>\nBuilder for <code>ListArray</code>\nBuilder for <code>MapArray</code>\nThe <code>Field</code> names for a <code>MapArray</code>\nBuilder for <code>NullArray</code>\nBuilder for <code>PrimitiveArray</code>\nBuilder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>RunArray</code> of <code>PrimitiveArray</code>\nBuilder for <code>StringArray</code>\nBuilder for <code>DictionaryArray</code> of <code>StringArray</code>\nBuilder for <code>RunArray</code> of <code>StringArray</code>\nArray builder for <code>StringViewArray</code>\nBuilder for <code>StructArray</code>\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in milliseconds array builder.\nBuffer builder for 32-bit elaspsed time since midnight of …\nA 32-bit elaspsed time in seconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in microseconds array builder.\nBuffer builder for 64-bit elaspsed time since midnight of …\nA 64-bit elaspsed time in nanoseconds array builder.\nBuffer builder for timestamp type of microsecond unit.\nA timestamp microsecond array builder.\nBuffer builder for timestamp type of millisecond unit.\nA timestamp millisecond array builder.\nBuffer builder for timestamp type of nanosecond unit.\nA timestamp nanosecond array builder.\nBuffer builder for timestamp type of second unit.\nA timestamp second array builder.\nBuffer builder for usigned 16-bit integer type.\nAn usigned 16-bit integer array builder.\nBuffer builder for usigned 32-bit integer type.\nAn usigned 32-bit integer array builder.\nBuffer builder for usigned 64-bit integer type.\nAn usigned 64-bit integer array builder.\nBuffer builder for usigned 8-bit integer type.\nAn usigned 8-bit integer array builder.\nBuilder for <code>UnionArray</code>\nAdvances the buffer by <code>additional</code> bits\nIncreases the number of elements in the internal buffer by …\nReturn the allocated size of this builder in bytes, useful …\nAppends a boolean <code>v</code> into the buffer\nAppends a value of type <code>T</code> into the builder, growing the …\nAppends an element (either null or non-null) to the …\nFinish the current fixed-length list array slot\nFinish the current variable-length list array slot\nFinish the current map array slot\nAppend a primitive value to the array. Return an existing …\nAppend a value to the array. Return an existing index if …\nAppends a value to this builder.\nAppend a new data block returning the new block offset\nAppend <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>\nAppends a null slot into the builder\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppends a value of type <code>T</code> into the builder N times, …\nAppends n <code>additional</code> bits of value <code>v</code> into the buffer\nAppend a value multiple times to the array. This is the …\nAppend a value multiple times to the array. This is the …\nAppends <code>n</code>, zero-initialized values\nAppend a null value into the builder.\nAppends a null element to the struct.\nAppend a null value into the builder\nAppends a null slot into the builder\nAppend a null value to the array.\nAppend a null to this <code>GenericListBuilder</code>\nAppends a null slot into the builder\nAppends a null slot into the builder\nAppends a null slot into the builder\nAppends null to the logical array encoded by the run-ends …\nAppends a null slot into the builder\nAppends null to the logical array encoded by the RunArray.\nAppends a null to this builder, encoding the null in the …\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> <code>null</code>s into the builder.\nAppends <code>n</code> no. of null’s into the builder\nAppend <code>n</code> null slots into the builder\nInfallibly append <code>n</code> null slots into the builder\nAppend an <code>Option</code> value into the builder.\nAppend an <code>Option</code> value into the builder\nAppends an <code>Option&lt;T&gt;</code> into the builder\nAppends an optional value into this <code>GenericListBuilder</code>\nAppends an <code>Option&lt;T&gt;</code> into the builder\nAppend an <code>Option</code> value into the builder\nAppends optional value to the logical array encoded by the …\nAppend an <code>Option</code> value into the builder\nAppends optional value to the logical array encoded by the …\nAppend an <code>Option</code> value into the builder repeatedly <code>count</code> …\nAppend an <code>Option</code> value into the builder repeatedly <code>count</code> …\nAppend <code>range</code> bits from <code>to_set</code>\nAppends a slice of booleans into the buffer\nAppends a slice of type <code>T</code>, growing the internal buffer as …\nAppends a slice of type <code>T</code> into the builder\nAppends a slice of type <code>T</code> into the builder\nSafety\nAppends values from a trusted length iterator.\nAppends a value into the builder.\nAppends a value into the builder\nAppends a value of type <code>T</code> into the builder\nAppends a byte slice into the builder.\nAppend a value to this <code>GenericListBuilder</code>\nAppends a value of type <code>T</code> into the builder\nInfallibly append a value to this builder\nAppends value to the logical array encoded by the run-ends …\nInfallibly append a value to this builder\nAppends value to the logical array encoded by the RunArray.\nAppends a value of type <code>T</code> into the builder <code>n</code> times\nAppends values from a slice of type <code>T</code> and a validity …\nAppends values from a slice of type <code>T</code> and a validity …\nInfallibly append a value to this builder repeatedly <code>count</code> …\nInfallibly append a value to this builder repeatedly <code>count</code> …\nAppend a view of the given <code>block</code>, <code>offset</code> and <code>length</code>\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as an non-mutable <code>Any</code> reference.\nReturns the builder as a non-mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the builder as an mutable <code>Any</code> reference.\nReturns the builder as a mutable <code>Any</code> reference.\nReturns the packed bits\nView the contents of this buffer as a slice\nReturns the packed bits\nView the contents of this buffer as a mutable slice\nBuilds this builder creating a new <code>UnionArray</code>.\nReturns the capacity of the buffer\nReturns the actual capacity (number of elements) of the …\nReturns the capacity of this builder measured in slots of …\nReturns the capacity of this builder measured in slots of …\nReturns the capacity of this builder measured in slots of …\nReturns both the key and value array builders of the map\n<code>Field</code> name for map entries\nExecutes the given command directly.\nReturns a mutable reference to the child field builder at …\nBuilds the array\nCreates a <code>BooleanBuffer</code>\nResets this builder and returns an immutable Buffer.\nBuilds the <code>GenericByteArray</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array.\nBuilds the <code>StructArray</code> and reset this builder.\nBuilds the <code>GenericByteViewArray</code> and reset this builder\nBuilds the BooleanArray and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>FixedSizeBinaryArray</code> and reset this builder.\nBuilds the <code>FixedSizeListBuilder</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>GenericListArray</code> and reset this builder.\nBuilds the <code>MapArray</code>\nBuilds the array and reset this builder.\nBuilds the NullArray and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>PrimitiveArray</code> and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>DictionaryArray</code> and reset this builder.\nCreates the RunArray and resets the builder. Panics if …\nBuilds the array and reset this builder.\nBuilds the array and reset this builder.\nBuilds the <code>DictionaryArray</code> and reset this builder.\nBuilds the array and reset this builder.\nCreates the RunArray and resets the builder. Panics if …\nBuilds the array without resetting the underlying builder.\nBuilds the BooleanBuffer without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>GenericByteArray</code> without resetting the builder.\nBuilds the <code>StructArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>GenericByteViewArray</code> without resetting the …\nBuilds the array without resetting the builder.\nBuilds the BooleanArray without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>FixedSizeBinaryArray</code> without resetting the …\nBuilds the <code>FixedSizeListBuilder</code> without resetting the …\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>GenericListArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>MapArray</code> without resetting the builder.\nBuilds the NullArray without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>PrimitiveArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nBuilds the array without resetting the builder.\nCreates the RunArray and without resetting the builder. …\nBuilds the array without resetting the builder.\nBuilds the <code>DictionaryArray</code> without resetting the builder.\nCreates the RunArray and without resetting the builder. …\nBuilds the array without resetting the builder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>StructBuilder</code> from <code>Fields</code> and <code>capacity</code>\nGets a bit in the buffer at <code>index</code>\nReturns the value at the given index Useful if we want to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns the boxed builder as a box of <code>Any</code>.\nReturns true if empty\nReturns whether the internal buffer is empty.\nReturns whether number of array slots is zero\n<code>Field</code> name for map key\nReturns the key array builder of the map\nReturns the number of array slots in the builder\nReturns the length of the buffer\nReturns the current number of array elements in the …\nReturns the number of binary slots in the builder\nReturns the number of array slots in the builder.\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the number of array slots in the builder\nReturns the length of logical array encoded by the …\nReturns the number of array slots in the builder\nReturns the length of logical array encoded by the …\nReturns a builder with capacity for <code>capacity</code> elements of …\nCreate a view based on the given data, block id and offset.\nCreates a new <code>BooleanBufferBuilder</code>\nCreates a new builder with initial capacity for <em>at least</em> …\nCreates a new <code>GenericByteBuilder</code>.\nCreates a new <code>StructBuilder</code>\nCreates a new <code>GenericByteViewBuilder</code>.\nCreates a new boolean builder\nCreates a new <code>FixedSizeBinaryBuilder</code>\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nCreates a new <code>GenericListBuilder</code> from a given values array …\nCreates a new <code>MapBuilder</code>\nCreates a new null builder\nCreates a new primitive array builder\nCreates a new <code>PrimitiveDictionaryBuilder</code>.\nCreates a new <code>PrimitiveRunBuilder</code>\nCreates a new <code>GenericByteDictionaryBuilder</code>\nCreates a new <code>GenericByteRunBuilder</code>\nCreates a new dense array builder.\nCreates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …\nCreates a new builder from a <code>MutableBuffer</code>\nCreates a new  <code>GenericByteBuilder</code> from buffers.\nCreates a new primitive array builder from buffers\nCreates a new <code>PrimitiveDictionaryBuilder</code> from existing …\nCreates a new <code>PrimitiveDictionaryBuilder</code> from the provided …\nCreates a new sparse array builder.\nCreates a new <code>GenericByteDictionaryBuilder</code> from a keys …\nReturns the number of fields for the struct this builder …\nReturns the current offsets buffer as a slice\nReturns the current offsets buffer as a slice\nQueues the given command for further execution.\nReserve space to at least <code>additional</code> new bits. Capacity …\nReserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.\nResizes the buffer, either truncating its contents (with …\nSets a bit in the buffer at <code>index</code>\nReturns the current values buffer and null buffer as a …\nPerforms a set of actions within a synchronous update.\nTruncates the builder to the given length\nShorten this BufferBuilder to <code>len</code> items\nTry to append a view of the given <code>block</code>, <code>offset</code> and <code>length</code>\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a mutable slice\nReturns the current null buffer as a mutable slice\n<code>Field</code> name for map value\nReturns the length of the list\nReturns the child array builder as a mutable reference.\nReturns the child array builder as a mutable reference.\nReturns the value array builder of the map\nReturns the child array builder as an immutable reference\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current dictionary values buffer as a slice\nReturns the current values buffer as a mutable slice\nReturns the current dictionary values buffer as a mutable …\nOverride the size of buffers to allocate for holding …\nCreates a new <code>GenericByteBuilder</code>.\nCreates a new <code>GenericByteViewBuilder</code> with space for …\nCreates a new boolean builder with space for <code>capacity</code> …\nCreates a new <code>FixedSizeBinaryBuilder</code>, <code>capacity</code> is the …\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nCreates a new <code>GenericListBuilder</code> from a given values array …\nCreates a new <code>MapBuilder</code> with capacity\nCreates a new null builder with space for <code>capacity</code> …\nCreates a new primitive array builder with capacity no of …\nCreates a new <code>PrimitiveDictionaryBuilder</code> with the provided …\nCreates a new <code>PrimitiveRunBuilder</code> with the provided …\nCreates a new <code>GenericByteDictionaryBuilder</code> with the …\nCreates a new <code>GenericByteRunBuilder</code> with the provided …\nCreates a new dense array builder with capacity.\nCreates a new sparse array builder  with capacity.\nBy default <code>PrimitiveBuilder</code> uses …\nDeduplicate strings while building the array\nOverride the field passed to <code>FixedSizeListArray::new</code>\nOverride the field passed to <code>GenericListArray::new</code>\nSet a fixed buffer size for variable length strings\nSets the precision and scale\nSets the timezone\nSets an optional timezone\nOverride the field passed to <code>MapBuilder::new</code>\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>BinaryViewArray</code> panicking if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> panicking if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an Array, such as an ArrayRef to …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to <code>MapArray</code>…\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> panicking if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nDowncasts a <code>dyn Array</code> to a concrete type\nABI-compatible struct for ArrowArray from C Data Interface …\nABI-compatible struct for <code>ArrowSchema</code> from C Data Interface\nReturns the buffer at the provided index\nReturns the child at the provided index\nReturns the child of this schema at <code>index</code>.\nReturns an iterator to the schema’s children.\nReturns the dictionary if any\nReturns the reference to the underlying dictionary of the …\nFor dictionary-encoded types, returns whether the ordering …\ncreate an empty <code>FFI_ArrowArray</code>, which can be used to …\nCreate an empty <code>FFI_ArrowSchema</code>\nExports an array to raw pointers of the C Data Interface …\nReturns the flags of this schema.\nReturns the format of this schema.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport ArrayData from the C Data Interface\nImport ArrayData from the C Data Interface\nTakes ownership of the pointed to <code>FFI_ArrowArray</code>\nTakes ownership of the pointed to <code>FFI_ArrowSchema</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether the array is empty\nWhether the array has been released\nthe length of the array\nFor map types, returns whether the keys within each map …\nReturns the metadata in the schema as <code>Key-Value</code> pairs\nReturns the name of this schema.\ncreates a new <code>FFI_ArrowArray</code> from existing data.\nthe null count of the array\nReturns the null count, checking for validity\nReturns if the field is semantically nullable, regardless …\nReturns the number of buffers\nReturns the number of children\nthe offset of the array\nSet the null count of the array\nExport to the C Data Interface\nSee CDataInterface docs\ncreate a new <code>FFI_ArrowSchema</code>. This fails if the fields’ …\nSet the flags of the schema\nAdd metadata to the schema\nSet the name of the schema\nA <code>RecordBatchReader</code> which imports Arrays from …\nABI-compatible struct for <code>ArrayStream</code> from C Stream …\nCreates a new empty FFI_ArrowArrayStream. Used to import …\nExports a record batch reader to raw pointer of the C …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes ownership of the pointed to <code>FFI_ArrowArrayStream</code>\nCreates a new <code>ArrowArrayStreamReader</code> from a raw pointer of …\nC function to get the error from last operation on the …\nC function to get next array from the stream\nC function to get schema from the stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FFI_ArrowArrayStream</code>.\nPrivate data used by the stream\nC function to release the stream\nCreates a new <code>ArrowArrayStreamReader</code> from a …\nAn iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nThe <code>RunArrayIter</code> provides an idiomatic way to iterate over …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of microseconds in a day\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of nanoseconds in a day\nNumber of seconds in a day\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>Duration</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nFormats the decimal value with the provided precision and …\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nA slice-able <code>Buffer</code> containing bit-packed booleans\nBuffer represents a contiguous memory region that can be …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nIncreases the offset of this buffer by <code>offset</code>\nReturns a mutable raw pointer to this buffer’s internal …\nReturns a pointer to the start of this buffer.\nReturns a raw pointer to this buffer’s internal memory …\nReturns the byte slice stored in this buffer\nReturns the data stored in this buffer as a slice.\nReturns the data stored in this buffer as a mutable slice.\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a slice of this buffer starting at a certain bit …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nReturns the underlying <code>Buffer</code>\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nReturns the capacity of this buffer. For externally owned …\nReturns the total capacity in this buffer. The invariant …\nClear all existing data from this buffer.\nInvokes <code>f</code> with values <code>0..len</code> collecting the boolean …\nInvokes <code>f</code> with indexes <code>0..len</code> collecting the boolean …\nReturns true if all nulls in <code>other</code> also exist in self\nReturns the number of 1-bits in this buffer.\nReturns the number of set bits in this buffer\nReturns the number of 1-bits in this buffer, starting from …\nReturns the pointer to the start of the buffer without the …\nReturns a new <code>NullBuffer</code> where each bit in the current …\nExtends this buffer from a slice of items that can be …\nExtends the buffer by <code>additional</code> bytes equal to <code>0u8</code>, …\nFreezes this buffer and return an immutable version of it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAuxiliary method to create a new Buffer\nCreates a buffer from an existing memory region. Ownership …\nAllocates a new MutableBuffer with <code>len</code> and capacity to be …\nCreate a new <code>OffsetBuffer</code> from the iterator of slice …\nCreates a buffer from an existing aligned memory region …\nInitializes a Buffer from a slice of items.\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nCreates a <code>MutableBuffer</code> from a boolean <code>Iterator</code> with a …\nCreate a <code>Buffer</code> from the provided <code>Vec</code> without copying\nCreate a <code>MutableBuffer</code> from the provided <code>Vec</code> without …\nReturns the physical index at which the logical array ends\nPerforms a binary search to find the physical index for …\nReturns the physical index at which the logical array …\nReturns the inner <code>ScalarBuffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns <code>MutableBuffer</code> for mutating the buffer if this …\nReturns <code>Vec</code> for mutating the buffer\nReturns whether the buffer is empty.\nReturns whether this buffer is empty or not.\nReturns true if this <code>BooleanBuffer</code> is empty\nReturns true if this <code>NullBuffer</code> is empty\nReturns true if this buffer is empty\nReturns <code>true</code> if the value at <code>idx</code> is null\nReturns <code>true</code> if the bit at index <code>i</code> is set\nReturns <code>true</code> if the value at <code>idx</code> is not null\nReturns an iterator over the bits in this <code>BooleanBuffer</code>\nReturns an iterator over the bits in this <code>NullBuffer</code>\nReturns the number of bytes in the buffer\nReturns the length (the number of bytes written) in this …\nReturns the length of this <code>BooleanBuffer</code> in bits\nReturns the length of this <code>NullBuffer</code>\nReturns the logical length of the run-ends stored by this …\nReturns the maximum run-end encoded in the underlying …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nAllocate a new MutableBuffer with initial capacity to be …\nCreate a new <code>ScalarBuffer</code> from a <code>Buffer</code>, and an <code>offset</code> and …\nCreate a new <code>BooleanBuffer</code> from a <code>Buffer</code>, an <code>offset</code> and …\nCreate a new <code>NullBuffer</code> computing the null count\nCreate a new <code>RunEndBuffer</code> from a <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>OffsetBuffer</code> containing a single 0 value\ncreates a new MutableBuffer with capacity and length …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nCreate a new <code>NullBuffer</code> with the provided <code>buffer</code> and …\nCreate a new <code>RunEndBuffer</code> from an <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>OffsetBuffer</code> containing <code>len + 1</code> <code>0</code> values\nReturns the null count for this <code>NullBuffer</code>\nReturns the offset of this <code>BooleanBuffer</code> in bits\nReturns the offset of this <code>NullBuffer</code> in bits\nReturns the logical offset into the run-ends stored by …\nReturns true if this <code>OffsetBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>Buffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>ScalarBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>BooleanBuffer</code> is equal to <code>other</code>, …\nReturns the offset, in bytes, of <code>Self::ptr</code> to <code>Self::data</code>\nExtends the buffer with a new item, increasing its …\nExtends the buffer with a new item, without checking for …\nEnsures that this buffer has at least <code>self.len + additional</code>…\nResizes the buffer, either truncating its contents (with …\nReturns an iterator over the set bit positions in this …\nSafety\nEnsure that <code>count</code> bytes from <code>start</code> contain zero bits\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nFree up unused memory.\nTried to shrink the capacity of the buffer as much as …\nShrinks the capacity of the buffer as much as possible. …\nFree up unused memory.\nFree up unused memory.\nFree up unused memory.\nFree up unused memory.\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nReturns a new Buffer that is a slice of this buffer …\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nSlices this <code>BooleanBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>NullBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>RunEndBuffer</code> by the provided <code>offset</code> and <code>length</code>\nReturns a new Buffer that is a slice of this buffer …\nReturns a <code>Buffer</code> containing the sliced contents of this …\nTruncates this buffer to <code>len</code> bytes\nCalls the provided closure for each index in this null …\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nView buffer as a slice of a specific type.\nView buffer as a immutable slice of a specific type.\nView this buffer as a mutable slice of a specific type.\nComputes the union of the nulls in two optional <code>NullBuffer</code>\nReturns a <code>BitIndexIterator</code> over the valid indices in this …\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nReturns the packed validity of this <code>NullBuffer</code> not …\nReturns the boolean value at index <code>i</code>.\nReturns the boolean value at index <code>i</code>.\nReturns the packed values of this <code>BooleanBuffer</code> not …\nReturns the values of this <code>RunEndBuffer</code> not including any …\nSet the bits in the range of <code>[0, end)</code> to 0 (if <code>val</code> is …\nAllocate a new MutableBuffer with initial capacity to be …\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nA trait for Arrow String Arrays, currently three types are …\nOptions that define how <code>take</code> should behave\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nSet this sort options to sort in ascending order\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nConstruct the final <code>FilterPredicate</code>\nReturns a prepared function optimized to filter multiple …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nlexicographically compare values at the wrapped columns …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nPerform SQL <code>CONTAINS(left, right)</code>\nNumber of rows being selected based on this <code>FilterPredicate</code>\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nSet this sort options to sort in descending order\nWhether to sort in descending order\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nPerform SQL <code>ENDSWITH(left, right)</code>\nReturns a filtered <code>values</code> Array where the corresponding …\nSelects rows from <code>values</code> based on this <code>FilterPredicate</code>\nReturns a filtered RecordBatch where the corresponding …\nFormatting options when casting from temporal types to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")