searchState.loadedDescShard("re_renderer", 0, "Rerun’s renderer.\nThis format is used for space-efficient color …\nLabel for resources. Optimized out in release builds.\nDepth offset used to resolve z-fighting between 2D …\nThe <code>FileResolver</code> handles both resolving import clauses and …\nA file server capable of watching filesystem events in the …\nA very limited filesystem, just enough for our internal …\nIdentifier used to identify a buffer upon retrieval of the …\nsRGB gray gradient = perceptually even\nHue, saturation, value, alpha. All in the range [0, 1]. No …\nA pre-parsed import clause, as in <code>#import &lt;something&gt;</code>.\nBuilder for a vector of line strips, making it easy to …\nWhat outline (if any) should be drawn.\nAn ugly color that is planned to be replaced before making …\nCombination of <code>PickingLayerObjectId</code> and …\nThe second 64bit of the picking layer.\nThe first 64bit of the picking layer.\nManages the rendering of the picking layer pass, its …\nBuilder for point clouds, making it easy to create …\nType erased draw data that can be submitted directly to …\nThe recommended <code>FileResolver</code> type for the current …\nA 2D rectangle with float coordinates.\nA 2D rectangle with integer coordinates.\nDefines a transformation from a rectangular region of …\nAny resource involving wgpu rendering which can be re-used …\n0-1 linear space <code>RGBA</code> color with premultiplied alpha.\nRGBA color in sRGB gamma space, with separate/unmultiplied …\nSpecifies where to look for imports when both absolute and …\nA size of something in either scene units or ui points.\nalpha 0-1. A negative value signifies an additive color …\nA human-readable summary about an adapter\nReturns an additive version of self\nReturn an additive version of this color (alpha = 0)\nHigh level GPU memory allocators.\nBlend two colors, so that <code>self</code> is behind the argument.\nPremultiplied RGBA color for the first outline layer.\nPremultiplied RGBA color for the second outline layer.\nReturns a gamma-space sRGB in 0-255 range. This is a …\nReturns sRGB polynomial approximation from Inferno color …\nReturns sRGB polynomial approximation from Magma color …\nReturns sRGB polynomial approximation from Plasma color …\nReturns sRGB polynomial approximation from Turbo color …\nReturns sRGB polynomial approximation from Viridis color …\nAll directories currently in the search path, in …\nThe size of the rectangle.\nThe size of the rectangle. Supposed to be positive.\nThis module implements one half of our cross-platform …\nFrame index used for <code>wgpu::Device::on_uncaptured_error</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransparent black\nParses a color from a hex string.\nFrom <code>sRGBA</code> with premultiplied alpha.\nFrom linear RGBA with premultiplied alpha\nFrom <code>sRGBA</code> WITHOUT premultiplied alpha.\nFrom linear RGBA without premultiplied alpha\nFrom <code>sRGBA</code> with premultiplied alpha\nFrom <code>sRGBA</code> without premultiplied alpha\nTransparent white\nA handle to the filesystem being used. Generally a …\nA handle to the filesystem being used. Generally a …\nMultiply with 0.5 to make color half as opaque, …\nMultiply with 127 to make color half as opaque, …\nReturns the recommended filesystem handle for the current …\nGlobal bindings, always bound to 0 bind group slot zero. …\nReturns an sRGB gray value, assuming <code>t</code> is normalized.\nhue 0-1\nA macro to read the contents of a file on disk, and …\nCreate a shader module using the <code>include_file!</code> macro and …\nList of unfinished queue submission via this context.\nHow perceptually intense (bright) is the color?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the alpha=0 ?\nIs the alpha=0 ?\nLerp this color towards <code>other</code> by <code>t</code> in gamma space.\nMultiply with 0.5 to make color half as opaque in linear …\nThe corner with the smallest coordinates.\nThe corner with the smallest coordinates.\nFast gamma-space multiplication.\nMultiply with e.g. 0.5 to make us half transparent\nReturns the recommended <code>FileResolver</code> for the current …\nOutline radius for both layers in pixels. Fractional …\nPad <code>RGB</code> to <code>RGBA</code> with the given alpha.\nThe path being imported, as-is: neither canonicalized nor …\nBuffer for picking instance id - every strip gets its own …\nThe full scene.\nThe region of the scene that should be visible.\nResource managers are concerned with mapping (typically) …\nsaturation 0-1\nThe search path that we will go through when an import …\nThe search path that we will go through when an import …\nPremultiplied RGBA\nPremultiplied RGBA\nFormats the color as a hex string.\nConverts to floating point values in the range 0-1 without …\nReturns an opaque version of self\nReturns an opaque version of self\nTo linear space rgba in 0-1 range.\nunmultiply the alpha\nTo gamma-space 0-255.\nunmultiply the alpha\nPremultiplied RGBA\nPremultiplied RGBA\nError tracker used for <code>top_level_error_scope</code> and …\nTransformation utilities.\nvalue 0-1\nExplicitly padded and/or aligned types following wgsl …\nWgpu resource pools are concerned with handling low level …\nInternal chunk of the staging belt.\nEfficiently performs many buffer writes by sharing and …\nA sub-allocated staging buffer that can be written to.\nAll allocations of this allocator will be aligned to at …\nMarker for the type whose alignment and size requirements …\nChunks which are CPU write at the moment.\nFills the buffer with n instances of an element.\nRecall all of the closed buffers back to be reused.\nCaller needs to make sure that there is enough space.\nAllocates a cpu writable buffer for <code>num_elements</code> instances …\nMemory as slice.\nPrepare currently mapped buffers for use in a submission.\nTotal number of elements that the buffer can hold.\nMinimum size for new buffers.\nChunks which are GPU read at the moment.\nCopies the entire buffer to another buffer and drops it.\nCopies all so far written data to a rectangle on a single …\nCopies all so far written data to the first layer of a 2D …\nPushes several elements into the buffer.\nPushes a slice of elements into the buffer.\nChunks that are back from the GPU and ready to be mapped …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if no elements have been pushed into the buffer so …\nCreate a cpu-write &amp; gpu-read staging belt.\nThe number of elements pushed into the buffer so far.\nPushes a single element into the buffer and advances the …\nMove all chunks that the GPU is done with (and are now …\nFree chunks are received here to be put on <code>self.free_chunks</code>…\nThe number of elements that can still be pushed into the …\nWhen closed chunks are mapped again, the map callback …\nStarting at this offset the buffer is unused.\nRange in T elements in <code>write_view</code> that haven’t been …\nWrite view into the relevant buffer portion.\nUtility for writing data to a dynamically sized “data …\nBuffer in which data is currently written.\nFills the data texture with n instances of an element.\nBuffers that need to be transferred to the data texture in …\nThe number of elements that can be written without …\nEnsure invariant that the active buffer has some remaining …\nPushes a slice of elements into the data texture.\nSchedules copies of all previous writes to this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether no elements have been written at all.\nThe number of elements written so far.\nMaximum width for data textures.\nMaximum number of elements that can be written to a single …\nCreates a new <code>DataTextureSource</code> with the given …\nThe number of elements that can be written without …\nEnsures that there’s space internally for at least …\nInternal chunk of the staging belt.\nEfficiently performs many buffer reads by sharing and …\nA reserved slice for GPU readback.\nIdentifier used to identify a buffer upon retrieval of the …\nType used for storing user data on the gpu readback belt.\nAll allocations of this allocator will be aligned to at …\nChunks for which the GPU writes are scheduled, but we haven…\nPrepare used buffers for CPU read.\nCaller needs to make sure that there is enough space.\nAllocates a Gpu writable buffer &amp; cpu readable buffer with …\nShould be called at the beginning of a new frame.\nMinimum size for new buffers.\nCurrent frame index, used for keeping track of how old …\nChunks that have been unmapped and are ready for writing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast frame this chunk was received, i.e. the last time a …\nCreate a ring buffer for efficient &amp; easy gpu memory …\nAll ranges that are currently in use, i.e. there is a GPU …\nReads multiple textures into the same buffer.\nPopulates the buffer with data from a single layer of a 2D …\nTry to receive a pending data readback with the given …\nCheck if any new chunks are ready to be read.\nChunks that are currently mapped and ready for reading by …\nChunks are received here are ready to be read by the CPU.\nWhen a chunk mapping is successful, it is moved to this …\nOffset from which on the buffer is unused.\nwgpu requires uniform buffers to be aligned to up to 256 …\nSee <code>create_and_fill_uniform_buffer</code>.\nUtility for fast &amp; efficient creation of uniform buffers …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRGBA color in sRGB gamma space, with separate/unmultiplied …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nsRGB gray gradient = perceptually even\nReturns a gamma-space sRGB in 0-255 range. This is a …\nReturns sRGB polynomial approximation from Inferno color …\nReturns sRGB polynomial approximation from Magma color …\nReturns sRGB polynomial approximation from Plasma color …\nReturns sRGB polynomial approximation from Turbo color …\nReturns sRGB polynomial approximation from Viridis color …\nReturns the argument unchanged.\nReturns an sRGB gray value, assuming <code>t</code> is normalized.\nCalls <code>U::from(self)</code>.\nCapabilities of a given device.\nDevice tiers <code>re_renderer</code> distinguishes.\nFull support of WebGPU spec without additional feature …\nLimited feature support as provided by WebGL and some …\nType of Wgpu backend.\nBackend implemented via wgpu-core.\nWgpu backend type.\nCheck whether the given downlevel caps are sufficient for …\nDevice descriptor compatible with the given device tier.\nRequired features for the given device tier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPicks the highest possible tier for a given adapter.\nPicks the highest possible tier for a given adapter, but …\nReturns an instance descriptor with settings preferred by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWgpu limits required by the given device tier.\nMaximum buffer size in bytes.\nMaximum texture dimension in pixels in both width and …\nGenerous parsing of a graphics backend string.\nDownlevel features required by the given tier.\nSelects an adapter for testing, preferring software …\nWhether the current device tier supports reading back …\nWhether the current device tier supports sampling from …\nBackends that are officially supported by <code>re_renderer</code>.\nReturns an instance descriptor that is suitable for …\nValidates that the given backend is applicable for the …\nChunk size for our cpu-&gt;gpu buffer manager.\nChunk size for our gpu-&gt;cpu buffer manager.\nLimit maximum number of in flight submissions to this …\nAny resource involving wgpu rendering which can be re-used …\nStruct owning <em>all</em> <code>Renderer</code>. <code>Renderer</code> are created lazily …\nFrame idx used before starting the first frame.\nReturns the global frame index of the active frame.\nA human-readable summary about an adapter\nCall this at the end of a frame but before submitting …\nCommand encoder for all commands that should go in before …\nCall this at the beginning of a new frame.\nReturns the device’s capabilities.\nIndex of this frame. Is incremented for every render frame.\nFrame index used for <code>wgpu::Device::on_uncaptured_error</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the global encoder for a frame. Only valid within a …\nGlobal bindings, always bound to 0 bind group slot zero. …\nList of unfinished queue submission via this context.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of view builders created in this frame …\nNumber of view builders created in this frame so far.\nReturns the final output format for color (i.e. the surface…\nRead access to renderers.\nGets a renderer with the specified type, initializing it …\nTop level device error scope, created at startup and …\nError tracker used for <code>top_level_error_scope</code> and …\nLabel for resources. Optimized out in release builds.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDepth offset used to resolve z-fighting between 2D …\nBackground, rendering where depth wasn’t written.\nDrawn when compositing with the main target.\nDrawn when compositing with the main target, but for …\nDetermines a (very rough) order of rendering and describes …\nOpaque objects, performing reads/writes to the depth …\nRender mask for things that should get outlines.\nEverything that can be picked with GPU based picking.\nTransparent objects, performing reads of the depth buffer, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines as postprocessing effect.\nGPU driven picking.\nEasy screenshot taking.\nFormat of the outline mask target.\nWhat outline (if any) should be drawn.\nHolds two pairs of pixel coordinates (one for each layer).\nPremultiplied RGBA color for the first outline layer.\nPremultiplied RGBA color for the second outline layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault MSAA state for the outline mask target.\nNumber of MSAA samples used for the outline mask target.\nOutline radius for both layers in pixels. Fractional …\nUses current outline and falls back to <code>other</code> if current is …\nKeep in sync with <code>jumpflooding_step.wgsl</code>\nAll this padding hurts. <code>step_width</code> be a <code>PushConstant</code> but …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUtility for copying a depth texture when it can’t be …\nThe depth format used for the picking layer - f32 makes it …\nThe texture format used for the picking layer.\nCombination of <code>PickingLayerObjectId</code> and …\nThe second 64bit of the picking layer.\nThe first 64bit of the picking layer.\nManages the rendering of the picking layer pass, its …\nGPU retrieved &amp; processed picking data result.\nThere’s two layers of workarounds here:\nType used as user data on the gpu readback belt.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew picking layer for a given screen.\nReturns the oldest received picking results for a given …\nReturns the picked picking id.\nReturns the picked world position.\nPicking depth data for the requested rectangle.\nPicking id data for the requested rectangle.\nPicking rect supplied on picking request. Describes the …\nUser data supplied on picking request.\nTransforms a NDC position on the picking rect to a world …\nType used as user data on the gpu readback belt.\nThe texture format used for screenshots.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the oldest received screenshot results for a given …\nFuture utility copied from Bevy …\nKeeps track of wgpu errors and de-duplicates messages …\nDescription of the error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogs a wgpu error to the tracker.\nHandles an async error, calling <code>ErrorTracker::handle_error</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFrame index for frame on which this error was last logged.\nCalled by the renderer context when the last error scope …\nConsumes the future, polls it once, and immediately …\nAn error with some extra deduplication logic baked in.\nA <code>wgpu_core::ContextError</code> with hashing and equality …\nReturns the argument unchanged.\nE.g. to implement <code>DedupableError</code> for u32 + u64:\nCalls <code>U::from(self)</code>.\nTries downcasting a given value into the specified …\nWgpu device error scope for all filters that auto closes …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>FileResolver</code> handles both resolving import clauses and …\nA pre-parsed import clause, as in <code>#import &lt;something&gt;</code>.\nThe recommended <code>FileResolver</code> type for the current …\nSpecifies where to look for imports when both absolute and …\nAll directories currently in the search path, in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA handle to the filesystem being used. Generally a …\nA handle to the filesystem being used. Generally a …\nInsert a path into search path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the directories in the search …\nReturns the recommended <code>FileResolver</code> for the current …\nThe path being imported, as-is: neither canonicalized nor …\nPush a path to search path.\nThe search path that we will go through when an import …\nThe search path that we will go through when an import …\nThe global <code>FileServer</code>.\nA file server capable of watching filesystem events in the …\nCoalesces all filesystem events since the last call to …\nReturns the argument unchanged.\nReturns a reference to the global <code>FileServer</code>.\nReturns a mutable reference to the global <code>FileServer</code>.\nCalls <code>U::from(self)</code>.\nStops watching for file events at the given <code>path</code>.\nStarts watching for file events at the given <code>path</code>.\nA very limited filesystem, just enough for our internal …\nThe global <code>MemFileSystem</code>.\nA <code>FileSystem</code> implementation backed by an hash map.\nA <code>FileSystem</code> implementation that simply delegates to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the global <code>MemFileSystem</code>.\nReturns the recommended filesystem handle for the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMirrors the GPU contents of a frame-global uniform buffer.\nCamera direction in world space. Same as …\nCamera position in world space.\nCreates a bind group that follows the global bind group …\n<code>re_renderer</code> defined device tier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor perspective: Multiply this with a camera distance to …\nHow many pixels there are per point. I.e. the UI zoom …\n<code>(tan(fov_y / 2) * aspect_ratio, tan(fov_y /2))</code>, i.e. half …\nLike <code>GpuMeshInstance</code>, but for CPU sided usage in a <code>CpuModel</code>…\nA collection of meshes &amp; mesh instances on the CPU.\nKey for identifying a cpu mesh in a model.\nLike <code>GpuMeshInstance</code>, but for CPU sided usage in a <code>CpuModel</code>…\nA collection of meshes &amp; mesh instances on the CPU.\nKey for identifying a cpu mesh in a model.\nAdds a new <code>CpuMesh</code> to the model, creating a single …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CpuModel</code> from a single <code>CpuMesh</code>, creating a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entire model into a serious of mesh instances …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads both gltf and glb into the mesh &amp; texture manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a Wavefront .obj file into the mesh &amp; texture manager.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad a STL .stl file into the mesh manager.\nBuilder for a vector of line strips, making it easy to …\nAdd 2D rectangle outlines with axis along X and Y.\nAdd box outlines.\nAdd box outlines from a unit cube transformed by <code>transform</code>.\nAdd rectangle outlines.\nAdd 2D rectangle outlines.\nAdds a single 3D line segment connecting two points.\nAdds a single 2D line segment connecting two points. Uses …\nAdds a series of unconnected 3D line segments.\nAdds a series of unconnected 2D line segments.\nAdds a 3D series of line connected points.\nAdds a 2D series of line connected points.\nStart of a new batch.\n<code>num_vertices_added</code> excludes start sentinel.\nSets the depth offset for the entire batch.\nAdds (!) flags to the line strip.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinalizes the builder and returns a line draw data with …\nSets an outline mask for every element in the batch.\nSets an individual outline mask ids. Note that this has a …\nBuffer for picking instance id - every strip gets its own …\nSets the picking object id for every element in the batch.\nBoosts the size of the points by the given amount of …\nReturns number of strips that can be added without …\nReturns number of vertices that can be added without …\nSets the length factor as multiple of a line’s radius …\nSets the width factor as multiple of a line’s radius …\nSets the <code>world_from_obj</code> matrix for the <em>entire</em> batch.\nBase color texture, also known as albedo. (not optional, …\nFactor applied to the decoded albedo color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex range within the owning <code>CpuMesh</code> that should be …\nIndex range within the owning <code>CpuMesh</code> that should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvery mesh has at least one material.\nDefines how mesh vertices are built.\nNon-empty array of vertex triangle indices.\nBuffer for all vertex data, subdivided in several sections …\nPer-vertex albedo color. Must be equal in length to …\nMust be equal in length to <code>Self::vertex_positions</code>. Use …\nNon-empty array of vertex positions.\nMust be equal in length to <code>Self::vertex_positions</code>.\nKeep in sync with <code>MaterialUniformBuffer</code> in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNext vertex attribute index that can be used for another …\nVertex buffer layouts describing how vertex data should be …\nBuilder for point clouds, making it easy to create …\nAdd several 3D points\nAdds several 2D points (assumes Z=0). Uses an …\nStart of a new batch.\nSets the depth offset for the entire batch.\nAdds (!) flags for this batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinalizes the builder and returns a point cloud draw data …\nSets an outline mask for every element in the batch.\nSets the picking object id for the current batch.\nPushes additional outline mask ids for a specific range of …\nBoosts the size of the points by the given amount of …\nReturns number of points that can be added without …\nSets the <code>world_from_obj</code> matrix for the <em>entire</em> batch.\nType erased draw data that can be submitted directly to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 2D rectangle with float coordinates.\nA 2D rectangle with integer coordinates.\nThe unit rectangle, defined as (0, 0) - (1, 1).\nThe size of the rectangle.\nThe size of the rectangle. Supposed to be positive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe corner with the smallest coordinates.\nThe corner with the smallest coordinates.\nDo BGR(A)-&gt;RGB(A) conversion is in the shader.\nHow to map the normalized <code>.r</code> component to a color.\nDescribes a texture and how to map it to a color.\nDebug overlay for quick &amp; dirty display of texture …\nGPU sided data used by a <code>Renderer</code> to draw things to the …\nApply the given function.\nThe type of generic skybox to render.\nData that is valid for a batch of line strips.\nA line drawing operation. Encompasses several lines, each …\nProperty flags for a line strip\nColormapping is off. Take the .r color and splat onto rgb.\nColormapping is off. Keep rgb as is.\nProperty flags for a point batch\nData that is valid for a batch of point cloud points.\nA point cloud drawing operation. Expected to be recreated …\nA Renderer encapsulate the knowledge of how to render a …\nDescribes how the color information is encoded in the …\nLook up the color in this texture.\nTexture filter setting for magnification (a texel covers …\nTexture filter setting for minification (several texels …\nConfiguration for the world grid renderer.\nDraw data for a world grid renderer.\nDefines an outline mask for an individual vertex ranges …\nDefines an outline mask for an individual vertex ranges.\nPer-instance (as opposed to per-material/mesh!) tint color …\nThe color of the grid lines.\nFor any one-component texture, you need to supply a color …\nConfigures color mapping mode.\nTexture that fills the rectangle\nDecode 0-1 sRGB gamma values to linear space before …\nThe intrinsics of the camera used for the projection.\nRenderer that makes it easy to draw point clouds straight …\nThe dimensions of the depth texture in pixels.\nDepth offset applied after projection.\nDepth offset applied after projection.\nThe actual data from the depth texture.\nCalled once per phase given by …\nVector that spans up the rectangle from its top left …\nVector that spans up the rectangle from its top left …\nAdditional properties of this point cloud batch.\nReturns the argument unchanged.\nRaise the normalized values to this power (before any …\nGpu mesh used by this instance\nCalls <code>U::from(self)</code>.\nNumber of vertices covered by this batch.\nLine renderer for efficient rendering of many line(strips)\nMesh renderer.\nThe minimum and maximum depth value in world-space, for …\nTint that is multiplied to the rect, supports …\nMultiply color channels with the alpha channel before …\nOptional outline mask.\nOption outline mask id preference.\nOptional outline mask setting for this instance.\nOptional outline mask setting for the entire batch.\nOptional outline mask setting for the entire batch.\nCombination of flags indicating in which phases …\nPicking layer id.\nPicking object id that applies for the entire batch.\nPicking object id that applies for the entire batch.\nPicking object id that applies for the entire depth cloud.\nThe plane in which the grid lines are drawn.\nPoint renderer for efficient rendering of point clouds.\nNumber of points covered by this batch.\nPoint radius is calculated as world-space depth times this …\nMin/max range of the values in the texture.\nRenderer that makes it easy to draw textured 2D rectangles …\nGets or creates a vertex shader module for drawing a …\nFor textures that need decoding in the shader, for example …\nHow far apart the closest sets of lines are.\nHow thick the lines are in UI units.\nTop left corner position in world space.\nLength factor as multiple of a line’s radius applied to …\nWidth factor as multiple of a line’s radius applied to …\nMultiplier to get world-space depth from whatever is in …\nWhere this instance is placed in world space and how its …\nTransformation applies to line positions\nTransformation applies to point positions\nThe extrinsics of the camera used for the projection, with …\n<code>GpuBindGroup</code> pointing at the current image source and a …\nIf true, the compositor will blend with the image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep in sync with <code>composite.wgsl</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug overlay for quick &amp; dirty display of texture …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModes configuring what the debug overlay shader shows.\nKeep in sync with <code>debug_overlay.wgsl</code>\nShow the texture on the f32 texture binding slot.\nShow the texture on the uint texture binding slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA value of <code>DebugOverlayMode</code>\nConfigures color mapping mode.\nThe intrinsics of the camera used for the projection.\nThe dimensions of the depth texture in pixels.\nThe actual data from the depth texture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe minimum and maximum depth value in world-space, for …\nOption outline mask id preference.\nPicking object id that applies for the entire depth cloud.\nPoint radius is calculated as world-space depth times this …\nMultiplier to get world-space depth from whatever is in …\nThe extrinsics of the camera used for the projection, with …\nWorld-space bounding-box.\nWhich colormap should be used.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe minimum and maximum depth value in world-space, for …\nPoint radius is calculated as world-space depth times this …\nChanges over different draw-phases.\nOne of <code>SAMPLE_TYPE_*</code>.\nMultiplier to get world-space depth from whatever is in …\nThe extrinsics of the camera used for the projection.\nRenders a generated skybox from a color gradient\nThe type of generic skybox to render.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPosition and radius.\nRadius of the point in world space\nCombination of flags to extend lines outwards with round …\nBy default, line caps end at the last/first position of …\nAdds a round cap at the end of a line strip (excludes …\nPuts a equilateral triangle at the end of the line strip …\nBy default, line caps end at the last/first position of …\nAdds a round cap at the start of a line strip (excludes …\nPuts a equilateral triangle at the start of the line strip …\nEnable color gradient across the line.\nForces spanning the line’s quads as-if the camera was …\nData that is valid for a batch of line strips.\nA line drawing operation. Encompasses several lines, each …\nInternal, ready to draw representation of <code>LineBatchInfo</code>\nProperty flags for a line strip\nDefines an outline mask for an individual vertex ranges …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDepth offset applied after projection.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nNumber of vertices covered by this batch.\nTransforms and uploads line strip data to be consumed by …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOptional outline mask setting for the entire batch.\nPicking object id that applies for the entire batch.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nLength factor as multiple of a line’s radius applied to …\nWidth factor as multiple of a line’s radius applied to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTransformation applies to line positions\nUniform buffer that changes for every batch of line strips.\nUniform buffer that changes once per draw data rendering.\nNumber of sentinel vertices, one at the start and one at …\nSentinel vertex used at the start and the end of the line …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPer-instance (as opposed to per-material/mesh!) tint color …\nNumber of meshes out of <code>count</code> which have outlines. We put …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGpu mesh used by this instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of a mesh with all fields set to …\nTransforms and uploads mesh instance data to be consumed …\nOptional outline mask setting for this instance.\nPicking layer id.\nWhere this instance is placed in world space and how its …\nElement in the gpu residing instance buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf true, draw 2D camera facing circles instead of spheres.\nIf true, we shade all points in the batch like spheres.\nInternal, ready to draw representation of …\nProperty flags for a point batch\nData that is valid for a batch of point cloud points.\nA point cloud drawing operation. Expected to be recreated …\nDefines an outline mask for an individual vertex ranges.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDepth offset applied after projection.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nAdditional properties of this point cloud batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nTransforms and uploads point cloud data to be consumed by …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOptional outline mask setting for the entire batch.\nPicking object id that applies for the entire batch.\nNumber of points covered by this batch.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nTransformation applies to point positions\nUniform buffer that changes for every batch of points.\nUniform buffer that changes once per draw data rendering.\nPosition and radius.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRadius of the point in world space\nDo BGR(A)-&gt;RGB(A) conversion is in the shader.\nHow to map the normalized <code>.r</code> component to a color.\nDescribes a texture and how to map it to a color.\nApply the given function.\nColormapping is off. Take the .r color and splat onto rgb.\nColormapping is off. Keep rgb as is.\nDescribes how the color information is encoded in the …\nLook up the color in this texture.\nTexture filter setting for magnification (a texel covers …\nTexture filter setting for minification (several texels …\nFor any one-component texture, you need to supply a color …\nTexture that fills the rectangle\nDecode 0-1 sRGB gamma values to linear space before …\nVector that spans up the rectangle from its top left …\nVector that spans up the rectangle from its top left …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssumes a separate/unmultiplied alpha.\nRaise the normalized values to this power (before any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTint that is multiplied to the rect, supports …\nMultiply color channels with the alpha channel before …\nOptional outline mask.\nMin/max range of the values in the texture.\nFor textures that need decoding in the shader, for example …\nTop left corner position in world space.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRange of the texture values. Will be mapped to the [0, 1] …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration for the world grid renderer.\nDraw data for a world grid renderer.\nThe color of the grid lines.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe plane in which the grid lines are drawn.\nHow far apart the closest sets of lines are.\nHow thick the lines are in UI units.\nKeep in sync with <code>world_grid.wgsl</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlane equation, normal + distance.\nHow far apart the closest sets of lines are.\nRadius of the lines in UI units.\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nSomething went wrong in a user-callback.\nUse full range YUV with all components ranging from 0 to …\nHandle to a 2D resource.\nIdentity matrix, interpret YUV as GBR.\nDescribes image data for the purpose of creating a 2D …\nError that can occur when converting image data to a …\nSomething went wrong when creating the GPU texture &amp; …\nUse limited range YUV, i.e. for 8bit data, Y is valid in […\nImage data format that can be converted to a wgpu texture.\nTexture manager for 2D textures.\nThe source format is already in a wgpu compatible format.\n4:0:0, single plane of chroma only. Also known as I400\nYUV 4:2:2 subsampling, single plane.\n4:2:0 subsampling with a separate Y plane, followed by a …\n4:2:0 subsampling with 3 separate planes. Also known as …\n4:2:2 subsampling with 3 separate planes. Also known as …\n4:4:4 no chroma downsampling with 3 separate planes. Also …\nYUV (== <code>YCbCr</code>) formats, typically using chroma …\nYuv matrix coefficients that determine how a YUV image is …\nSupported chroma subsampling input formats.\nExpected range of YUV values.\nData for the highest mipmap level.\nFor an overview of image data interpretation check <code>re_video</code>…\nThe mutable part of the manager.\nIf this desc is not used for a texture update, this label …\nTakes raw image data and transfers &amp; converts it to a GPU …\nThe size of the resulting output texture / the semantic …\nDescribes image data for the purpose of creating a 2D …\nError that can occur when converting image data to a …\nImage data format that can be converted to a wgpu texture.\nThe source format is already in a wgpu compatible format.\nYUV (== <code>YCbCr</code>) formats, typically using chroma …\nCreates a texture that can hold the image data.\nData for the highest mipmap level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this desc is not used for a texture update, this label …\nThe texture format required in order to store this image …\nThe texture usages required in order to store this image …\nTakes raw image data and transfers &amp; converts it to a GPU …\nThe size of the resulting output texture / the semantic …\nSomething went wrong in a user-callback.\nHandle to a 2D resource.\nSomething went wrong when creating the GPU texture &amp; …\nTexture manager for 2D textures.\nCreates a new 2D texture resource and schedules data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new 2D texture resource and schedules data …\nCreates a new 2D texture resource and schedules data …\nCreates a new 2D texture resource and schedules data …\nHeight of the texture.\nThe mutable part of the manager.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>None</code> if the <code>texture</code> is not 2D.\nCaches textures using a unique id, which in practice is …\nReturns a single pixel white pixel with an rgba8unorm …\nReturns a single pixel white pixel with an rgba8unorm …\nWidth of the texture.\nWidth and height of the texture.\nReturns a single zero pixel with format …\nReturns a single zero pixel with format …\nReturns a single zero pixel with format …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nUse full range YUV with all components ranging from 0 to …\nIdentity matrix, interpret YUV as GBR.\nUse limited range YUV, i.e. for 8bit data, Y is valid in […\nFormat that a target texture must have in order to be used …\nUsage flags that a target texture must have in order to be …\n4:0:0, single plane of chroma only. Also known as I400\nYUV 4:2:2 subsampling, single plane.\n4:2:0 subsampling with a separate Y plane, followed by a …\n4:2:0 subsampling with 3 separate planes. Also known as …\n4:2:2 subsampling with 3 separate planes. Also known as …\n4:4:4 no chroma downsampling with 3 separate planes. Also …\nA work item for the subsampling converter.\nConverter for chroma subsampling formats.\nYuv matrix coefficients that determine how a YUV image is …\nSupported chroma subsampling input formats.\nExpected range of YUV values.\nRuns the conversion from the input texture data.\nWhat format the input data texture is expected to be in.\nGiven the dimensions of the output picture, what are the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new conversion task that can be used with …\nSize of the buffer needed to create the data texture, i.e. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUses <code>super::YuvPixelLayout</code>.\nUses <code>super::YuvMatrixCoefficients</code>.\nUses <code>super::YuvRange</code>.\nRadius of length 1 in ui points.\nA size of something in either scene units or ui points.\nSame as <code>Size</code> but stored with a f16 float.\nZero radius.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new size in scene units.\nCreates a new size in ui point units.\nGet the scene-size of this, if stored as a scene size.\nGet the point size of this, if stored as a point size.\nUtility for dealing with buffers containing raw 2D texture …\nSize required for a padded buffer as it is read/written …\nSize required for an unpadded buffer.\nHow many bytes per row are required to be allocated in …\nHow many bytes per row contain actual data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieves 2D texture buffer info for a given format &amp; …\nRemoves the padding from a buffer containing gpu texture …\nRemoves the padding from a buffer containing gpu texture …\nNo-op rect transform that transforms from a unit rectangle …\nDefines a transformation from a rectangular region of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransforms texture coordinates to normalized device …\nTransforms texture coordinates to normalized device …\nThe full scene.\nThe region of the scene that should be visible.\nComputes a transformation matrix that applies the rect …\ne.g. bad mp4, or bug in mp4 parse\ne.g. unsupported codec\ne.g. unsupported codec\ne.g. unsupported codec\nContains the error value\nContains the success value\nVideo data + decoder(s).\nInformation about the status of a frame decoding.\nError that can occur during playing videos.\nIdentifier for an independent video decoding stream.\nThe video data\nReturns a texture with the latest frame at the given time …\nMeta information about the decoded frame.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNatural height of the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, the texture is outdated. Keep polling for a fresh …\nLoads a video from the given data.\nRemoves all decoders that have been unused in the last …\nIf true, this texture is so out-dated that it should have …\nFormat information about the original data from the video …\nThe texture to show.\nNatural width of the video.\nInternal implementation detail of the …\nStart decoding the given chunk.\nCalled after submitting the last chunk.\nSet on error; reset on success.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum number of samples the decoder requests to stay …\nReset the video decoder and discard all frames.\nReturn and clear the latest error that happened during …\nGet the latest decoded frame at the given time and copy it …\nIgnore hickups lasting shorter than this.\nDecode video to a texture, optimized for extracting …\nA texture of a specific video frame.\nClears the texture that is shown on pending to black.\nEnqueue all samples in the given GOP.\nGet the video frame at the given time stamp.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast error that was encountered during decoding.\nReset the video decoder and discard all frames.\nDefault value for clearing depth buffer to infinity.\nUse this color state when targeting the main target with …\nColor format used for the main target of the view builder.\nDefault depth state for enabled depth write &amp; read.\nDefault multisample state that any <code>wgpu::RenderPipeline</code> …\nDepth format used for the main target of the view builder.\nEnable MSAA always. This makes our pipeline less variable …\nPuts the view space origin into the middle of the screen.\nOrthographic projection with the camera position at the …\nConfigures the camera placement in the orthographic …\nPerspective camera looking along the negative z view space …\nHow we project from 3D to 2D.\nThe texture format used for screenshots.\n<code>ViewBuilder</code> that can be shared between threads.\nBasic configuration for a target view.\nPuts the view space origin at the top-left corner of the …\nThe highest level rendering block in <code>re_renderer</code>. Used to …\nIf true, the <code>composite</code> step will blend the image with the …\nComposites the final result of a <code>ViewBuilder</code> to a given …\nDraws the frame as instructed to a temporary HDR target.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many pixels are there per point.\nResolution in pixels as configured on view builder …\nThe viewport resolution in physical pixels.\nSchedules the readback of a rectangle from the picking …\nSchedules the taking of a screenshot.\nDefines a viewport transformation from the projected space …\nAspect ratio of the perspective transformation.\nDistance of the far plane to the camera.\nDistance of the near plane.\nViewing angle in view space y direction (which is the …\nSize of the orthographic camera view space y direction …\nA Vec4 of pure padding (i.e. 16 bytes of padding)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollection of all wgpu resource pools.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group layout. This will show up in …\nLocks the resource pool for resolving handles.\nA reference-counter baked bind group.\nResource pool for bind groups.\nReturns a reference-counted, currently unused bind-group. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group. This will show up in …\nBase offset of the buffer. For bindings with …\nSize of the binding, or <code>None</code> for using the rest of the …\nBuffer creation descriptor.\nA reference-counter baked buffer. Once all instances are …\nReturns a reference-counted gpu buffer that is currently …\nCalled by <code>RenderContext</code> every frame. Updates statistics …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod to retrieve a resource from a weak handle (used by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of a buffer. This will show up in graphics …\nAllows a buffer to be mapped immediately after they are …\nSize of a buffer.\nUsages of a buffer. If the buffer is used in any way that …\nGeneric resource pool for all resources that have varying …\nAll resources, including both resources that are in use …\nIf true, a unused resources will be kept around for while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny resource that has been deallocated last frame. We keep …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the pipeline layout. This will show up in …\nLocks the resource pool for resolving handles.\nRenderpipeline descriptor, can be converted into …\nA copy of <code>wgpu::VertexBufferLayout</code> with a <code>smallvec</code> for the …\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nGenerates attributes with successive shader locations …\nThe effect of draw calls on the depth and stencil aspects …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates layouts with successive shader locations without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the pipeline. This will show up in graphics …\nThe multi-sampling properties of the pipeline.\nThe properties of the pipeline at the primitive assembly …\nThe color state of the render targets.\nLocks the resource pool for resolving handles.\nHow often this vertex buffer is “stepped” forward.\nThe format of any vertex buffers used with this pipeline.\nFrame index in which this resource was (re)created.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFrame index in which a handle to this resource was last …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the sampler. This will show up in graphics …\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nHow to filter the texture when it needs to be minified …\nHow to filter between mip map levels\nLocks the resource pool for resolving handles.\nIf set, all readily stitched (import resolve) and patched …\nAdditional text replacement workarounds that may be added …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the shader. This will show up in graphics …\nLocks the resource pool for resolving handles.\nWorkarounds via text replacement in shader source code.\nPath to the source code of this shader module.\nGeneric resource pool for all resources that are fully …\nAccessor to the resource pool by taking a read lock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocks the resource pool for resolving handles.\nA reference-counter baked texture. Once all instances are …\nReturns a reference-counted handle to a currently unused …\nCalled by <code>RenderContext</code> every frame. Updates statistics …\nDimensions of the texture.\nFormat of the texture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod to retrieve a resource from a weak handle (used by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the texture. This will show up in graphics …\nMip count of texture. For a texture with no extra mips, …\nNumber of bytes this texture is expected to take.\nSample count of texture. If this is not 1, texture must …\nSize of the texture. All components must be greater than …\nAllowed usages of the texture. If used in other ways, the …\nCopies the desc but changes the label.\nCopies the desc but adds a string to the label.")