searchState.loadedDescShard("re_viewport_blueprint", 0, "Rerun Viewport Blueprint\nAdd a new container of the provided kind to the provided …\nAdd a new view to the provided container (or the root if …\nDescribes if an entity path can be added to a view.\nThe native version of a …\nEnsure the tab for the provided view is focused (see …\nMake all column and row shares the same for this container\nMove some contents to a different container\nMove one or more <code>Contents</code> to a newly created container\nRemove a container (recursively) or a view\nChange the kind of a container.\nSet the whole viewport tree.\nSimplify the container with the provided options\nThe entity path of the viewport blueprint in the blueprint …\nA view of a space.\nData to be added to a view, built from a …\nUtility for querying view properties.\nDescribes the layout and contents of the Viewport Panel.\nMutation actions to perform on the viewport tree at the …\nName of the property archetype.\nCode for automatic layout of views.\nWhether the viewport layout is determined automatically.\nWhether views should be created automatically for entities …\nBlueprint query used for querying.\nEntity path in the blueprint store where all components of …\nList of all components in this property.\nConverts a <code>egui_tiles::ContainerKind</code> into a …\nConverts a <code>re_types::blueprint::components::ContainerKind</code> …\nAll the containers found in the viewport.\nThe content of this view as defined by its queries.\nList out all views we generate by default for the …\nPath where these views defaults can be found.\nBlueprint mutation events that will be processed at the …\nUtilities for determining if an entity can be added to a …\nDeserialized entity path filter.\nEntity path in the blueprint store where all components of …\nShow only one view as maximized?\nUpdate entity path filter.\nHashes of all recommended views the viewer has already …\nPending blueprint writes for nested components from …\nQuery results for all queries of this property.\nThe root container.\nThe “anchor point” of this view. The transform at this …\nThe layouts of all the views.\nUI utilities related to the viewport blueprint.\nWhere the views are stored.\nTrue if this view is visible in the UI.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe native version of a …\nClears the blueprint component for this container.\nReturns this container’s display name\nReturns the argument unchanged.\nCreates a new <code>ContainerBlueprint</code> from the given …\nCalls <code>U::from(self)</code>.\nPlaceholder name displayed in the UI if the user hasn’t …\nPersist the entire <code>ContainerBlueprint</code> to the blueprint …\nSets the display name for this container.\nAttempt to load a <code>ContainerBlueprint</code> from the blueprint …\nDescribes if an entity path can be added to a view.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCan be generally added but view might already have this …\nCan be added and view doesn’t have it already.\nExtension trait to <code>TestContext</code> for blueprint-related …\nSee docstring on the implementation below.\nModal for adding a new view of container to an existing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDraw a single row.\nA view of a space.\nThe content of this view as defined by its queries.\nPath at which a view writes defaults for components.\nPath where these views defaults can be found.\nReturns this view’s display name\nCreates a new <code>ViewBlueprint</code> with the same contents, but a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPlaceholder name displayed in the UI if the user hasn’t …\nCreates a new <code>ViewBlueprint</code> with a single <code>ViewContents</code>.\nCreates a new <code>ViewBlueprint</code> with a single <code>ViewContents</code>, …\nPending blueprint writes for nested components from …\nPersist the entire <code>ViewBlueprint</code> to the blueprint store.\nThe “anchor point” of this view. The transform at this …\nAttempt to load a <code>ViewBlueprint</code> from the blueprint store.\nTrue if this view is visible in the UI.\nHelper struct for executing the query from <code>ViewContents</code>\nData to be added to a view, built from a …\nDeserialized entity path filter.\nChecks whether the results of this query “fully contains…\nBuild up the initial <code>DataQueryResult</code> for this <code>ViewContents</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to load a <code>ViewContents</code> from the blueprint store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform arbitrary mutation on the entity path filter.\nCreates a new <code>ViewContents</code>.\nUpdate entity path filter.\nDirectly add an exclusion rule to the <code>EntityPathFilter</code>.\nDirectly add an inclusion rule to the <code>EntityPathFilter</code>.\nRemove rules for a given entity.\nRemove a subtree and any existing rules that it would …\nSave the entity path filter.\nPersist the entire <code>ViewContents</code> to the blueprint store.\nSets the entity path filter to the provided one.\nRecursively walk the <code>DataResultTree</code> and update the …\nRecursively walk the <code>DataResultTree</code> and update the …\nUtility for querying view properties.\nReturns whether any property is non-empty.\nName of the property archetype.\nBlueprint query used for querying.\nEntity path in the blueprint store where all components of …\nClears a blueprint component.\nGet the component array for a given type, not using any …\nGet the component array for a given type or an empty …\nGet the component array for a given type or its fallback …\nList of all components in this property.\nGet a single component or None, not using any fallbacks.\nGet the value of a specific component or its fallback if …\nEntity path in the blueprint store where all components of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery a specific view property for a given view.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a query context for this view property.\nQuery results for all queries of this property.\nResets all components to the values they had in the …\nResets all components to empty values, i.e. the fallback.\nResets a blueprint component to the value it had in the …\nSave change to a blueprint component.\nDescribes the layout and contents of the Viewport Panel.\nAdd a container of the provided kind.\nAdd a set of views to the viewport.\nWhether the viewport layout is determined automatically.\nWhether the viewport layout is determined automatically.\nWhether views should be created automatically for entities …\nWhether views should be created automatically for entities …\nAll the containers found in the viewport.\nReturns an iterator over all the contents (views and …\nBlueprint mutation events that will be processed at the …\nDuplicates a view and its entity property overrides.\nGiven a predicate, finds the (first) matching contents by …\nGiven a predicate, finds the (first) matching contents by …\nGiven a container or a view, find its enclosing container …\nMake sure the tab corresponding to this view is focused.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if some content is (directly or indirectly) …\nCheck the visibility of the provided content.\nDetermine whether all views in a blueprint are invalid.\nIf <code>false</code>, the item is referring to data that is not …\nMake all children of the given container the same size.\nShow only one view as maximized?\nMove the <code>contents</code> container or view to the specified …\nMove some <code>Contents</code> to a newly created container of the …\nFind the parent container of a given contents.\nHashes of all recommended views the viewer has already …\nRecursively remove a container or a view.\nThe root container.\nProcess any deferred <code>ViewportCommand</code> and then save to …\nSave the current state of the viewport to the blueprint …\nWhether the viewport layout is determined automatically.\nWhether views should be created automatically for entities …\nSet the kind of the provided container.\nSets the visibility for the provided content.\nSimplify the container tree with the provided options.\nSpawns new views if enabled.\nThe layouts of all the views.\nAttempt to load a <code>ViewBlueprint</code> from the blueprint store.\nWhere the views are stored.\nWalk the entire <code>Contents</code> tree, starting from the root …\nWalk the subtree defined by the provided container id and …\nAdd a new container of the provided kind to the provided …\nAdd a new view to the provided container (or the root if …\nEnsure the tab for the provided view is focused (see …\nMake all column and row shares the same for this container\nMove some contents to a different container\nMove one or more <code>Contents</code> to a newly created container\nRemove a container (recursively) or a view\nChange the kind of a container.\nSet the whole viewport tree.\nSimplify the container with the provided options\nMutation actions to perform on the viewport tree at the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")