searchState.loadedDescShard("re_view_graph", 0, "Rerun Graph View.\nView state for the custom view.\nProvides a basic abstraction over a graph that was logged …\nAn explicit node is a node that was provided via …\nAn implicit node is a node that was provided via …\nDescribes the different kind of nodes that we can have in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA 64 bit hash of <code>components::GraphNode</code> with very small …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides geometric (shape) abstractions for the different …\nPerforms the layout of the graph, i.e. converting an …\nContains all the (geometric) information that is …\nDefines the output of a layout algorithm, i.e. everything …\nForce-directed graph layouts assume edges to be straight …\nRepresents a cubic bezier curve.\nA simple straight edge.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe direction of the edge at the source node (normalized).\nThe starting position of an edge.\nThe direction of the edge at the target node (normalized).\nThe end position of an edge.\nConvenience struct for querying the components of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper function to calculate the line segment between two …\nReturns <code>true</code> if finished.\nA <code>LayoutRequest</code> encapsulates all the information that is …\nReturns all edges from all graphs in this request.\nReturns all nodes from all graphs in this request.\nReturns <code>true</code> if all nodes in this request have fixed …\nThe edges in the layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bounding rectangle of the layout.\nReturns an iterator over all edges in the layout.\nCreates an empty layout\nReturns an iterator over all edges in the layout.\nReturns the argument unchanged.\nGets the shape of an edge in the final layout.\nGets the final position and size of a node in the layout.\nCalls <code>U::from(self)</code>.\nReturns the number of entities in the layout.\nAn edge slot going from <code>source</code> to <code>target</code>. Source and …\nAn edge where <code>source == target</code>.\nUniquely identifies a <code>Slot</code> by ordering the <code>NodeIds</code> that …\nThere are different types of <code>Slots</code> that are laid out …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a list of edges into their slotted form.\nHelper function to draw an arrow at the end of the edge\nDraws an edge between two points, optionally with an arrow …\nDraws the graph using the layout.\nDraws a node at the given position.\nDraw a rectangle to “fake” a label at small scales, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis function is similar to <code>view_property_component_ui</code>, …\nView state for the custom view.\nThe following is a simple state machine that keeps track …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method is lazy. A new layout is only computed if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA simple state machine that keeps track of the different …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister all systems (contexts &amp; parts) that the view …\nAdditional UI displayed when the view is selected.\nThe contents of the View window and all interaction within …\nIterates over all entities and joins the node and edge …\nPopulates the scene part with data from the store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe label information of a <code>re_types::archetypes::GraphNodes</code>…\nA <code>NodeInstance</code> is the output of the <code>NodeVisualizer</code> and …\nPopulates the scene part with data from the store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRadius of the circle in world coordinates.")