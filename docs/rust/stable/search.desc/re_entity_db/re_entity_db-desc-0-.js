searchState.loadedDescShard("re_entity_db", 0, "This is how we store and index logging data.\nContains the error value\nThe errors that can occur when misusing the chunk store.\nThe path to either a specific instance of an entity, or …\nHashes of the components of an <code>InstancePath</code>.\nGet the latest version of the data available at this time.\nContains the success value\nGet all the data within this time interval, plus the latest\nStores many <code>EntityDb</code>s of recordings and blueprints.\nNumber of messages per time.\nNumber of messages per time per timeline.\nA query in time.\nA <code>ChunkStoreSubscriber</code> that keeps track of all unique …\nA versioned path (i.e. pinned to a specific <code>RowId</code>) to …\nHashes of the components of a <code>VersionedInstancePath</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf this is a concrete instance, what instance index are we?\nIf this is a concrete instance, what instance index are we?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtra bookkeeping used to seed any timelines that include …\nWhen do we have data? Ignores static data.\nSee <code>GarbageCollectionOptions::time_budget</code>.\nAn in-memory database built from a stream of <code>LogMsg</code>es.\nMake a clone of this <code>EntityDb</code>, assigning it a new <code>StoreId</code>.\nIf this entity db is the result of a clone, which store …\nWhat is the mean latency between the time data was logged …\nSet by whomever created this <code>EntityDb</code>.\nUnconditionally drops all the data for a given <code>EntityPath</code> .\nUnconditionally drops all the data for a given <code>EntityPath</code> …\nDrop all events in the given time range from the given …\nIn many places we just store the hashes, so we need a way …\nA sorted list of all the entity paths in this database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the current <code>ChunkStoreGeneration</code>. This can be used …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> also for entities higher up in the hierarchy.\nIf you log <code>world/points</code>, then that is a logged entity, but …\nKeeps track of the last time data was inserted into this …\nQueries for the given <code>component_names</code> using latest-at …\nGet the latest index and value for a given dense …\nGet the latest index and value for a given dense …\nThe highest <code>RowId</code> in the store, which corresponds to the …\nThe highest <code>RowId</code> in the store, which corresponds to the …\nFree up some RAM by forgetting the older parts of all …\nComes in a special message, <code>LogMsg::SetStoreInfo</code>.\nKey used for sorting recordings in the UI.\nReturns a read-only guard to the backing <code>StorageEngine</code>.\nThe <code>StorageEngine</code> that backs this <code>EntityDb</code>.\nReturns a read-only guard to the backing <code>StorageEngine</code>.\nReturns true if an entity or any of its children have any …\nReturns true if an entity or any of its children have any …\nReturns the stats for the entity and all its children on …\nReturns the stats for the static store of the entity and …\nHistogram of all events on the timeeline, of all entities.\nA time histogram of all entities, for every timeline.\nReturns the time range of data on the given timeline, …\nThe global-scope time tracker.\nExport the contents of the current database to a sequence …\nA tree-view (split on path components) of the entities.\nMaintains an optimized representation of a batch of …\nA recursive, manually updated <code>ChunkStoreSubscriber</code> that …\nReturns <code>true</code> if this entity has no children and no data.\nDirect descendants of this (sub)tree.\nInvokes the <code>predicate</code> for <code>self</code> and all children …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHas no child entities.\nUpdates the <code>EntityTree</code> by applying a batch of …\nUpdates the <code>EntityTree</code> by removing any entities which have …\nFull path prefix to the root of this (sub)tree.\nWhat rows were deleted?\nFor each entity+component, how many static entries were …\nWhat time points were deleted for each …\nThe path to either a specific instance of an entity, or …\nHashes of the components of an <code>InstancePath</code>.\nIndicate the whole entity (all instances of it).\nIndicate the whole entity (all instances of it).\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicate a specific instance of the entity, e.g. a …\nIndicate a specific instance of the entity, e.g. a …\nIf this is a concrete instance, what instance index are we?\nIf this is a concrete instance, what instance index are we?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we refer to the whole entity (all instances of it)?\nHuman-readable description of the kind\nVersions this instance path by stamping it with the …\nVersions this hashed instance path by stamping it with the …\nStores many <code>EntityDb</code>s of recordings and blueprints.\nCreates one if it doesn’t exist.\nIn no particular order.\nIn no particular order.\nAll loaded <code>EntityDb</code>, both recordings and blueprints, in …\nAll loaded <code>EntityDb</code>, both recordings and blueprints, in …\nReturns either a recording or blueprint <code>EntityDb</code>. One is …\nReturns the closest “neighbor” recording to the given …\nReturns the <code>StoreId</code> of the oldest modified recording, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode an rrd stream. It can theoretically contain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIn no particular order.\nNumber of messages per time.\nNumber of messages per time per timeline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtra bookkeeping used to seed any timelines that include …\nTotal number of temporal messages over all timelines.\nWhen do we have data? Ignores static data.\nA <code>ChunkStoreSubscriber</code> that keeps track of all unique …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA versioned path (i.e. pinned to a specific <code>RowId</code>) to …\nHashes of the components of a <code>VersionedInstancePath</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo we refer to the whole entity (all instances of it)?")