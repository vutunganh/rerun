searchState.loadedDescShard("re_view_dataframe", 0, "Rerun <code>Data</code> View\nWrapper over the <code>DataframeQuery</code> blueprint archetype that …\nIntermediate data structures to make <code>re_datastore</code>’s row …\nStyle for <code>cell_with_hover_button_ui</code>.\n<code>egui_table::TableDelegate</code> implementation for displaying a …\nIcon is brighter but must be directly clicked.\nUi actions triggered by the dataframe UI to be handled by …\nIcon is dimmer but can be clicked from anywhere in the …\nThis structure maintains the data for displaying rows in a …\nWhich batch?\nFor each row to be displayed, where can we find the data?\nDraw some cell content with a right-aligned, on-hover …\nGroups column by entity paths.\nDisplay a dataframe table for the provided query.\nThe <code>DisplayRecordBatch</code>s to display.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw a single line in a table.\nThe index of the time column corresponding to the query …\nWhich row within the batch?\nHelper to draw individual lines into an expanded cell in a …\nA single column of component data.\nA single column of data in a record batch.\nDisplay some data from the column.\nDisplay some data in the column.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of instances for the given row index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to decode the time from the given row index.\nCreate a new <code>DisplayRecordBatch</code> from a <code>RecordBatch</code> and its …\nHelper to keep track of row expansion.\nStorage for <code>ExpandedRows</code>, which should be persisted across …\nReturn by how many additional lines this row is expended.\nCache containing the row expanded-ness.\n<code>egui::Context</code> used to animate the row expansion.\nMaps “table row number” to “additional lines”.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>egui::Id</code> used to store the animation state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the first line of the specified row is odd.\nCreate a new <code>ExpandedRows</code> instance.\nCollapse a row.\nBase row height.\nImplementation for …\nSet the expansion of a row.\nID used to invalidate the cache.\nThis sets the query used for cache invalidation.\nCache for the expanded rows.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of view columns for the current query, cached here …\nWrapper over the <code>DataframeQuery</code> blueprint archetype that …\nGiven some view columns, list the columns that should be …\nGet the filter column for the filter-is-not-null feature, …\nGet the raw <code>components::FilterIsNotNull</code> struct (for ui …\nReturns the argument unchanged.\nCreate a query object from the blueprint store.\nCalls <code>U::from(self)</code>.\nSave the timeline to the one specified.\nDisplay the selection panel ui for this query.\nGet the query timeline.\nGet the query timeline name.\nGather all entities that can meaningfully be used as …\nAn empty system to accept all entities in the view\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")