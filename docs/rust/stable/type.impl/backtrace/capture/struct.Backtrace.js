(function() {var type_impls = {
"re_sdk":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Backtrace\" class=\"impl\"><a href=\"#impl-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Captures a backtrace at the callsite of this function, returning an\nowned representation.</p>\n<p>This function is useful for representing a backtrace as an object in\nRust. This returned value can be sent across threads and printed\nelsewhere, and the purpose of this value is to be entirely self\ncontained.</p>\n<p>Note that on some platforms acquiring a full backtrace and resolving it\ncan be extremely expensive. If the cost is too much for your application\nit’s recommended to instead use <code>Backtrace::new_unresolved()</code> which\navoids the symbol resolution step (which typically takes the longest)\nand allows deferring that to a later date.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span>current_backtrace = Backtrace::new();</code></pre></div>\n<h5 id=\"required-features\"><a class=\"doc-anchor\" href=\"#required-features\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unresolved\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_unresolved</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new</code> except that this does not resolve any symbols, this\nsimply captures the backtrace as a list of addresses.</p>\n<p>At a later time the <code>resolve</code> function can be called to resolve this\nbacktrace’s symbols into readable names. This function exists because\nthe resolution process can sometimes take a significant amount of time\nwhereas any one backtrace may only be rarely printed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>current_backtrace = Backtrace::new_unresolved();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// no symbol names\n</span>current_backtrace.resolve();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// symbol names now present</span></code></pre></div>\n<h5 id=\"required-features-1\"><a class=\"doc-anchor\" href=\"#required-features-1\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frames</a>(&amp;self) -&gt; &amp;[BacktraceFrame]</h4></section></summary><div class=\"docblock\"><p>Returns the frames from when this backtrace was captured.</p>\n<p>The first entry of this slice is likely the function <code>Backtrace::new</code>,\nand the last frame is likely something about how this thread or the main\nfunction started.</p>\n<h5 id=\"required-features-2\"><a class=\"doc-anchor\" href=\"#required-features-2\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resolve</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>If this backtrace was created from <code>new_unresolved</code> then this function\nwill resolve all addresses in the backtrace to their symbolic names.</p>\n<p>If this backtrace has been previously resolved or was created through\n<code>new</code>, this function does nothing.</p>\n<h5 id=\"required-features-3\"><a class=\"doc-anchor\" href=\"#required-features-3\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details></div></details>",0,"re_sdk::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Backtrace\" class=\"impl\"><a href=\"#impl-Clone-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","re_sdk::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Backtrace\" class=\"impl\"><a href=\"#impl-Debug-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","re_sdk::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Backtrace\" class=\"impl\"><a href=\"#impl-Default-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","re_sdk::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(frames: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;) -&gt; Backtrace</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<BacktraceFrame>>","re_sdk::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;</h4></section></summary><div class='docblock'>Converts this type into the (usually inferred) input type.</div></details></div></details>","Into<Vec<BacktraceFrame>>","re_sdk::external::re_types_core::_Backtrace"]],
"re_types":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Backtrace\" class=\"impl\"><a href=\"#impl-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Captures a backtrace at the callsite of this function, returning an\nowned representation.</p>\n<p>This function is useful for representing a backtrace as an object in\nRust. This returned value can be sent across threads and printed\nelsewhere, and the purpose of this value is to be entirely self\ncontained.</p>\n<p>Note that on some platforms acquiring a full backtrace and resolving it\ncan be extremely expensive. If the cost is too much for your application\nit’s recommended to instead use <code>Backtrace::new_unresolved()</code> which\navoids the symbol resolution step (which typically takes the longest)\nand allows deferring that to a later date.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span>current_backtrace = Backtrace::new();</code></pre></div>\n<h5 id=\"required-features\"><a class=\"doc-anchor\" href=\"#required-features\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unresolved\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_unresolved</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new</code> except that this does not resolve any symbols, this\nsimply captures the backtrace as a list of addresses.</p>\n<p>At a later time the <code>resolve</code> function can be called to resolve this\nbacktrace’s symbols into readable names. This function exists because\nthe resolution process can sometimes take a significant amount of time\nwhereas any one backtrace may only be rarely printed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>current_backtrace = Backtrace::new_unresolved();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// no symbol names\n</span>current_backtrace.resolve();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// symbol names now present</span></code></pre></div>\n<h5 id=\"required-features-1\"><a class=\"doc-anchor\" href=\"#required-features-1\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frames</a>(&amp;self) -&gt; &amp;[BacktraceFrame]</h4></section></summary><div class=\"docblock\"><p>Returns the frames from when this backtrace was captured.</p>\n<p>The first entry of this slice is likely the function <code>Backtrace::new</code>,\nand the last frame is likely something about how this thread or the main\nfunction started.</p>\n<h5 id=\"required-features-2\"><a class=\"doc-anchor\" href=\"#required-features-2\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resolve</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>If this backtrace was created from <code>new_unresolved</code> then this function\nwill resolve all addresses in the backtrace to their symbolic names.</p>\n<p>If this backtrace has been previously resolved or was created through\n<code>new</code>, this function does nothing.</p>\n<h5 id=\"required-features-3\"><a class=\"doc-anchor\" href=\"#required-features-3\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details></div></details>",0,"re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Backtrace\" class=\"impl\"><a href=\"#impl-Clone-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Backtrace\" class=\"impl\"><a href=\"#impl-Debug-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Backtrace\" class=\"impl\"><a href=\"#impl-Default-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(frames: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;) -&gt; Backtrace</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<BacktraceFrame>>","re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;</h4></section></summary><div class='docblock'>Converts this type into the (usually inferred) input type.</div></details></div></details>","Into<Vec<BacktraceFrame>>","re_types::_Backtrace"]],
"re_types_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Backtrace\" class=\"impl\"><a href=\"#impl-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Captures a backtrace at the callsite of this function, returning an\nowned representation.</p>\n<p>This function is useful for representing a backtrace as an object in\nRust. This returned value can be sent across threads and printed\nelsewhere, and the purpose of this value is to be entirely self\ncontained.</p>\n<p>Note that on some platforms acquiring a full backtrace and resolving it\ncan be extremely expensive. If the cost is too much for your application\nit’s recommended to instead use <code>Backtrace::new_unresolved()</code> which\navoids the symbol resolution step (which typically takes the longest)\nand allows deferring that to a later date.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span>current_backtrace = Backtrace::new();</code></pre></div>\n<h5 id=\"required-features\"><a class=\"doc-anchor\" href=\"#required-features\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unresolved\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_unresolved</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new</code> except that this does not resolve any symbols, this\nsimply captures the backtrace as a list of addresses.</p>\n<p>At a later time the <code>resolve</code> function can be called to resolve this\nbacktrace’s symbols into readable names. This function exists because\nthe resolution process can sometimes take a significant amount of time\nwhereas any one backtrace may only be rarely printed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>current_backtrace = Backtrace::new_unresolved();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// no symbol names\n</span>current_backtrace.resolve();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// symbol names now present</span></code></pre></div>\n<h5 id=\"required-features-1\"><a class=\"doc-anchor\" href=\"#required-features-1\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frames</a>(&amp;self) -&gt; &amp;[BacktraceFrame]</h4></section></summary><div class=\"docblock\"><p>Returns the frames from when this backtrace was captured.</p>\n<p>The first entry of this slice is likely the function <code>Backtrace::new</code>,\nand the last frame is likely something about how this thread or the main\nfunction started.</p>\n<h5 id=\"required-features-2\"><a class=\"doc-anchor\" href=\"#required-features-2\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resolve</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>If this backtrace was created from <code>new_unresolved</code> then this function\nwill resolve all addresses in the backtrace to their symbolic names.</p>\n<p>If this backtrace has been previously resolved or was created through\n<code>new</code>, this function does nothing.</p>\n<h5 id=\"required-features-3\"><a class=\"doc-anchor\" href=\"#required-features-3\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details></div></details>",0,"re_types_core::result::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Backtrace\" class=\"impl\"><a href=\"#impl-Clone-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","re_types_core::result::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Backtrace\" class=\"impl\"><a href=\"#impl-Debug-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","re_types_core::result::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Backtrace\" class=\"impl\"><a href=\"#impl-Default-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","re_types_core::result::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(frames: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;) -&gt; Backtrace</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<BacktraceFrame>>","re_types_core::result::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;</h4></section></summary><div class='docblock'>Converts this type into the (usually inferred) input type.</div></details></div></details>","Into<Vec<BacktraceFrame>>","re_types_core::result::_Backtrace"]],
"re_view":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Backtrace\" class=\"impl\"><a href=\"#impl-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Captures a backtrace at the callsite of this function, returning an\nowned representation.</p>\n<p>This function is useful for representing a backtrace as an object in\nRust. This returned value can be sent across threads and printed\nelsewhere, and the purpose of this value is to be entirely self\ncontained.</p>\n<p>Note that on some platforms acquiring a full backtrace and resolving it\ncan be extremely expensive. If the cost is too much for your application\nit’s recommended to instead use <code>Backtrace::new_unresolved()</code> which\navoids the symbol resolution step (which typically takes the longest)\nand allows deferring that to a later date.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span>current_backtrace = Backtrace::new();</code></pre></div>\n<h5 id=\"required-features\"><a class=\"doc-anchor\" href=\"#required-features\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unresolved\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_unresolved</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new</code> except that this does not resolve any symbols, this\nsimply captures the backtrace as a list of addresses.</p>\n<p>At a later time the <code>resolve</code> function can be called to resolve this\nbacktrace’s symbols into readable names. This function exists because\nthe resolution process can sometimes take a significant amount of time\nwhereas any one backtrace may only be rarely printed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>current_backtrace = Backtrace::new_unresolved();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// no symbol names\n</span>current_backtrace.resolve();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// symbol names now present</span></code></pre></div>\n<h5 id=\"required-features-1\"><a class=\"doc-anchor\" href=\"#required-features-1\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frames</a>(&amp;self) -&gt; &amp;[BacktraceFrame]</h4></section></summary><div class=\"docblock\"><p>Returns the frames from when this backtrace was captured.</p>\n<p>The first entry of this slice is likely the function <code>Backtrace::new</code>,\nand the last frame is likely something about how this thread or the main\nfunction started.</p>\n<h5 id=\"required-features-2\"><a class=\"doc-anchor\" href=\"#required-features-2\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resolve</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>If this backtrace was created from <code>new_unresolved</code> then this function\nwill resolve all addresses in the backtrace to their symbolic names.</p>\n<p>If this backtrace has been previously resolved or was created through\n<code>new</code>, this function does nothing.</p>\n<h5 id=\"required-features-3\"><a class=\"doc-anchor\" href=\"#required-features-3\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details></div></details>",0,"re_view::external::re_chunk_store::external::re_chunk::external::re_log_types::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Backtrace\" class=\"impl\"><a href=\"#impl-Clone-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","re_view::external::re_chunk_store::external::re_chunk::external::re_log_types::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Backtrace\" class=\"impl\"><a href=\"#impl-Debug-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","re_view::external::re_chunk_store::external::re_chunk::external::re_log_types::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Backtrace\" class=\"impl\"><a href=\"#impl-Default-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","re_view::external::re_chunk_store::external::re_chunk::external::re_log_types::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(frames: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;) -&gt; Backtrace</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<BacktraceFrame>>","re_view::external::re_chunk_store::external::re_chunk::external::re_log_types::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;</h4></section></summary><div class='docblock'>Converts this type into the (usually inferred) input type.</div></details></div></details>","Into<Vec<BacktraceFrame>>","re_view::external::re_chunk_store::external::re_chunk::external::re_log_types::external::re_types_core::_Backtrace"]],
"re_viewer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Backtrace\" class=\"impl\"><a href=\"#impl-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Captures a backtrace at the callsite of this function, returning an\nowned representation.</p>\n<p>This function is useful for representing a backtrace as an object in\nRust. This returned value can be sent across threads and printed\nelsewhere, and the purpose of this value is to be entirely self\ncontained.</p>\n<p>Note that on some platforms acquiring a full backtrace and resolving it\ncan be extremely expensive. If the cost is too much for your application\nit’s recommended to instead use <code>Backtrace::new_unresolved()</code> which\navoids the symbol resolution step (which typically takes the longest)\nand allows deferring that to a later date.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span>current_backtrace = Backtrace::new();</code></pre></div>\n<h5 id=\"required-features\"><a class=\"doc-anchor\" href=\"#required-features\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unresolved\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_unresolved</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new</code> except that this does not resolve any symbols, this\nsimply captures the backtrace as a list of addresses.</p>\n<p>At a later time the <code>resolve</code> function can be called to resolve this\nbacktrace’s symbols into readable names. This function exists because\nthe resolution process can sometimes take a significant amount of time\nwhereas any one backtrace may only be rarely printed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>current_backtrace = Backtrace::new_unresolved();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// no symbol names\n</span>current_backtrace.resolve();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// symbol names now present</span></code></pre></div>\n<h5 id=\"required-features-1\"><a class=\"doc-anchor\" href=\"#required-features-1\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frames</a>(&amp;self) -&gt; &amp;[BacktraceFrame]</h4></section></summary><div class=\"docblock\"><p>Returns the frames from when this backtrace was captured.</p>\n<p>The first entry of this slice is likely the function <code>Backtrace::new</code>,\nand the last frame is likely something about how this thread or the main\nfunction started.</p>\n<h5 id=\"required-features-2\"><a class=\"doc-anchor\" href=\"#required-features-2\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resolve</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>If this backtrace was created from <code>new_unresolved</code> then this function\nwill resolve all addresses in the backtrace to their symbolic names.</p>\n<p>If this backtrace has been previously resolved or was created through\n<code>new</code>, this function does nothing.</p>\n<h5 id=\"required-features-3\"><a class=\"doc-anchor\" href=\"#required-features-3\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details></div></details>",0,"re_viewer::external::re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Backtrace\" class=\"impl\"><a href=\"#impl-Clone-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","re_viewer::external::re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Backtrace\" class=\"impl\"><a href=\"#impl-Debug-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","re_viewer::external::re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Backtrace\" class=\"impl\"><a href=\"#impl-Default-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","re_viewer::external::re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(frames: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;) -&gt; Backtrace</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<BacktraceFrame>>","re_viewer::external::re_types::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;</h4></section></summary><div class='docblock'>Converts this type into the (usually inferred) input type.</div></details></div></details>","Into<Vec<BacktraceFrame>>","re_viewer::external::re_types::_Backtrace"]],
"rerun":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Backtrace\" class=\"impl\"><a href=\"#impl-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Captures a backtrace at the callsite of this function, returning an\nowned representation.</p>\n<p>This function is useful for representing a backtrace as an object in\nRust. This returned value can be sent across threads and printed\nelsewhere, and the purpose of this value is to be entirely self\ncontained.</p>\n<p>Note that on some platforms acquiring a full backtrace and resolving it\ncan be extremely expensive. If the cost is too much for your application\nit’s recommended to instead use <code>Backtrace::new_unresolved()</code> which\navoids the symbol resolution step (which typically takes the longest)\nand allows deferring that to a later date.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span>current_backtrace = Backtrace::new();</code></pre></div>\n<h5 id=\"required-features\"><a class=\"doc-anchor\" href=\"#required-features\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unresolved\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_unresolved</a>() -&gt; Backtrace</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new</code> except that this does not resolve any symbols, this\nsimply captures the backtrace as a list of addresses.</p>\n<p>At a later time the <code>resolve</code> function can be called to resolve this\nbacktrace’s symbols into readable names. This function exists because\nthe resolution process can sometimes take a significant amount of time\nwhereas any one backtrace may only be rarely printed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>backtrace::Backtrace;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>current_backtrace = Backtrace::new_unresolved();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// no symbol names\n</span>current_backtrace.resolve();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{current_backtrace:?}\"</span>); <span class=\"comment\">// symbol names now present</span></code></pre></div>\n<h5 id=\"required-features-1\"><a class=\"doc-anchor\" href=\"#required-features-1\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">frames</a>(&amp;self) -&gt; &amp;[BacktraceFrame]</h4></section></summary><div class=\"docblock\"><p>Returns the frames from when this backtrace was captured.</p>\n<p>The first entry of this slice is likely the function <code>Backtrace::new</code>,\nand the last frame is likely something about how this thread or the main\nfunction started.</p>\n<h5 id=\"required-features-2\"><a class=\"doc-anchor\" href=\"#required-features-2\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resolve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">resolve</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>If this backtrace was created from <code>new_unresolved</code> then this function\nwill resolve all addresses in the backtrace to their symbolic names.</p>\n<p>If this backtrace has been previously resolved or was created through\n<code>new</code>, this function does nothing.</p>\n<h5 id=\"required-features-3\"><a class=\"doc-anchor\" href=\"#required-features-3\">§</a>Required features</h5>\n<p>This function requires the <code>std</code> feature of the <code>backtrace</code> crate to be\nenabled, and the <code>std</code> feature is enabled by default.</p>\n</div></details></div></details>",0,"rerun::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Backtrace\" class=\"impl\"><a href=\"#impl-Clone-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/clone.rs.html#172\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rerun::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Backtrace\" class=\"impl\"><a href=\"#impl-Debug-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","rerun::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Backtrace\" class=\"impl\"><a href=\"#impl-Default-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Backtrace</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","rerun::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-From%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(frames: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;) -&gt; Backtrace</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<BacktraceFrame>>","rerun::external::re_types_core::_Backtrace"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"impl\"><a href=\"#impl-Into%3CVec%3CBacktraceFrame%3E%3E-for-Backtrace\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;&gt; for Backtrace</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into\" class=\"method trait-impl\"><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;BacktraceFrame&gt;</h4></section></summary><div class='docblock'>Converts this type into the (usually inferred) input type.</div></details></div></details>","Into<Vec<BacktraceFrame>>","rerun::external::re_types_core::_Backtrace"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()