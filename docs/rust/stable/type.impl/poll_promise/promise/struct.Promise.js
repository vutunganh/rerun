(function() {var type_impls = {
"re_viewer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Promise%3CT%3E\" class=\"impl\"><a href=\"#impl-Promise%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Promise&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>() -&gt; (Sender&lt;T&gt;, Promise&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Create a [<code>Promise</code>] and a corresponding [<code>Sender</code>].</p>\n<p>Put the promised value into the sender when it is ready.\nIf you drop the <code>Sender</code> without putting a value into it,\nit will cause a panic when polling the <code>Promise</code>.</p>\n<p>See also [<code>Self::spawn_blocking</code>], [<code>Self::spawn_async</code>], [<code>Self::spawn_local</code>], and [<code>Self::spawn_thread</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ready\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_ready</a>(value: T) -&gt; Promise&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a promise that already has the result.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_local\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">spawn_local</a>(future: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + 'static) -&gt; Promise&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Spawn a future. Runs it in the local thread.</p>\n<p>You need to compile <code>poll-promise</code> with either the “tokio”, “smol”, or “web” feature for this to be available.</p>\n<p>This is a convenience method, using [<code>Self::new</code>] with [<code>tokio::task::spawn_local</code>].\nUnlike [<code>Self::spawn_async</code>] this method does not require <a href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\"><code>Send</code></a>.\nHowever, you will have to set up [<code>tokio::task::LocalSet</code>]s yourself.</p>\n<h6 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>promise = Promise::spawn_local(<span class=\"kw\">async move </span>{ something_async().<span class=\"kw\">await </span>});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_thread\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">spawn_thread</a>&lt;F&gt;(thread_name: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;, f: F) -&gt; Promise&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Spawn a blocking closure in a background thread.</p>\n<p>The first argument is the name of the thread you spawn, passed to <a href=\"https://doc.rust-lang.org/1.81.0/std/thread/struct.Builder.html#method.name\" title=\"method std::thread::Builder::name\"><code>std::thread::Builder::name</code></a>.\nIt shows up in panic messages.</p>\n<p>This is a convenience method, using [<code>Self::new</code>] and <a href=\"https://doc.rust-lang.org/1.81.0/std/thread/struct.Builder.html\" title=\"struct std::thread::Builder\"><code>std::thread::Builder</code></a>.</p>\n<p>If you are compiling with the “tokio” or “web” features, you should use [<code>Self::spawn_blocking</code>] or [<code>Self::spawn_async</code>] instead.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>promise = Promise::spawn_thread(<span class=\"string\">\"slow_operation\"</span>, <span class=\"kw\">move </span>|| something_slow());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ready\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">ready</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Polls the promise and either returns a reference to the data, or <a href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if still pending.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ready_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">ready_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Polls the promise and either returns a mutable reference to the data, or <a href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if still pending.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_take\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_take</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Promise&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns either the completed promise object or the promise itself if it is not completed yet.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.block_until_ready\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">block_until_ready</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Block execution until ready, then returns a reference to the value.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.block_until_ready_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">block_until_ready_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Block execution until ready, then returns a mutable reference to the value.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.block_and_take\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">block_and_take</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Block execution until ready, then returns the promised value and consumes the <code>Promise</code>.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">poll</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns either a reference to the ready value <a href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html#variant.Ready\" title=\"variant core::task::poll::Poll::Ready\"><code>std::task::Poll::Ready</code></a>\nor <a href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html#variant.Pending\" title=\"variant core::task::poll::Poll::Pending\"><code>std::task::Poll::Pending</code></a>.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">poll_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns either a mut reference to the ready value in a <a href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html#variant.Ready\" title=\"variant core::task::poll::Poll::Ready\"><code>std::task::Poll::Ready</code></a>\nor a <a href=\"https://doc.rust-lang.org/1.81.0/core/task/poll/enum.Poll.html#variant.Pending\" title=\"variant core::task::poll::Poll::Pending\"><code>std::task::Poll::Pending</code></a>.</p>\n<p>Panics if the connected [<code>Sender</code>] was dropped before a value was sent.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.task_type\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">task_type</a>(&amp;self) -&gt; TaskType</h4></section></summary><div class=\"docblock\"><p>Returns the type of task this promise is running.\nSee [<code>TaskType</code>].</p>\n</div></details></div></details>",0,"re_viewer::ui::welcome_screen::example_section::ManifestPromise"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()