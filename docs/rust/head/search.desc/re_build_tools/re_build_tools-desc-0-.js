searchState.loadedDescShard("re_build_tools", 0, "This crate is to be used from <code>build.rs</code> build scripts.\nWe are running in the conda build environment.\nAre we a developer running inside the workspace of …\nShould we export the build datetime for developers in the …\nShould we export the current git hash/branch for …\nWhere is this <code>build.rs</code> build script running?\nAtomic bool indicating whether or not to print the cargo …\nWe are running <code>cargo publish</code> (via <code>scripts/ci/crates.py</code>); …\nWe are running on CI for the Rerun workspace, but NOT …\nWe are not on Rerun’s CI, and not in the Rerun workspace.\nReturns info parsed from an invocation of the …\nGiven a crate name, computes the sha256 hash of its source …\nGiven a directory path, computes the sha256 hash of the …\nGiven a directory path, computes the sha256 hash of the …\nGiven a file path, computes the sha256 hash of its …\nGiven a bunch of strings, computes the sha256 hash of …\nISO 8601 / RFC 3339 build time.\nDetect what environment we are running in.\nReturns a list of all the enabled features of the given …\nCall from the <code>build.rs</code> file of any crate you want to …\nReturns the argument unchanged.\nRead the environment variable and trigger a rebuild …\nSituations to consider regarding git\nGet the current git branch name\nGet the full commit hash\nGet the first 7 characters of the commit hash\nCalls <code>U::from(self)</code>.\nRead the environment variable and trigger a rebuild …\nRecursively walks the directory at <code>path</code> in filename order.\nReads back a versioning hash that was written with …\nCall from <code>build.rs</code> to trigger a rebuild whenever any …\nCall from <code>build.rs</code> to trigger a rebuild whenever the file …\nCall from <code>build.rs</code> to trigger a rebuild whenever any of …\nCall from <code>build.rs</code> to trigger a rebuild whenever the file …\nReturns <code>(rustc, LLVM)</code> versions.\nChange whether or not this library should output cargo …\nHelper to check whether or not cargo build instructions …\nWrites <code>content</code> to a file iff it differs from what’s …\nWrites the given <code>hash</code> at the specified <code>path</code>.\nGet the current git branch name\nGet the full commit hash\nGet the first 7 characters of the commit hash\nFrom https://git-scm.com/docs/git-rev-parse:\nGiven a crate name, computes the sha256 hash of its source …\nGiven a directory path, computes the sha256 hash of the …\nGiven a directory path, computes the sha256 hash of the …\nGiven a file path, computes the sha256 hash of its …\nGiven a bunch of strings, computes the sha256 hash of …\nRecursively walks the directory at <code>path</code> in filename order.\nRecursively walks the directory at <code>path</code> in filename order …\nReads back a versioning hash that was written with …\nWrites the given <code>hash</code> at the specified <code>path</code>.\nReturns the argument unchanged.\nRead the environment variable and trigger a rebuild …\nCalls <code>U::from(self)</code>.\nRead the environment variable and trigger a rebuild …\nCall from <code>build.rs</code> to trigger a rebuild whenever any …\nCall from <code>build.rs</code> to trigger a rebuild whenever the file …\nCall from <code>build.rs</code> to trigger a rebuild whenever any of …\nCall from <code>build.rs</code> to trigger a rebuild whenever the file …\nTrack any files that are part of the given crate, …\nTracks an implicit dependency of the given name.\nRecursively walk the tree of dependencies of the given <code>root</code>…\nWrites <code>content</code> to a file iff it differs from what’s …")