searchState.loadedDescShard("re_dev_tools", 0, "Crate that combines several development utilities.\nVarious development tools for Rerun.\nThis build script collects all examples which should be …\nThis build script collects all of our documentation and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild examples and their manifest.\nExample collection and parsing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOur main examples, built on each PR\nExamples built nightly, plus all <code>Main</code> and <code>Release</code>.\nExamples built for each release, plus all <code>Main</code> examples.\nList of example names.\nPath of the directory where examples for this language are …\nExtension without the leading dot, e.g. <code>rs</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the <code>examples/manifest.toml</code> file.\nName of the folder it’s stored in.\nUsed to sort categories in the <code>rerun.io/examples</code> navbar.\nMulti-line description.\n<code>snake_case</code> name.\nInstall the selected examples in the current environment.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCollect examples in the repository and produce a manifest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollect examples in the repository and run them to produce …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSee <code>docs/snippets/snippets.toml</code> for more info\nCollect code snippets from <code>docs/snippets</code> in the repository …\nexample name -&gt; args\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nexample name -&gt; languages\nReturns an error on non-zero returncode.\nMeilisearch indexer and REPL\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex documentation, examples, and API references for all …\nexclude one or more crates\nReturns the argument unchanged.\nname of the meilisearch index to create/query\nCalls <code>U::from(self)</code>.\nmeilisearch master key (must support both read and write)\nmeilisearch URL\nrelease version to use in URLs\nrust toolchain version, e.g. nightly-2025-02-05\nC++ API reference generated by Doxygen\nDocs read from <code>/docs</code>\nExamples read from <code>/examples</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPython API reference generated by mkdocs\nRust API reference generated by rustdoc\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet of visited <code>refid</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>alias_path -&gt; item_path</code>\n<code>item_path -&gt; docstring</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeys in this hashmap are the index of the object, not the …\n<code>const V: T = ()</code>\nA <code>const</code> in an inherent <code>impl</code> block:\n<code>enum E {}</code>\n<code>fn f() {}</code>\nInherent impl item\n<code>ItemKind</code> for items in inherent impls\n<code>macro_rules! m {}</code>\nA <code>fn</code> in an inherent <code>impl</code> block:\n<code>mod m</code>\n<code>ItemKind</code> for types which may have inherent impls\n<code>struct S {}</code>\n<code>trait I {}</code>\n<code>type T = ()</code>\nA <code>type</code> in an inherent <code>impl</code> block:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIngest rust documentation for all published crates in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConnect to Meilisearch.\nDELETE <code>{self.url}{path}</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGET <code>{self.url}{path}</code>\nCreate an index from <code>documents</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPOST <code>{self.url}{path}</code>\nQuery a specific index in the database.\nSimple terminal search client\nexclude one or more crates\nReturns the argument unchanged.\nname of the meilisearch index to create/query\nCalls <code>U::from(self)</code>.\nmeilisearch master key (must support both read and write)\nmeilisearch URL\nrelease version to use in URLs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild the web-viewer.\nset the output directory. This is a path relative to the …\ncompile for debug and don’t run wasm-opt.\nkeep debug symbols, even in release builds. This gives …\ncomma-separated list of features to pass on to <code>re_viewer</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild the Rerun web-viewer .wasm and generate the .js …\nwhether to exclude default features from <code>re_viewer</code> wasm …\ncompile for release and run wasm-opt.\ntarget to build for.\nCustom target meant for post-processing inside <code>rerun_js</code>.\nBuild <code>re_viewer</code> as Wasm, generate .js bindings for it, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")