searchState.loadedDescShard("objectron", 0, "Example of using the Rerun SDK to log the Objectron dataset…\nLimits the number of frames logged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThrottle logging by sleeping between each frame (e.g. <code>0.25</code>…\nSpecifies the recording to replay.\nIf set, this indefinitely log and relog the same scene in …\nContains a list of blend shape entries wherein each item …\nInformation about the camera position and imaging …\nInformation about the pose, topology, and expression of a …\nContainer for a 3D mesh describing face topology.\nVideo image and face position tracking information.\nEstimated scene lighting information associated with a …\nA subdividision of the reconstructed, real-world scene …\nContainer object for mesh data of real-world scene …\nMesh geometry data stored in an array-based format.\nInformation about the position and orientation of a …\nContainer for a 3D mesh.\nA collection of points in the world coordinate space.\nInfo about the camera characteristics used to capture …\nContainer for depth data information.\nA sample of raw accelerometer data.\nRepresents calibrated magnetic field data and accuracy …\nA sample of device motion data. Encapsulates measurements …\nA sample of raw gyroscope data.\nA sample of raw magnetometer data.\nContains most recent snapshots of device motion data\nA 3D vector\nThe edge connecting two keypoints together\nProjection of a 3D point on an image, and its metric depth.\nThe 3D point in the camera coordinate system, the scales …\nThe sequence protocol contains the annotation data for the …\nThe skeleton template for different objects (e.g. humans, …\nThe list of all the modeled skeletons in our library. …\nRaw acceleration measured by the accelerometer which …\nMost recent samples of raw accelerometer data.\nReturns the enum value of <code>alignment</code>, or the default if the …\nThe general orientation of the detected plane with respect …\nReturns the value of <code>ambient_color_temperature</code>, or the …\nThe estimated color temperature, in degrees Kelvin, of …\nReturns the value of <code>ambient_intensity</code>, or the default …\nThe estimated intensity, in lumens, of ambient light …\nList of the annotated objects in this frame. Depending on …\nNested message and enum types in <code>ARBlendShapeMap</code>.\nNested message and enum types in <code>ARCamera</code>.\nNested message and enum types in <code>ARFaceGeometry</code>.\nNested message and enum types in <code>ARLightEstimate</code>.\nNested message and enum types in <code>ARMeshGeometry</code>.\nNested message and enum types in <code>ARPlaneAnchor</code>.\nNested message and enum types in <code>ARPlaneGeometry</code>.\nNested message and enum types in <code>ARPointCloud</code>.\nThe quaternion representing the device’s orientation …\nNested message and enum types in <code>AVDepthData</code>.\nA map of named coefficients representing the detected …\nReturns the value of <code>boundary_vertex_count</code>, or the default …\nThe number of elements in the boundary_vertices buffer.\nEach value in this buffer represents the position of a …\nReturns the enum value of <code>calibration_accuracy</code>, or the …\nCalibration accuracy of a magnetic field estimate.\nCamera information associated with the frame.\nInformation about the camera transformation (in the world …\nAssociated calibration data for the depth_data_map.\nDescribes what category an object is. E.g. object class, …\nThe skeleton’s category (e.g. human, chair, hand.). …\nThe center point of the plane relative to its anchor …\nReturns the enum value of <code>classification</code>, or the default …\nReturns an iterator which yields the valid enum values …\nA general characterization of what kind of real-world …\nClassification for each face in the mesh.\nReturns the enum value of <code>classification_status</code>, or the …\nThe current state of process for classifying the plane …\nReturns the value of <code>classification_supported</code>, or the …\nA Boolean value that indicates whether plane …\nNested message and enum types in <code>CMCalibratedMagneticField</code>.\nNested message and enum types in <code>CMDeviceMotion</code>.\nSphere around the keypoint, indicating annotator’s …\nReturns the value of <code>count</code>, or the default value if <code>count</code> …\nThe number of points in the cloud.\nThe depth of the point in the camera coordinate system (in …\nThe depth data associated with the frame. Not all frames …\nReturns the enum value of <code>depth_data_accuracy</code>, or the …\nReturns the value of <code>depth_data_filtered</code>, or the default …\nIndicates whether the depth_data_map contains temporally …\nReturns the value of <code>depth_data_map</code>, or the default value …\nPNG representation of the grayscale depth data map. See …\nReturns the value of <code>depth_data_map_height</code>, or the default …\nThe height of the depth buffer map.\nReturns the value of <code>depth_data_map_original_maximum_value</code>…\nReturns the value of <code>depth_data_map_original_minimum_value</code>…\nThe original range of values expressed by the …\nReturns the value of <code>depth_data_map_raw_values</code>, or the …\nThe row-major flattened array of the depth buffer map …\nReturns the value of <code>depth_data_map_width</code>, or the default …\nThe width of the depth buffer map.\nReturns the enum value of <code>depth_data_quality</code>, or the …\nReturns the value of <code>depth_data_timestamp</code>, or the default …\nThe depth data object timestamp associated with the frame. …\nReturns the value of <code>depth_data_type</code>, or the default value …\nPixel format type of the original captured depth data.\nMost recent samples of device motion data.\nList of edges connecting keypoints\nThe estimated width and length of the detected plane.\n3x4 row-major matrix relating a camera’s position and …\nFace anchor information associated with the frame. Not all …\nThe faces of the mesh.\nVector of magnetic field estimate.\nList of annotated data per each frame in sequence + frame …\nUnique frame id, corresponds to images.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA coarse triangle mesh representing the topology of the …\nA coarse triangle mesh representing the general shape of …\n3D information about the mesh such as its shape and …\nThe gravity acceleration vector expressed in the device’…\nMost recent samples of raw gyroscope data.\nIndicates whether the keypoint is hidden or not.\nUnique object id through a sequence. There might be …\nReturns the value of <code>identifier</code>, or the default value if …\nReturns the value of <code>identifier</code>, or the default value if …\nThe ID of the plane.\nA list of unique identifiers corresponding to detected …\nThe ID of the mesh.\nReturns the value of <code>image_resolution_height</code>, or the …\nReturns the value of <code>image_resolution_width</code>, or the …\nThe width and height, in pixels, of the captured camera …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n3x3 row-major matrix relating a camera’s internal …\nReturns the value of …\nReturns the value of …\nThe image dimensions to which the intrinsic_matrix values …\n3x3 row-major matrix that converts between the 2D camera …\nA list of floating-point values describing radial …\nReturns the value of <code>is_tracked</code>, or the default value if …\nIndicates whether the anchor’s transform is valid. …\nList of all the key points associated with this object in …\nInitialization value for all the keypoints in the skeleton …\nFor each objects, list all the annotated keypoints here. …\nReturns the value of <code>lens_distortion_center_x</code>, or the …\nThe offset of the distortion center of the camera lens …\nReturns the value of <code>lens_distortion_center_y</code>, or the …\nA list of floating-point values describing radial …\nLight information associated with the frame.\nReturns the magnetic field vector filtered with respect to …\nRaw magnetic field measured by the magnetometer.\nMost recent samples of raw magnetometer data.\nSet of mesh anchors containing the mesh data.\nReturns the enum value of <code>method</code>, or the default if the …\nSnapshot of Core Motion CMMotionManager object containing …\nThe name of the keypoint (e.g. legs, head, etc.). Does not …\nRays that define which direction is outside for each face. …\nNested message and enum types in <code>Object</code>.\nReference to the object identifier in ObjectInstance.\nList of all the annotated 3D objects in this sequence in …\nReturns the value of <code>pixel_size</code>, or the default value if …\nThe size, in millimeters, of one image pixel.\nPlane anchors associated with the frame. Not all frames …\nPlane center and normal in camera frame.\nThe list of detected points.\nA vector indicating the orientation of the strongest …\nReturns the value of <code>primary_light_intensity</code>, or the …\nThe estimated intensity, in lumens, of the strongest …\n4x4 row-major transform matrix appropriate for rendering …\nAppends the provided enum value to <code>classification</code>.\nThe current intermediate results of the scene analysis …\nThe origin keypoint in the object coordinate system. (i.e. …\n3x3 row-major rotation matrix describing the orientation …\nThe rotation rate of the device adjusted by bias-removing …\nRaw rotation rate as measured by the gyroscope.\n3x1 vector describing the scale of the rigid object’s …\nSets <code>alignment</code> to the provided enum value.\nSets <code>calibration_accuracy</code> to the provided enum value.\nSets <code>classification</code> to the provided enum value.\nSets <code>classification_status</code> to the provided enum value.\nSets <code>depth_data_accuracy</code> to the provided enum value.\nSets <code>depth_data_quality</code> to the provided enum value.\nSets <code>method</code> to the provided enum value.\nSets <code>tracking_state</code> to the provided enum value.\nSets <code>tracking_state_reason</code> to the provided enum value.\nSets <code>type</code> to the provided enum value.\nkeypoint id of the edge’s sink\nkeypoint id of the edge’s source\nData describing the estimated lighting environment in all …\nReturns the value of <code>texture_coordinate_count</code>, or the …\nReturns the value of <code>texture_coordinate_count</code>, or the …\nThe number of elements in the texture_coordinates list.\nThe number of elements in the texture_coordinates buffer.\nA buffer of texture coordinate values for each point in …\nReturns the value of <code>timestamp</code>, or the default value if …\nReturns the value of <code>timestamp</code>, or the default value if …\nReturns the value of <code>timestamp</code>, or the default value if …\nReturns the value of <code>timestamp</code>, or the default value if …\nReturns the value of <code>timestamp</code>, or the default value if …\nReturns the value of <code>timestamp</code>, or the default value if …\nThe device motion data object timestamp. May differ from …\nThe accelerometer data object timestamp. May differ from …\nThe gyroscope data object timestamp. May differ from the …\nThe magnetometer data object timestamp. May differ from …\nThe timestamp for the frame.\nThe timestamp for the data.\nThe timestamp for the frame.\nReturns the enum value of <code>tracking_state</code>, or the default …\nReturns the enum value of <code>tracking_state_reason</code>, or the …\n4x4 row-major matrix expressing position and orientation …\n4x4 row-major matrix encoding the position, orientation, …\n4x4 row-major matrix encoding the position, orientation, …\n4x4 row-major matrix encoding the position, orientation, …\n3x1 vector describing the translation of the rigid object…\nReturns the value of <code>triangle_count</code>, or the default value …\nReturns the value of <code>triangle_count</code>, or the default value …\nThe number of triangles described by the triangle_indices …\nEach set of three indices forms a triangle, so the number …\nEach integer value in this ordered list represents an …\nEach integer value in this ordered list represents an …\nReturns the enum value of <code>type</code>, or the default if the …\nThe acceleration that the user is giving to the device.\nReturns the value of <code>vertex_count</code>, or the default value if …\nReturns the value of <code>vertex_count</code>, or the default value if …\nThe number of elements in the vertices list.\nThe number of elements in the vertices buffer.\nA buffer of vertex positions for each point in the plane …\nThe vertices of the mesh.\n4x4 row-major transform matrix appropriate for converting …\nVisibiity of this annotation in a frame.\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nThe position of the keypoint in the local coordinate …\nx-y position of the 2d keypoint in the image coordinate …\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nReturns the value of <code>blend_shape_coefficient</code>, or the …\nIndicates the current position of the feature relative to …\nReturns the value of <code>blend_shape_location</code>, or the default …\nIdentifier for the specific facial feature.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe orientation of the camera, expressed as roll, pitch, …\nThe device is moving too fast for accurate image-based …\nNot yet enough camera or motion data to provide tracking …\nNot enough distinguishable features for image-based …\nTracking is available, but the quality of results is …\nThe current tracking state is not limited.\nCamera position tracking is providing optimal results.\nTracking is limited due to a relocalization in progress.\nThe general quality of position tracking available when …\nA possible diagnosis for limited position tracking quality …\nCamera position tracking is not available.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>TrackingState</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>TrackingStateReason</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TrackingState</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>TrackingStateReason</code>.\nReturns the value of <code>pitch</code>, or the default value if <code>pitch</code> …\nReturns the value of <code>roll</code>, or the default value if <code>roll</code> is …\nReturns the value of <code>yaw</code>, or the default value if <code>yaw</code> is …\nEach texture coordinate represents UV texture coordinates …\nEach vertex represents a 3D point in the face mesh, in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>u</code>, or the default value if <code>u</code> is unset.\nReturns the value of <code>v</code>, or the default value if <code>v</code> is unset.\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nType of objects\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>MeshClassification</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>MeshClassification</code>.\n/ Indices of vertices defining the face from correspondent …\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nThe plane is perpendicular to gravity.\nThe classification process for the plane anchor has …\nThe classification status for the plane.\nWrapper for a 3D point / vector within the plane. See …\nNo classication information can be provided (set on error …\nThe classification process has not completed.\nThe classification process for the plane anchor has …\nThe plane is parallel to gravity.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Alignment</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>PlaneClassification</code>, or <code>None</code> if <code>value</code> …\nConverts an <code>i32</code> to a <code>PlaneClassificationStatus</code>, or <code>None</code> if …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Alignment</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>PlaneClassification</code>.\nReturns <code>true</code> if <code>value</code> is a variant of …\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nEach texture coordinate represents UV texture coordinates …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>u</code>, or the default value if <code>u</code> is unset.\nReturns the value of <code>v</code>, or the default value if <code>v</code> is unset.\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nValues in the depth map are absolutely accurate in the …\nIndicates the general accuracy of the depth_data_map.\nQuality of the depth_data_map.\nValues in the depth map are usable for …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Accuracy</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>Quality</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Accuracy</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Quality</code>.\nIndicates the calibration accuracy of a magnetic field …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>CalibrationAccuracy</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>CalibrationAccuracy</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value of <code>w</code>, or the default value if <code>w</code> is unset.\nReturns the value of <code>x</code>, or the default value if <code>x</code> is unset.\nReturns the value of <code>y</code>, or the default value if <code>y</code> is unset.\nReturns the value of <code>z</code>, or the default value if <code>z</code> is unset.\nCreated by data annotation.\nCreated by data augmentation.\nEnum to reflect how this object is created.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …\nConverts an <code>i32</code> to a <code>Method</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Method</code>.")