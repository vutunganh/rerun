searchState.loadedDescShard("re_arrow_util", 0, "Helpers for working with arrow\nDowncast an arrow array to another array, without having …\nCreate a sparse list-array out of an array of arrays.\nCreate a sparse list-array out of an array of arrays.\nApplies a <code>arrow::compute::concat</code> kernel to the given <code>arrays</code>…\nConcatenates the given <code>RecordBatch</code>es, regardless of their …\nDowncast an arrow array to another array, without having …\nExtract the element at <code>idx</code> from a <code>FixedSizeListArray</code>.\nApplies a filter kernel to the given <code>array</code>.\nReturns true if the given <code>list_array</code> is semantically empty.\nReturns a new <code>RecordBatch</code> where all <em>top-level</em> fields are …\nAn empty array of the given datatype.\nReturns a new [<code>ListArray</code>] with len <code>entries</code>.\nReturns an iterator with the lengths of the offsets.\nCreate a new <code>ListArray</code> of target length by appending null …\nCreate a new <code>ListArray</code> of target length by appending null …\nRepartitions a <code>ListArray</code> according to the specified <code>lengths</code>…\nGiven a sparse <code>ListArray</code> (i.e. an array with a nulls …\nApplies a take kernel to the given <code>array</code>.\nSimilar to <code>downcast_array_ref</code>, but returns an error in …\nConvert <code>[A, B, null, D, …]</code> into …\nDowncast an arrow array to another array, without having …\nCreate a sparse list-array out of an array of arrays.\nCreate a sparse list-array out of an array of arrays.\nApplies a <code>arrow::compute::concat</code> kernel to the given <code>arrays</code>…\nDowncast an arrow array to another array, without having …\nExtract the element at <code>idx</code> from a <code>FixedSizeListArray</code>.\nApplies a filter kernel to the given <code>array</code>.\nReturns true if the given <code>list_array</code> is semantically empty.\nAn empty array of the given datatype.\nReturns a new [<code>ListArray</code>] with len <code>entries</code>.\nReturns an iterator with the lengths of the offsets.\nCreate a new <code>ListArray</code> of target length by appending null …\nCreate a new <code>ListArray</code> of target length by appending null …\nRepartitions a <code>ListArray</code> according to the specified <code>lengths</code>…\nGiven a sparse <code>ListArray</code> (i.e. an array with a nulls …\nApplies a take kernel to the given <code>array</code>.\nSimilar to <code>downcast_array_ref</code>, but returns an error in …\nConvert <code>[A, B, null, D, …]</code> into …\nConcatenates the given <code>RecordBatch</code>es, regardless of their …\nReturns a new <code>RecordBatch</code> where all <em>top-level</em> fields are …")