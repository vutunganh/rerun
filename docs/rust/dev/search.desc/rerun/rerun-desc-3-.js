searchState.loadedDescShard("rerun", 3, "Show a prefix before the number, e.g. “x: “\nIf true, the most common glyphs (ASCII) are pre-rendered …\nWhere did the current click/drag originate? <code>None</code> if no …\nWhen did the current click/drag originate? <code>None</code> if no …\nThe previous text value.\nWas the primary button clicked this frame?\nIs the primary button currently down?\nWas the primary button pressed this frame?\nWas the primary button released this frame?\nWhat to paint - either a <code>Mesh</code> or a <code>PaintCallback</code>.\nCreate a child Ui with an explicit <code>Id</code>.\nPush another level onto the <code>UiStack</code>.\nAdd a <code>Widget</code> to this <code>Ui</code> at a specific location (manual …\nShow a <code>RadioButton</code>. Often you want to use <code>Self::radio_value</code>…\nShow radio-buttons to switch between light mode, dark mode …\nShow a <code>RadioButton</code>. It is selected if …\nAlign text to top. Only applicable together with …\nPrefer using <code>RichText</code> directly!\nSets valid range for dragging the value.\nThe raw input we got this frame from the backend.\nYou probably want to use <code>Self::smooth_scroll_delta</code> instead.\nRead the response of some widget, which may be called …\nExplicit reason; human readable.\nWhere the area is on screen.\nSee also <code>Self::rect_filled</code> and <code>Self::rect_stroke</code>.\nWhere to paint.\nBounding rect.\nThe area of the screen we are talking about.\nThe full widget rectangle, in local layer coordinates.\nIs the pointer (mouse/touch) above this rectangle in this …\nDoes the given rectangle contain the mouse pointer?\nSee also <code>Self::rect_stroke</code>.\nSee also <code>Self::rect_filled</code>.\nIf <code>true</code>, <code>egui</code> will discard the loaded image data after the …\nCreate a new image from a patch of the current image.\nClone a sub-region as a new image.\nHelper function to handle pan and zoom interactions on a …\nThis is called by <code>Response::widget_info</code>, but can also be …\nLinearly remap a value from one range to another, so that …\nLike <code>remap</code>, but also clamps the value so that the returned …\nThe intersection of a source flags value with the …\nWhy are we repainting?\nSchedule a repaint of this viewport after this delay.\nIf any widget moves or changes id, repaint everything.\nReplaces all contents of this string with <code>text</code>\nRequest to discard the visual output of this pass, and to …\nWas <code>crate::Context::request_discard</code> called during the …\nGive keyboard focus to a specific widget. See also …\nRequest that this widget get keyboard focus.\nCall this if there is need to repaint the UI, i.e. if you …\nRequest repaint after at most the specified duration …\nRequest repaint after at most the specified duration …\nRepaint after this many seconds.\nCall this if there is need to repaint the UI, i.e. if you …\nWas <code>crate::Context::request_discard</code> called?\nWas a repaint requested last pass for the current viewport?\nWas a repaint requested last pass for the given viewport?\nThis command requires the parent viewport to repaint.\nMake room for this many additional triangles (will reserve …\nMake room for this many additional vertices. See also …\nForget window positions, sizes etc. Can be used to …\nShow a button to reset a value to its default. The button …\nShow a button to reset a value to its default. The button …\nReset to the default style set in <code>Context</code>.\nCan panel be resized by dragging the edge of it?\nCan panel be resized by dragging the edge of it?\nCan the user resize the window by dragging its edges?\nCan you resize it with the mouse?\nUsage: …\nLook up this <code>TextStyle</code> in <code>Style::text_styles</code>.\nRead the <code>Ui</code>s background <code>Response</code>. It’s <code>Sense</code> will be …\nThe response of the modal contents\nThe response of the area.\nSet the return key combination.\nRGBA pixels, with separate/unmultiplied alpha.\nThe id should be globally unique, e.g. …\n<code>max.x</code>\n<code>max.x</code>\nPlace elements horizontally, right to left.\nRight margin, as <code>f32</code>\nRotates the vector by 90°, i.e positive X to positive Y …\nRotate by some angle about an origin, in-place.\nRotate the image about an origin by some angle\nRotate the bounds (will expand the <code>Rect</code>)\nRotate the image about an origin by some angle\nRotation in radians. Moving fingers around each other will …\nUseful for pixel-perfect rendering of lines that are one …\nUseful for pixel-perfect rendering.\nUseful for pixel-perfect rendering.\nUseful for pixel-perfect rendering of filled shapes.\nRounded so that two adjacent rects that tile perfectly …\nUseful for pixel-perfect rendering of lines that are one …\nRounded so that two adjacent rects that tile perfectly …\nRounded so that two adjacent rects that tile perfectly …\nUseful for pixel-perfect rendering.\nThe rounding of the <em>outer</em> corner of the <code>Self::stroke</code> (or, …\nRound the corners of the image.\nSet rounding for the <code>ImageButton</code>.\nRows of text, from top to bottom.\nRun the ui code for one frame.\nSame rounding on all four corners.\nThe same margin on every side.\nScale the shape by <code>factor</code>, in-place.\nScale the font’s glyphs by this much. this is only a …\nScale up by this factor in each direction, keeping the …\nScale up by this factor in each direction, keeping the …\nCreate a scoped child ui.\nCreate a child, add content to it, and then allocate only …\nCreate a child, add content to it, and then allocate only …\nThis is a signal to any backend that we want the …\nPosition and size of the egui area.\nPosition and size of the area that egui should use, in …\nPosition and size of the egui area.\nFull size of the screen, in pixels.\nEnable/disable horizontal/vertical scrolling. <code>false</code> by …\nTurn on/off scrolling on the horizontal/vertical axes.\nControls the spacing of a <code>crate::ScrollArea</code>.\nEnable/disable horizontal/vertical scrolling. <code>false</code> by …\nTurn on/off scrolling on the horizontal/vertical axes.\nThe animation that should be used when scrolling a …\nSpecify within which screen-space rectangle to show the …\nSets the <code>ScrollBarVisibility</code> of the window.\nSet the visibility of both horizontal and vertical scroll …\nSet the horizontal and vertical scroll offset position.\nAdjust the scroll position of any parent <code>crate::ScrollArea</code> …\nSame as <code>Self::scroll_to_cursor</code>, but allows you to specify …\nAdjust the scroll position until this UI becomes visible.\nLike <code>Self::scroll_to_me</code>, but allows you to specify the …\nAdjust the scroll position of any parent <code>crate::ScrollArea</code> …\nSame as <code>Self::scroll_to_rect</code>, but allows you to specify …\nScroll this many points in the given direction, in the …\nSame as <code>Self::scroll_with_delta</code>, but allows you to specify …\nControls the speed at which we zoom in when doing ctrl/cmd …\nRadius of the rounding of the South-East (right bottom) …\nRadius of the rounding of the South-East (right bottom) …\nWas the secondary button clicked this frame?\nReturns true if this widget was clicked this frame by the …\nIs the secondary button currently down?\nWas the secondary button pressed this frame?\nWas the secondary button released this frame?\nCan the user select the text with the mouse?\nShow a label which can be selected or not.\nShow selectable text. It is selected if …\nIf <code>true</code>, mark this button as “selected”.\ncheckboxes, radio-buttons etc\nIf <code>true</code>, mark this button as “selected”.\nThe current value of checkboxes and radio buttons.\nWhat we show as the currently selected value\nAdd a command to <code>PlatformOutput::commands</code>, for the …\nSend a command to the current viewport.\nSend a command to a specific viewport.\nBy default, buttons senses clicks. Change this to a …\nMake the label respond to clicks and/or drags.\nExplicitly set a sense.\nSet if you want sense clicks and/or drags. Default is …\nMake the image respond to clicks and/or drags.\nBy default, buttons senses clicks. Change this to a …\nThe senses (click and/or drag) that the widget was …\nHow the widget responds to interaction.\nShortcut for <code>add(Separator::default())</code>\nAssign a new image to an existing texture.\nModify an existing <code>Shape</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nNew or changed textures. Apply before painting.\n<code>max.y</code>\nKeep size\nScreen-space rectangle for clipping what we paint in this …\nEverything painted in this <code>Painter</code> will be clipped against …\nSet the cursor icon.\nTurn on/off whether or not to debug widget layout on hover.\nSet which widget is being dragged.\nSet which widget is being dragged.\nIf <code>true</code>, <code>Self::show_viewport_deferred</code> and …\nCalling <code>set_enabled(false)</code> will cause the <code>Ui</code> to deny all …\nIf true, all windows, menus, tooltips etc are to be …\nIf set, colors will be modified to look like this\nSet an event filter for a widget.\nTell <code>egui</code> which fonts to use.\nkeep min\nSet both the minimum and maximum height.\n<code>ui.set_height_range(min..=max);</code> is equivalent to …\nFor integrations: Set this to render a sync viewport.\nCalling <code>set_invisible()</code> will cause all further widgets to …\nIf <code>false</code>, nothing added to the painter will be visible\nRedirect where you are painting.\n<code>min.x</code>\nMove the left top positions of the area.\nSet the maximum height of the ui. You won’t be able to …\nSet the maximum size of the ui. You won’t be able to …\nSet the maximum width of the ui. You won’t be able to …\nSet the minimum height of the ui. This can’t shrink the …\nSet the minimum size of the ui. This can’t shrink the …\nSet the minimum width of the ui. This can’t shrink the …\nLimit focus to widgets on the given layer and above. If …\nMake the widget in this <code>Ui</code> semi-transparent.\nSet the opacity (alpha multiplier) of everything painted …\nSet the operating system we are running on.\nAssign a new image to a subregion of the whole texture.\nSet a drag-and-drop payload.\nSet the number of physical pixels for each logical point. …\nFor integrations: this callback will be called when an …\n<code>max.x</code>\nSet row height in horizontal wrapping layout.\nSet to true in special cases where we do one frame where …\nChanges apply to this <code>Ui</code> and its subsequent children.\nThe currently active <code>Style</code> used by all new windows, panels …\nThe <code>Style</code> used by all new windows, panels etc. Use …\nMark the <code>child</code> layer as a sublayer of <code>parent</code>.\nThe <code>Theme</code> used to select between dark and light <code>Self::style</code>\n<code>min.y</code>\nTransform the graphics of the given layer.\nCalling <code>set_visible(false)</code> will cause all further widgets …\nThe <code>crate::Visuals</code> used by all subsequent windows, panels …\nThe <code>crate::Visuals</code> used by all subsequent windows, panels …\nkeep min\nSet both the minimum and maximum width.\n<code>ui.set_width_range(min..=max);</code> is equivalent to …\nSets zoom factor of the UI. Will become active at the …\nShow a ui for settings (style and tessellation options).\nOptional drop-shadow behind the frame.\nOptional drop-shadow behind the frame.\nWhat to paint.\nEither of the shift keys are down.\nIs shift the only pressed button?\nShort and readable summary\nShort and readable summary\nShort and readable summary\nShow some text on the right side of the button, in weak …\nShould the modal be closed? Returns true if:\nShow the modal.\nShow the panel at the top level.\nShow the panel at the top level.\nReturns <code>None</code> if the window is not open (if <code>Window::open</code> …\nShow the <code>TextEdit</code>, returning a rich <code>TextEditOutput</code>.\nShow the given ui surrounded by this frame.\nShow the panel at the top level.\n<code>scene_rect</code> contains the view bounds of the inner <code>Ui</code>.\nShow the <code>ScrollArea</code>, and add the contents to the viewport.\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow either a collapsed or a expanded panel, with a nice …\nShow either a collapsed or a expanded panel, with a nice …\nShow either a collapsed or a expanded panel, with a nice …\nShow either a collapsed or a expanded panel, with a nice …\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShow the panel if <code>is_expanded</code> is <code>true</code>, otherwise don’t …\nShould the <code>CollapsingHeader</code> show a background behind it? …\nShow using dynamic dispatch.\nShow a list of items with the given selected index.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow the panel inside a <code>Ui</code>.\nShow a spinner when the image is loading.\nShow the progress in percent on the progress bar.\nEfficiently show only the visible part of a large number …\nShow a separator line, even when not interacting with it?\nShow a separator line, even when not interacting with it?\nShow a tooltip at the current pointer position (if any).\nShow a tooltip at the given position.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip under the given area.\nShow some text at the current pointer position (if any).\nAlways show this tooltip, even if disabled and the user isn…\nAlways show this tooltip, even if disabled and the user isn…\nShow the combo box, with the given ui code for the menu …\nControl whether or not the slider shows the current value. …\nThis can be used to only paint the visible part of the …\nShow a deferred viewport, creating a new native window, if …\nShow an immediate viewport, creating a new native window, …\nShrink by this much on each side, keeping the center\nShrink by this much in each direction, keeping the center\nContract each end of the separator line by this much.\nShrink by this much in each direction, keeping the center\nConstrain the rectangle in which we can paint.\nConstrain the rectangle in which we can paint.\nHelper: shrinks the max height to the current height, so …\nFit the image to 100% of its available size, shrinking it …\nHelper: shrinks the max width to the current width, so …\nSigned distance to the edge of the box.\nNo newlines (<code>\\n</code>) allowed. Pressing enter key will result …\n<code>rect.size() == Vec2 { x: rect.width(), y: rect.height() }</code>\nwidth x height\nSelect the font size (in points). This overrides the value …\nSets the spinner’s size. The size sets both the height …\nwidth, height.\nwidth, height\nHeight in points.\nLast known size.\nwidth x height\nSet to true in special cases where we do one frame where …\nPretend like <code>count</code> widgets have been allocated.\nDefault rail height of a <code>Slider</code>.\nShow trailing color behind the circle of a <code>Slider</code>. Default …\nDefault width of a <code>Slider</code>.\nShow small text.\nMake this a small button, suitable for embedding into text.\nSmaller text.\nPrefer using <code>RichText</code> directly!\nA button as small as normal body text.\nFor e.g. exponents.\nPrefer using <code>RichText</code> directly!\nFor logarithmic sliders that includes zero: what is the …\nTurn smart aim on/off. Default is ON. There is almost no …\nHow many points the user scrolled, smoothed over a few …\nSet spacing between columns/rows. Default: …\nThe current spacing options for this <code>Ui</code>. Short for …\nHow much space we take up. The line is painted in the …\nThe horizontal spacing between the left and right UIs.\nSizes and distances between widgets\nMutably borrow internal <code>Spacing</code>. Changes apply to this <code>Ui</code> …\nThe length of the range, i.e. <code>max - min</code>.\nThe default egui fonts supports around 1216 emojis in …\nHow much the value changes when dragged one point (logical …\nShortcut for <code>add(Spinner::new())</code>\nSet both <code>x</code> and <code>y</code> to the same value.\nSplit rectangle in left and right halves. <code>t</code> is expected to …\nSplit rectangle in left and right halves at the given <code>x</code> …\nThis is for platforms that only support 16-bit index …\nSplit rectangle in top and bottom halves. <code>t</code> is expected to …\nSplit rectangle in top and bottom halves at the given <code>y</code> …\nExpand the shadow in all directions by this much.\n<code>[2, 1]</code> for wide screen, and <code>[1, 2]</code> for portrait, etc. At …\nReturns the textures as <code>sRGBA</code> premultiplied pixels, row by …\nTime since last frame (in seconds), but gracefully handles …\nGet a reference to this <code>Ui</code>’s <code>UiStack</code>.\nPosition of the pointer at the time the gesture started.\nChange which row number the grid starts on. This can be …\nPoint in time when the gesture started.\nSets the minimal change of the value.\nThe scroll handle will stick to the bottom position even …\nThe scroll handle will stick to the rightmost position …\nStop dragging any widget.\nStop dragging any widget.\nStop editing the active <code>TextEdit</code> (if any).\nDraw a line through the text, crossing it out.\nPrefer using <code>RichText</code> directly!\nIf <code>true</code>, add a subtle background color to every other row.\nWhether or not Grids and Tables should be striped by …\nOverride button stroke. Note that this will override any …\nThe width and color of the outline around the frame.\nThe width and color of the outline around the frame.\nShow text that stand out a bit (e.g. slightly brighter).\nExtra strong text (stronger color).\nPrefer using <code>RichText</code> directly!\negui theme (spacing, colors, etc).\nStyle options for this <code>Ui</code> and its children.\nThe currently active <code>Style</code> used by all subsequent windows, …\nOverride the style.\nMutably borrow internal <code>Style</code>. Changes apply to this <code>Ui</code> …\nMutate the currently active <code>Style</code> used by all subsequent …\nMutate the <code>Style</code> used by all subsequent windows, panels …\nThe <code>Style</code> used by all subsequent windows, panels etc.\nEdit the <code>Style</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nAdd a suffix to the number, this can be e.g. a unit (“°…\nAdd a suffix to the number, this can be e.g. a unit (“°…\nTotal margins on both sides\nSurrender keyboard focus for a specific widget. See also …\nSurrender keyboard focus for this widget.\nRadius of the rounding of the South-West (left bottom) …\nRadius of the rounding of the South-West (left bottom) …\nEmoji or name representing the key\nMargins with the same size on opposing sides\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDoes the OS use dark or light mode? This is used when the …\nDoes the OS use dark or light mode?\nIf <code>true</code>, pressing tab will act on the widget, and NOT move …\nUser tags.\nClears all characters in this buffer and returns a string …\nHelper: move volatile (deltas and events), clone the rest.\nHelper: move <code>Self::events</code>, clone the other fields.\nTake everything ephemeral (everything except <code>cursor_icon</code> …\nRetrieve and clear the payload, if any.\nTessellate the given shapes into triangle meshes.\nRead-only access to <code>TessellationOptions</code>.\nControls the tessellator.\nRead-write access to <code>TessellationOptions</code>.\nLow-level texture manager.\nThe full, non-elided text of the input job.\nA custom text to display on the progress bar.\nShow a text next to the slider (e.g. explaining what the …\nLay out and paint some text.\nHow the text cursor acts.\nA <code>TextEdit</code> for multiple lines. Pressing enter key will …\nNo newlines (<code>\\n</code>) allowed. Pressing enter key will result …\nDefault width of a <code>crate::TextEdit</code>.\nHelpers regarding text selection for labels and text edit.\nSelected range of characters in <code>Self::current_text_value</code>.\nOverride the <code>TextStyle</code>.\nOverride the <code>TextStyle</code> if, and only if, this is a <code>RichText</code>.\nThe height of text of this text style.\nAll known text styles.\nThe <code>FontFamily</code> and size you want to use for a specific …\nHow to vertically align text\nThe texture to use when drawing these triangles.\nTexture options used when creating the texture.\nSize of the texture, if known.\nShow stats about the allocated textures.\nTexture changes since last frame (including the font …\nThe <code>Theme</code> used to select the appropriate <code>Style</code> (dark or …\nPreference for selection between dark and light …\nMonotonically increasing time, in seconds. Relative to …\nTime in seconds. Relative to whatever. Used for animation.\nHow long has it been (in seconds) since the pointer was …\nHow long has it been (in seconds) since the pointer was …\nHow long has it been (in seconds) since the use last …\nMultiply image color with this. Default is WHITE (no tint).\nMultiply image color with this. Default is WHITE (no tint).\nMultiply image color with this. Default is WHITE (no tint).\nName of the viewport, if known.\nThe title of the viewport. <code>eframe</code> will use this as the …\nShow title bar on top of the window? If <code>false</code>, the window …\nConvert <code>Min =&gt; 0.0</code>, <code>Center =&gt; 0.5</code> or <code>Max =&gt; 1.0</code>.\nTransforms per layer.\nTreat this vector as a position. <code>v.to_pos2()</code> is equivalent …\nConvert <code>Min =&gt; -1.0</code>, <code>Center =&gt; 0.0</code> or <code>Max =&gt; 1.0</code>.\n-1, 0, or +1 for each axis\nThe vector from origin to this position. <code>p.to_vec2()</code> is …\nConvert to a float <code>Vec2</code> where the components are 1.0 for …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nToggle the given popup between closed and open.\nActs like a checkbox, but looks like a <code>SelectableLabel</code>.\nWidth of a tooltip (<code>on_hover_ui</code>, <code>on_hover_text</code> etc).\nThe id should be globally unique, e.g. …\n<code>min.y</code>\nPlace elements vertically, top to bottom.\nTop-down layout justified so that buttons etc fill the …\nRetrieve the <code>LayerId</code> of the top level windows.\nGet the top modal layer (from the previous frame).\n<code>min.y</code>\nTop margin, as <code>f32</code>\nHow much extra space the frame uses up compared to the …\nDisplay trailing color behind the slider’s circle. …\nTransform the mesh in-place with the given transform.\nMove the shape by this many points, in-place.\nTransform all the graphics at the given layer.\nTranslate location by this much, in-place\nMove the shape by <code>delta</code>, in-place.\nMove all the graphics at the given layer.\nRelative movement (comparing previous frame and current …\nIterate over the triangles of this mesh, returning vertex …\nReturns true if this widget was triple-clicked this frame …\nReturns true if this widget was triple-clicked this frame …\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Truncate</code>.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Truncate</code>.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Truncate</code>.\nTry loading the bytes from the given uri using any …\nTry loading the image from the given uri using any …\nTry loading the texture from the given uri using any …\nExtra scale and vertical tweak to apply to all text of …\nThe type of widget this is.\nAllocate space, interact, paint, and return a <code>Response</code>.\nShow the options in the ui.\nIs the pointer (mouse/touch) above the current <code>Ui</code>?\nProvide some information about the new <code>Ui</code> being built.\nDraw a line under the text.\nPrefer using <code>RichText</code> directly!\nThe union of two bounding rectangle, i.e. the minimum <code>Rect</code> …\nA logical “or” operation. For instance …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThis is a globally unique ID of this <code>Ui</code>, based on where in …\nTime since last frame, in seconds.\nUpdate the value on each key press when text-editing the …\nReturns the URI of the image.\nGet the <code>uri</code> that this image was constructed from.\nShow the URL of hyperlinks in a tooltip when hovered.\nHow much space is used by panels and windows.\nHow much space is used by panels and windows.\nMiscellaneous tools used by the rest of egui.\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nIf you use a small font and <code>Align::TOP</code> you can get the …\nThe inner value of the <code>Id</code>.\nThe current value of sliders etc.\n<code>vec2(x, y) == Vec2::new(x, y)</code>\nCurrent velocity of pointer.\nStart a ui with vertical layout. Widgets will be …\nExplicitly ask for a vertical line.\nMake this a vertical slider.\nCreate a vertical scroll area.\nSet the vertical align of the inner text.\ne.g. for when aligning text within a button.\nIf <code>true</code>, pressing vertical arrows will act on the widget, …\nStart a ui with vertical layout. Widgets will be …\nStart a ui with vertical layout. Widgets will be …\nSet the vertical scroll offset position.\nThe vertex data indexed by <code>indices</code>.\negui supports multiple viewports, corresponding to …\nRead the state of the current viewport.\nInfo about the active viewport\nInfo about the active viewport\nViewport in points.\nRead the state of a specific current viewport.\nReturn the <code>ViewportId</code> of the current viewport.\nThis is used to specify what viewport that should repaint.\nThe id of the active viewport.\nThe viewport rectangle. This is what you would use in e.g. …\nAll the active viewports, including the root.\nThe user-code that shows the GUI.\nThe user-code that shows the GUI, used for deferred …\nInformation about all egui viewports.\nThe visual bounding rectangle (includes stroke widths)\nThe current visuals settings of this <code>Ui</code>. Short for …\nColors etc.\nMutably borrow internal <code>visuals</code>. Changes apply to this <code>Ui</code> …\nA vertical line.\nPaints a vertical line.\nEnable/disable vertical scrolling. <code>false</code> by default.\nTurn on/off scrolling on the vertical axis.\nIf <code>true</code>, egui is currently listening on text input (e.g. …\nTrue if egui is currently interested in the pointer (mouse …\nThe <code>crate::Context</code> will call this at the end of each frame …\nA good color for warning text (e.g. orange).\nHelper function that adds a label when compiling with …\nCheck reusing of <code>Id</code>s, and show a visual warning on screen …\nWas this popup visible last frame?\nShow text that is weaker (fainter color).\nExtra weak text (fainter color).\nPrefer using <code>RichText</code> directly!\nReturns <code>true</code> if the widget with the given <code>Id</code> contains the …\nFor accessibility.\nCalculate the <code>widget_rect</code> from the <code>content_rect</code>.\nWidgets are pieces of GUI such as <code>Label</code>, <code>Button</code>, <code>Slider</code> …\nVisual styles of widgets\nSet the outer width of the button and menu.\nImage width. This should be a multiple of 4.\nThe allowable width range for the panel, including margins.\nWill the visual output of this pass be discarded?\nWindow background color.\nHighlight the topmost window.\nHorizontal and vertical margins within a window frame.\nGenerate a new <code>Id</code> by hashing the parent <code>Id</code> and the given …\nCall the provided function with the given ID pushed on the …\nWhether the window will be initially focused or not.\nThis window is always on top\nOn Wayland\nSets whether clamp the window’s size to monitor’s …\nCreate a painter for a sub-region of this <code>Painter</code>.\nDoes not work on X11.\nThe alignment to use on the cross axis.\nJustify widgets along the cross axis?\nSets whether the window should have a border, a title bar, …\nOn Windows: enable drag and drop support. Drag and drop can\nSets whether the window should be put into fullscreen upon …\nmacOS: Makes the window content appear behind the titlebar.\nThe application icon, e.g. in the Windows task bar or the …\nRequests the window to be of specific dimensions.\nRedirect shapes to another paint layer.\nRedirect where you are painting.\nThe new layout will take up all available space.\nThe alignment to use on the main axis.\nJustify widgets on the main axis?\nWrap widgets when we overflow the main axis?\nSets the maximum dimensions a window can have.\nDoes not work on X11.\nRequest that the window is maximized upon creation.\nSets the minimum dimensions a window can have.\nDoes not work on X11.\nOn desktop: mouse clicks pass through the window, used for …\nReturns a response with a modified <code>Self::rect</code>.\nThe initial “outer” position of the window, i.e. where …\nSets whether the window is resizable or not.\nSetting this will allow for dynamic coloring of rows of …\nInsert a tag with no value.\nInsert a tag with some value.\nwindows: Whether show or hide the window icon in the …\nSets the initial title of the window in the title bar.\nmacOS: Set to <code>false</code> to hide the window title.\nmacOS: Set to <code>false</code> to hide the titlebar button (close, …\nmacOS: Set to <code>false</code> to make the titlebar transparent, …\nSets whether the background of the window should be …\nSets whether the window will be initially visible or …\nCreate a new Scope and transform its contents via a …\nControl if window is always-on-top, always-on-bottom, or …\nOn X11\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Wrap</code>.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Wrap</code>.\nSet <code>Self::wrap_mode</code> to <code>TextWrapMode::Wrap</code>.\nIf set, labels, buttons, etc. will use this to determine …\nControls the wrap mode used for the selected text.\nWhich wrap mode should the text use in this <code>Ui</code>?\nSet the wrap mode for the text.\nSet the wrap mode for the text.\nHow to wrap the texture when the texture coordinates are …\nIf set, labels, buttons, etc. will use this to determine …\nShould text wrap in this <code>Ui</code>?\nReturns an alignment by the X (horizontal) axis\nHow far to the right.\nRightwards. Width.\nReturns an alignment by the Y (vertical) axis\nHow far down.\nDownwards. Height.\nShift font’s glyphs downwards by this amount of logical …\nShift font’s glyphs downwards by this fraction of the …\nSwizzle the axes.\nZoom scale factor this frame (e.g. from ctrl-scroll or …\nProportional zoom factor (pinch gesture).\n2D non-proportional zoom scale factor this frame (e.g. …\n2D non-proportional zoom factor (pinch gesture).\nGlobal zoom factor of the UI.\nGlobal zoom factor of the UI.\nSet the allowed zoom range.\nIf <code>true</code>, egui will change the scale of the ui (…\nWhat mouse button? For touches, use <code>PointerButton::Primary</code>.\nThe direction of the vector indicates how to move the …\nHashed device identifier (if available; may be zero). Can …\nDescribes how hard the touch device was pressed. May …\nUnique identifier of a finger/pen. Value is stable from …\nMost of the time, it’s the logical key, heeding the …\nThe state of the modifier keys at the time of the event.\nThe state of the modifier keys at the time of the event.\nThe state of the modifier keys at the time of the event.\nOne of: start move end cancel.\nThe physical key, corresponding to the actual position on …\nWhere is the pointer?\nPosition of the touch (or where the touch was last …\nWas it pressed or released?\nWas it the button/touch pressed this frame, or released?\nIf this is a <code>pressed</code> event, is it a key-repeat?\nThe unit of <code>delta</code>: points, lines, or pages.\nWhatever was passed to <code>crate::ViewportCommand::Screenshot</code>.\nThe unique identifier for this image, e.g. …\nAn action to be taken on an accessibility node.\nHandles requests from assistive technologies or other …\nHandles activation of the application’s accessibility …\nA 2D affine transform. Derived from kurbo.\nDo the equivalent of a single click or tap.\nDefines a custom action for a UI element.\nRequires <code>ActionRequest::data</code> to be set to …\nHandles deactivation of the application’s accessibility …\nDecrement a numeric value by one step.\nA transform that is flipped on the x-axis.\nA transform that is flipped on the y-axis. Useful for …\nAn accessibility node snapshot that can’t be modified. …\nA generic container that should be ignored by assistive …\nE.g. most toolbars and separators.\nThe identity transform.\nIncrement a numeric value by one step.\nIndicates if a form control has invalid input or if a web …\nBehaves similar to an ARIA grid but is primarily used by …\nContains the bullet, number, or other marker for a list …\nA single accessible object. A complete UI is represented …\nThe stable identity of a <code>Node</code>, unique within the node’s …\nThe point at the origin; (0, 0).\nLanguage specific ordering (alpha, roman, cjk-ideographic, …\nA 2D point. Derived from kurbo.\nA rectangle. Derived from kurbo.\nDelete any selected text in the control’s text value and …\nThe type of an accessibility node.\nScroll any scrollable containers to make the target object …\nOptional target rectangle for <code>Action::ScrollIntoView</code>, in …\nScroll the given object to a specified point in the tree’…\nTarget for <code>Action::ScrollToPoint</code>, in platform-native …\nRequires <code>ActionRequest::data</code> to be set to …\nTarget for <code>Action::SetScrollOffset</code>, in the coordinate space\nDon’t focus this node, but set it as the sequential …\nRequires <code>ActionRequest::data</code> to be set to …\nReplace the value of the control with the specified value …\nA 2D size. Derived from kurbo.\nThis is just like a multi-line document, but signals that …\nThe data associated with an accessibility tree that’s …\nA serializable representation of an atomic change to a <code>Tree</code>…\nA 2D vector. Derived from kurbo.\nE.g. menu or combo box.\nThe point (0, 0).\nThe empty rectangle at the origin.\nA size with zero width or height.\nThe vector (0, 0).\nTake absolute value of width and height.\nA single character, usually part of this node’s name, …\nA single character, usually part of this node’s name, …\nThe position where the selection started, and which does …\nThe name of the application this tree belongs to.\nThe area of the rectangle.\nGet the coefficients of the transform.\nA way for application authors to identify this node for …\nA way for application authors to identify this node for …\nBackground color in RGBA.\nBackground color in RGBA.\nThe bounding box of this node, in the node’s coordinate …\nThe bounding box of this node, in the node’s coordinate …\nThe index of an item in <code>Node::character_lengths</code>, or the …\nFor text runs, the length (non-inclusive) of each character\nFor text runs, the length (non-inclusive) of each character\nFor text runs, this is the position of each character …\nFor text runs, this is the position of each character …\nFor text runs, this is the advance width of each character,\nFor text runs, this is the advance width of each character,\nIndicates that this node clips its children, i.e. may have …\nIndicates that this node clips its children, i.e. may have …\nFor <code>Role::ColorWell</code>, specifies the selected color in RGBA.\nFor <code>Role::ColorWell</code>, specifies the selected color in RGBA.\nReturns <code>true</code> if <code>point</code> lies within <code>self</code>.\nDeactivate the application’s accessibility …\nCompute the determinant of this transform.\nNote: division by a scalar is implemented by multiplying …\nPerform the requested action. If the requested action is …\nThe active end of the selection, which changes as the …\nThe node within this tree that has keyboard focus when the …\nOnly present when different from parent.\nOnly present when different from parent.\nFont size is in pixels.\nFont size is in pixels.\nFont weight can take on any arbitrary numeric value. …\nFont weight can take on any arbitrary numeric value. …\nForeground color in RGBA.\nForeground color in RGBA.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA new rectangle from origin and size.\nA new rectangle from two points.\nThe height of the rectangle.\nThe height.\nInner HTML of an element. Only used for a top-level math …\nInner HTML of an element. Only used for a top-level math …\nThe intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the inverse transform.\nUse for a control or group of controls that disallows …\nUse for a control or group of controls that disallows …\nWhether this rectangle has zero area.\nWhether this node is expanded, collapsed, or neither.\nWhether this node is expanded, collapsed, or neither.\nIs this map finite?\nExclude this node and its descendants from the tree …\nExclude this node and its descendants from the tree …\nIndicates whether this node causes a hard line-break (e.g. …\nIndicates whether this node causes a hard line-break (e.g. …\nIf a dialog box is marked as explicitly modal.\nIf a dialog box is marked as explicitly modal.\nIs this map NaN?\nIndicates whether this node causes a page break.\nIndicates whether this node causes a page break.\nUse for a text widget that allows focus/selection but not …\nUse for a text widget that allows focus/selection but not …\nIndicates whether this node is selected or unselected.\nIndicates whether this node is selected or unselected.\nThis element allows touches to be passed through when a …\nThis element allows touches to be passed through when a …\nA keystroke or sequence of keystrokes, complete with any …\nA keystroke or sequence of keystrokes, complete with any …\nThe label of a control that can have a label. If the label …\nThe label of a control that can have a label. If the label …\nOnly present when different from parent.\nOnly present when different from parent.\nThe list style type. Only available on list items.\nThe list style type. Only available on list items.\nCreates an affine transformation that takes the unit …\nReturns the maximum value for the x-coordinate of the …\nReturns the maximum value for the y-coordinate of the …\nReturns the minimum value for the x-coordinate of the …\nReturns the minimum value for the y-coordinate of the …\nConstruct an affine transform from coefficients.\nCreate a new <code>Point</code> with the provided <code>x</code> and <code>y</code> coordinates.\nA new rectangle from minimum and maximum coordinates.\nCreate a new <code>Size</code> with the provided <code>width</code> and <code>height</code>.\nCreate a new vector.\nThe node’s role must be <code>Role::TextRun</code>.\nZero or more new or updated nodes. Order doesn’t matter.\nThe origin of the rectangle.\nAs with the <code>aria-owns</code> property in ARIA, this property …\nAs with the <code>aria-owns</code> property in ARIA, this property …\nIf a text input has placeholder text, it should be exposed …\nIf a text input has placeholder text, it should be exposed …\nOn radio buttons this should be set to a list of all of …\nOn radio buttons this should be set to a list of all of …\nRequests a <code>TreeUpdate</code> with a full tree. If the application …\nAn optional string that may override an assistive …\nAn optional string that may override an assistive …\nThe identifier of the tree’s root node.\nAn affine transform representing uniform scaling.\nAn affine transform representing non-uniform scaling with …\nThe size of the rectangle.\nAn optional string that may override an assistive …\nAn optional string that may override an assistive …\nConvert this vector into a <code>Point</code>.\nConvert this vector into a <code>Size</code>.\nConvert this point into a <code>Vec2</code>.\nConvert this size into a <code>Vec2</code>, with <code>width</code> mapped to <code>x</code> and …\nThe name of the UI toolkit in use.\nThe version of the UI toolkit.\nIf a node’s only accessible name comes from a tooltip, …\nIf a node’s only accessible name comes from a tooltip, …\nAn affine transform to apply to any coordinates within …\nAn affine transform to apply to any coordinates within …\nCompute the bounding box of a transformed rectangle.\nAn affine transform representing translation.\nRarely updated information about the tree as a whole. This …\nThe smallest rectangle enclosing two rectangles.\nCompute the union with one point.\nThe width of the rectangle.\nThe width.\nCreate a new <code>Rect</code> with the same size as <code>self</code> and a new …\nCreate a new <code>Rect</code> with the same origin as <code>self</code> and a new …\nFor text runs, the length of each word in characters, as …\nFor text runs, the length of each word in characters, as …\nThe x coordinate.\nThe x-coordinate.\nThe minimum x coordinate (left edge).\nThe maximum x coordinate (right edge).\nThe y coordinate.\nThe y-coordinate.\nThe minimum y coordinate (top edge in y-down spaces).\nThe maximum y coordinate (bottom edge in y-down spaces).\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nA <code>HashSet</code> using <code>RandomState</code> to hash the items. (Requires …\nA <code>Hasher</code> for hashing an arbitrary stream of bytes.\nType alias for HashMap&lt;K, V, ahash::RandomState&gt;\nA convenience trait that can be used together with the …\nType alias for HashSet&lt;K, ahash::RandomState&gt;\nA convenience trait that can be used together with the …\nProvides a Hasher factory. This is typically used (e.g. by …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>AHashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nConstructs a new AHasher with keys based on this …\nConstructs a new AHasher with fixed keys. If <code>std</code> is …\nCreates an empty <code>AHashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nThis crates a hashmap from the provided iterator using …\nThis crates a hashset from the provided iterator using …\nCreate a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nCalculates the hash of a single value. This provides a …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nConstructs a new HashMap\nConstructs a new HashSet\nThis crates a hashmap using RandomState::new which obtains …\nThis crates a hashset using RandomState::new. See the …\nCreate a new <code>RandomState</code> <code>BuildHasher</code> using random keys.\nRemoves a key from the map, returning the value at the key …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nConstructs a new HashMap with a given initial capacity\nConstructs a new HashSet with a given initial capacity\nThis crates a hashmap with the specified capacity using …\nThis crates a hashset with the specified capacity using …\nBuild a <code>RandomState</code> from a single key. The provided key …\nAllows for explicitly setting the seeds to used. All …\nA supplier of Randomness used for different hashers. See …\nProvides a Hasher factory. This is typically used (e.g. by …\nProvides an optional way to manually supply a source of …\nA typemap of many caches, all implemented with <code>CacheTrait</code>.\nA cache, storing some value for some length of time.\nSomething that does an expensive computation that we want …\nCaches the results of a computation for one frame. If it …\nStores a key:value pair for the duration of this frame and …\nMust be called once per frame to clear the cache.\nMust be called once per frame to clear the cache.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet from cache (if the same key was used last frame) or …\nRetrieve a value if it was published this or the previous …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of values currently in the cache.\nPublish the value. It will be available for the duration …\nCall once per frame to evict cache.\nCall once per frame to evict cache.\nIndicate whether a popup will be shown above or below the …\nAn area on the screen that can be moved by dragging.\nState of an <code>Area</code> that is persisted between frames.\nA panel that covers the remainder of the screen, i.e. …\nPopup will be closed on click anywhere, inside or outside …\nPopup will be closed if the click happened somewhere else …\nA header which can be collapsed/expanded, revealing a …\nThe response from showing a <code>CollapsingHeader</code>.\nA drop-down selection menu with a descriptive label.\nA frame around some content, including margin, colors, etc.\nA function that paints the <code>ComboBox</code> icon\nClicks will be ignored. Popup might be closed manually by …\nA modal dialog. Similar to a <code>crate::Window</code> but centered …\nThe response of a modal dialog.\nDetermines popup’s close behavior\nA region that can be resized by dragging the bottom right …\nA container that allows you to zoom and pan.\nAdd vertical and/or horizontal scrolling to a contained <code>Ui</code>.\nA panel that covers the entire left or right side of a <code>Ui</code> …\nPut some widgets on the left and right sides of a ui.\nA panel that covers the entire top or bottom of a <code>Ui</code> or …\nBuilder for a floating window which can be dragged, …\nIs there any popup open? We need to check this before the …\nThe response of the modal backdrop.\nNone iff collapsed.\nNone iff collapsed.\nThe rounding of the <em>outer</em> corner of the <code>Self::stroke</code> (or, …\nThe background fill color of the frame, within the …\nFrame container\nResponse of the actual clickable header.\nThe inner response from the content closure\nMargin within the painted frame.\nIf false, clicks goes straight through to what is behind …\nIs this the topmost modal?\nAt what time was this area first shown?\nWhat is the id of the next tooltip for this widget?\n0.0 if fully closed, 1.0 if fully open, and something …\nMargin outside the painted frame.\nPanels are <code>Ui</code> regions taking up e.g. the left side of a <code>Ui</code> …\nThe anchor point of the area, i.e. where on the area the …\nLast known position of the pivot.\nShow popup windows, tooltips, context menus etc.\nShows a popup above or below another widget.\nHelper for <code>popup_above_or_below_widget</code>.\nThe response of the modal contents\nOptional drop-shadow behind the frame.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip at the given position.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip under the given area.\nShow some text at the current pointer position (if any).\nLast known size.\nThe width and color of the outline around the frame.\nWas this popup visible last frame?\nA header which can be collapsed/expanded, revealing a …\nThe response from showing a <code>CollapsingHeader</code>.\nThis is a a building block for building collapsing regions.\nFrom <code>CollapsingState::show_header</code>.\nA function that paints an icon indicating if the region is …\nReturns the response of the collapsing button, the custom …\nNone iff collapsed.\nNone iff collapsed.\nReturns the response of the collapsing button, the custom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nResponse of the actual clickable header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0 for closed, 1 for open, with tweening\n0.0 if fully closed, 1.0 if fully open, and something …\nPaint the arrow icon that indicated if the region is open …\nShow body if we are open, with a nice animation between …\nShow body if we are open, with a nice animation between …\nShows header and body (if expanded).\nPaint this <code>CollapsingState</code>’s toggle button. Takes an …\nA frame around some content, including margin, colors, etc.\nAllocate the space that was used by <code>Self::content_ui</code>.\nAdd your widgets to this UI so it ends up within the frame.\nThe rounding of the <em>outer</em> corner of the <code>Self::stroke</code> (or, …\nConvenience for calling <code>Self::allocate_space</code> and …\nThe background fill color of the frame, within the …\nThe frame that was prepared.\nReturns the argument unchanged.\nMargin within the painted frame.\nCalls <code>U::from(self)</code>.\nMargin outside the painted frame.\nPaint the frame.\nOptional drop-shadow behind the frame.\nThe width and color of the outline around the frame.\nA modal dialog. Similar to a <code>crate::Window</code> but centered …\nThe response of a modal dialog.\nIs there any popup open? We need to check this before the …\nThe response of the modal backdrop.\nThe inner response from the content closure\nIs this the topmost modal?\nThe response of the modal contents\nA panel that covers the remainder of the screen, i.e. …\nState regarding panels.\n<code>Left</code> or <code>Right</code>\nA panel that covers the entire left or right side of a <code>Ui</code> …\nA panel that covers the entire top or bottom of a <code>Ui</code> or …\n<code>Top</code> or <code>Bottom</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe size of the panel (from previous frame).\nPopup will be closed on click anywhere, inside or outside …\nPopup will be closed if the click happened somewhere else …\nClicks will be ignored. Popup might be closed manually by …\nDetermines popup’s close behavior\nWhat is the id of the next tooltip for this widget?\nShows a popup above or below another widget.\nHelper for <code>popup_above_or_below_widget</code>.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip at the given position.\nShow a tooltip at the current pointer position (if any).\nShow a tooltip under the given area.\nShow some text at the current pointer position (if any).\nWas this popup visible last frame?\nHide scroll bar even if they are needed.\nAlways show the scroll bar, even if the contents fit in …\nAdd vertical and/or horizontal scrolling to a contained <code>Ui</code>.\nIndicate whether the horizontal and vertical scroll bars …\nShow scroll bars only when the content size exceeds the …\nThe size of the content. If this is larger than …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>Id</code> of the <code>ScrollArea</code>.\nWhat the user closure returned.\nWhere on the screen the content is (excludes scroll bars).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPositive offset means scrolling down/right\nThe current state of the scroll area.\nGet the current kinetic scrolling velocity.\nPrint this text next to the cursor at the end of the pass.\nControls texturing of a <code>crate::RectShape</code>.\nBackend-specific painting.\nCircle with optional outline and fill.\nHow to paint a circle.\nA <code>Mesh</code> or <code>PaintCallback</code> within a clip rectangle.\nA <code>Shape</code> within a clip rectangle.\nRGBA image.\nThis format is used for space-efficient color …\nA 2D RGBA color image in RAM.\nHow paths will be colored.\nHow rounded the corners of things should be.\nHow rounded the corners of things should be, in <code>f32</code>.\nA cubic Bézier Curve.\nA cubic Bézier Curve.\nEllipse with optional outline and fill.\nHow to paint an ellipse.\nUsed for the font texture.\nFont of unknown size.\nHow to select a sized font.\nA single-channel image designed for the font texture.\nThe collection of fonts used by <code>epaint</code>.\nText that has been laid out, ready for painting.\nWas epaint compiled with the <code>rayon</code> feature?\nHue, saturation, value, alpha. All in the range [0, 1]. No …\nLike Hsva but with the <code>v</code> value (brightness) being gamma …\nAn image stored in RAM.\nA change to an image.\nThe stroke should be painted entirely inside of the shape\nA line between two points.\nTextures allocated using <code>TextureManager</code>.\nA value for all four sides of a rectangle, often used to …\nA value for all four sides of a rectangle, often used to …\nTextured triangles in two dimensions.\nA general triangle mesh.\nA version of <code>Mesh</code> that uses 16-bit indices.\nThe stroke should be painted right on the edge of the …\nA font where each character is the same width (<code>w</code> is the …\nSame as <code>PathStroke::default</code>.\nOne of the names in <code>FontDefinitions::families</code>.\nPaint nothing. This can be useful as a placeholder.\nThe stroke should be painted entirely outside of the shape\nIf you want to paint some 3D shapes inside an egui region, …\nInformation passed along with <code>PaintCallback</code> (…\nCollected allocation statistics for shapes and meshes.\nA series of lines between points. The path can have a …\nA path which can be stroked and/or filled (if closed).\nDescribes the width and color of paths. The color can …\nA position on screen.\nA rendering primitive - either a <code>Mesh</code> or a <code>PaintCallback</code>.\nA font where some characters are wider than other (e.g. ‘…\nA quadratic Bézier Curve.\nA quadratic Bézier Curve.\nA rectangular region of space.\nRectangle with optional outline and fill.\nHow to paint a rectangle.\n0-1 linear space <code>RGBA</code> color with premultiplied alpha.\nThe color and fuzziness of a fuzzy shape.\nA paint primitive such as a circle or a piece of text. …\nThe entire path is one solid color, this is the default.\nDescribes the width and color of a line.\nDescribes how the stroke of a shape should be painted.\nTessellation quality options\nConverts <code>Shape</code>s into triangles (<code>Mesh</code>).\nText.\nHow to paint some text on screen.\nContains font data in an atlas, where each character …\nUsed to paint images.\nWhat texture to use in a <code>Mesh</code> mesh.\nLow-level manager for allocating textures.\nProvide a callback which takes in the path’s bounding …\nYour own texture, defined in any which way you want. The …\nRecursively nest more shapes - sometimes a convenience to …\nA vector has a direction and length. A <code>Vec2</code> is often used …\nThe 2D vertex type.\nSize of the viewport in whole, physical pixels.\nThe UV coordinate of a white region of the texture mesh.\nNo rounding on any corner.\nalpha 0-1. A negative value signifies an additive color …\nalpha 0-1. A negative value signifies an additive color …\nAllocate a new texture.\nReturns the coordinates of where the rect ended up, and …\nGet meta-data about all allocated textures in some …\nRotate text by this many radians clockwise. The pivot is …\nMake sure each corner has a rounding of at least this.\nMake sure each corner has a rounding of at most this.\nCall at the start of each frame with the latest known …\nThe maximum distance between the original curve and the …\nThe width of the blur, i.e. the width of the fuzzy …\nIf larger than zero, the edges of the rectangle (for both …\nControls texturing, if any.\nPaint something custom (e.g. 3D stuff).\nClip rectangle in points.\nClip / scissor rectangle. Only show the part of the <code>Shape</code> …\nClip / scissor rectangle. Only show the part of the <code>Mesh</code> …\nNumber of separate clip rectangles\nIf true, connect the first and last of the points together.\nA line that closes back to the start point again.\nIf <code>true</code> (default) cull certain primitives before …\nsRGBA with premultiplied alpha\nColor of the opaque center of the shadow.\nA convex polygon with a fill and optional stroke.\nHow rounded the corners of the rectangle are.\nIf true, no clipping will be done.\nOutput the clip rectangles to be painted.\nOutput the text-containing rectangles.\nSet to true the text was truncated due to …\nThe default value will be 1.0e-5, it will be used during …\nAny <code>Color32::PLACEHOLDER</code> in the galley will be replaced by …\nList of all known font families.\nWhat font family to use.\nUse “feathering” to smooth out the edges of shapes as …\nThe size of the feathering, in physical pixels.\nFill is only supported for convex polygons.\nHow to fill the rectangle.\nWhen this get high, it might be time to clear and start …\nThe texture to use when painting this rectangle, if any.\nIf the rect should be filled with a texture, which one?\nFind out the t value for the point where the curve is …\nfind a set of points that approximate the cubic Bézier …\nfind a set of points that approximate the quadratic …\nfind a set of points that approximate the cubic Bézier …\nHow full is the font atlas?\nCall at the end of each frame (before painting) to get the …\nCurrent size of the font image. Pass this to …\nIterates through the curve invoking a callback at each …\nCompute a flattened approximation of the curve, invoking a …\nFree an existing texture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPhysical pixel offset for bottom side of the viewport.\nConvert from ui points.\nCreates a cubic Bézier curve based on 4 points and stroke.\nCreate a new quadratic Bézier shape based on the 3 points …\nUpdate the whole texture.\nThe laid out text, from <code>Fonts::layout_job</code>.\nWidth of this character in points.\nhue 0-1\nhue 0-1\nCan we display this glyph?\nCan we display all the glyphs in this text?\nViewport height in physical pixels.\nConstruct a <code>crate::Color32</code> from a hex RGB or RGBA string …\nThe full font atlas image.\nThe full font atlas image.\nWhat to set the texture to.\nDraw as triangles (i.e. the length is always multiple of …\nDraw as triangles (i.e. the length is always multiple of …\nSet the stroke to be painted entirely inside of the shape\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if width is zero or color is solid and transparent\nDo all corners have the same rounding?\nAre the margin on every side the same?\nAre all indices within the bounds of the contained …\nIs this affecting the whole texture? If <code>false</code>, this is a …\nThe job that this galley is the result of. Contains the …\nWill wrap text at the given width and line break at <code>\\n</code>.\nLike <code>Self::layout</code>, made for when you want to pick a color …\nLayout some text.\nWill line break at <code>\\n</code>.\nPhysical pixel offset for left side of the viewport.\nA line through many points.\nLogical bounding rectangle (ignoring stroke width)\nLogical bounding rectangle (ignoring stroke width)\nThe other corner, opposing <code>Self::min</code>. Usually the right …\nTight bounding box around all the meshes in all the rows. …\nGet meta-data about a specific texture.\nSet the stroke to be painted right on the edge of the …\nOne of the corners of the rectangle, usually the left top …\nHelper module that adds extra checks when the …\nRadius of the rounding of the North-East (right top) …\nRadius of the rounding of the North-East (right top) …\nRadius of the rounding of the North-East (right top) …\nSee also <code>Self::filled</code> and <code>Self::stroke</code>.\nThe given fallback color will be used for any uncolored …\nCreate a new <code>Tessellator</code>.\nCreate a new <code>Fonts</code> for text layout. This call is …\nCreate a new <code>PathStroke</code> with a UV function\nTotal number of allocated textures.\nTotal number of indices in all the row meshes.\nTotal number of vertices in all the row meshes.\nRadius of the rounding of the North-West (left top) corner.\nRadius of the rounding of the North-West (left top) corner.\nRadius of the rounding of the North-West (left top) corner.\nMove the shadow by this much.\nIf set, the text will be rendered with the given opacity …\nSet the stroke to be painted entirely outside of the shape\nIf set, the text color in the galley will be ignored and …\nIf <code>rayon</code> feature is activated, should we parallelize …\nUpdate a sub-region of an existing texture.\nThe pixels, row by row, from top to bottom.\nThe coverage value.\nPixels per point.\nThe number of physical pixels for each logical point. …\nThe first point is the starting point and the last one is …\nThe first point is the starting point and the last one is …\nFilled paths should prefer clockwise order.\nIf <code>None</code>, set the whole texture to <code>Self::image</code>.\nLogical pixel coordinates (points). (0,0) is the top left …\nTop left corner of the first character.\n<code>pos2(x, y) == Pos2::new(x, y)</code>\nReturns the locations and sizes of pre-rasterized discs …\nIf <code>true</code>, small filled circled will be optimized by using …\nWhat to paint - either a <code>Mesh</code> or a <code>PaintCallback</code>.\nRadius is the vector (a, b) where the width of the Ellipse …\nWhere to paint.\nBounding rect.\nIncrease the retain-count of the given texture.\nIf <code>true</code> (default), align right-angled line segments to the …\nIf <code>true</code> (default), align rectangles to the physical pixel …\nIf <code>true</code> (default) align text to the physical pixel grid. …\nSnap the rectangle to pixels?\nHeight of one row of text in points.\nRows of text, from top to bottom.\nsaturation 0-1\nsaturation 0-1\nSame rounding on all four corners.\nThe same margin on every side.\nCalculate the point (x,y) at t based on the cubic Bézier …\nCalculate the point (x,y) at t based on the quadratic …\nFull size of the screen, in pixels.\nRadius of the rounding of the South-East (right bottom) …\nRadius of the rounding of the South-East (right bottom) …\nRadius of the rounding of the South-East (right bottom) …\nAssign a new image to an existing texture, or update a …\nSet the <code>Rect</code> to use for culling.\nThe shape\nwidth, height.\nwidth, height\nHeight in points.\nsplit the original cubic curve into a new one within a …\nExpand the shadow in all directions by this much.\nCollect statistics about what is being painted.\nColor and thickness of the line.\nThe thickness and color of the outline.\nIs the stroke on the inside, outside, or centered on the …\nTotal margins on both sides\nRadius of the rounding of the South-West (left bottom) …\nRadius of the rounding of the South-West (left bottom) …\nRadius of the rounding of the South-West (left bottom) …\nMargins with the same size on opposing sides\nCall to get the change to the image since last call.\nTake and reset changes since last frame.\nTessellate a single <code>CircleShape</code> into a <code>Mesh</code>.\nTessellate a clipped shape into a list of primitives.\nTessellate a single <code>CubicBezierShape</code> into a <code>Mesh</code>.\nTessellate a single <code>EllipseShape</code> into a <code>Mesh</code>.\nTessellate a line segment between the two points with the …\nTessellate a single <code>Mesh</code> into a <code>Mesh</code>.\nTessellate a single <code>PathShape</code> into a <code>Mesh</code>.\nTessellate a single <code>QuadraticBezierShape</code> into a <code>Mesh</code>.\nTessellate a single <code>Rect</code> into a <code>Mesh</code>.\nTessellate a single <code>Shape</code> into a <code>Mesh</code>.\nTurns <code>Shape</code>:s into sets of triangles.\nTessellate a single <code>TextShape</code> into a <code>Mesh</code>.\nConverts graphics primitives into textured triangles.\nEverything related to text, fonts, text layout, cursors …\nThe font atlas. Pass this to <code>crate::Tessellator</code>.\nThe texture to use when drawing these triangles.\nThe texture to use when drawing these triangles.\nThe texture options suitable for a font texture\nConvert the quadratic Bézier curve to one <code>PathShape</code>. The …\nConvert the cubic Bézier curve to one or two <code>PathShape</code>’…\nPhysical pixel offset for top side of the viewport.\nTransform the curve with the given transform.\nTransform the curve with the given transform.\nAdd this underline to the whole text. You can also set an …\nWhat UV coordinates to use for the texture?\nNormalized texture coordinates. (0, 0) is the top left …\nvalue 0-1, in gamma-space (~perceptually even)\nvalue 0-1\nIf <code>true</code>, invalid meshes will be silently ignored. If <code>false</code>…\n<code>vec2(x, y) == Vec2::new(x, y)</code>\nThe vertex data indexed by <code>indices</code>.\nThe vertex data indexed by <code>indices</code>.\nViewport in points.\nThe visual bounding rectangle (includes stroke width)\nThe visual bounding rectangle (includes stroke width)\nThe visual bounding rectangle (includes stroke width)\nThe visual bounding rectangle (includes stroke width)\nThe visual bounding rectangle (includes stroke width)\nThe visual bounding rectangle (includes stroke width)\nThe visual bounding rectangle\nViewport width in physical pixels.\nRotate text by this many radians clockwise. The pivot is …\nIf larger than zero, the edges of the rectangle (for both …\nRender text with this opacity in gamma space\nUse the given color for the text, regardless of what color …\nSnap the rectangle to pixels?\nSet if the stroke is on the inside, outside, or centered …\nSet the texture to use when painting this rectangle, if …\nHow far to the right.\nRightwards. Width.\nHow far down.\nDownwards. Height.\nHow paths will be colored.\nThe entire path is one solid color, this is the default.\nProvide a callback which takes in the path’s bounding …\nThis format is used for space-efficient color …\n3 hexadecimal digits, one for each of the r, g, b channels\n4 hexadecimal digits, one for each of the r, g, b, a …\n6 hexadecimal digits, two for each of the r, g, b channels\n8 hexadecimal digits, one for each of the r, g, b, a …\nA wrapper around Color32 that converts to and from a …\nHue, saturation, value, alpha. All in the range [0, 1]. No …\nLike Hsva but with the <code>v</code> value (brightness) being gamma …\n0-1 linear space <code>RGBA</code> color with premultiplied alpha.\nalpha 0-1. A negative value signifies an additive color …\nalpha 0-1. A negative value signifies an additive color …\nlinear [0, 1] -&gt; gamma [0, 1] (not clamped). Works for …\nlinear [0, 1] -&gt; gamma [0, 255] (clamped). Values outside …\nhue 0-1\nhue 0-1\nConstruct a <code>crate::Color32</code> from a hex RGB or RGBA string …\nAll ranges in 0-1, rgb is linear.\ngamma [0, 255] -&gt; linear [0, 1].\nlinear [0, 255] -&gt; linear [0, 1]. Useful for alpha-channel.\ngamma [0, 1] -&gt; linear [0, 1] (not clamped). Works for …\nlinear [0, 1] -&gt; linear [0, 255] (clamped). Useful for …\nAll ranges in 0-1, rgb is linear.\nsaturation 0-1\nsaturation 0-1\nCheap and ugly. Made for graying out disabled <code>Ui</code>s.\nvalue 0-1, in gamma-space (~perceptually even)\nvalue 0-1\nMacro for converting a string literal containing …\nleft/center/right or top/center/bottom alignment for e.g. …\nTwo-dimension alignment, e.g. <code>Align2::LEFT_TOP</code>.\nHorizontal or vertical center.\nExtension trait to provide <code>ord()</code> method.\nWe (sometimes) round sizes and coordinates to an even …\nTrait for rounding coordinates and sizes to align with …\nThis struct tracks recent values of some time series.\nThe identity rotation: nothing rotates\nIs this an integer type?\nLargest finite value\nSmallest finite value\nRight or bottom.\nLeft or top.\nExtends <code>f32</code>, <code>Vec2</code> etc with <code>at_least</code> and <code>at_most</code> as aliases …\nImplemented for all builtin numeric types\nHelper trait to implement <code>lerp</code> and <code>remap</code>.\nWraps a floating-point value to add total order and hash. …\nA position on screen.\nInclusive range of floats, i.e. <code>min..=max</code>, but more …\nHelper trait to implement <code>lerp</code> and <code>remap</code>.\nA rectangular region of space.\nLinearly transforms positions from one <code>Rect</code> to another.\nRepresents a rotation in the 2D plane.\nLinearly transforms positions via a translation, then a …\nA vector has a direction and length. A <code>Vec2</code> is often used …\nTwo bools, one for each axis (X and Y).\nValues must be added with a monotonically increasing time, …\nOne- and two-dimensional alignment (<code>Align::Center</code>, …\nReturn true when arguments are the same within some …\nMore readable version of <code>self.max(lower_limit)</code>\nMore readable version of <code>self.min(upper_limit)</code>\nAverage times rate. If you are keeping track of individual …\nIdentity rotation\nAmount of time contained from start to end in this <code>History</code>.\nEase in, ease out.\nEasing functions for animations.\nCalculate a lerp-factor for exponential smoothing using a …\nLike <code>Self::round_ui</code>, but always rounds towards negative …\nRemove samples that are too old.\nUse as few decimals as possible to show the value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAngle is clockwise in radians. A 𝞃/4 = 90° rotation …\nIf you have a value animating over time, how much towards …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the transform.\nWhere in the range is this value? Returns 0-1 if within …\nIs this a valid, invertible transform?\n<code>(time, value)</code> pairs Time difference between values can be …\nCurrent number of values kept in history\nThe factor by which vectors will be scaled.\nLinear interpolation.\nThe other corner, opposing <code>Self::min</code>. Usually the right …\nMean time difference between values in this <code>History</code>.\nOne of the corners of the rectangle, usually the left top …\nApplies the right hand side transform, then the left hand …\nTransforms the given coordinate.\nTransforms the given rectangle.\nExample:\nCreates a new translation that first scales points around …\nWrap angle to <code>[-PI, PI]</code> range.\nType to provide total order, useful as key in sorted …\n<code>pos2(x, y) == Pos2::new(x, y)</code>\nLinearly remap a value from one range to another, so that …\nLike <code>remap</code>, but also clamps the value so that the returned …\nRound a value to the given number of decimal places.\nWill round the position to be in the center of a pixel.\nRound a size or position to an even multiple of the …\nRounds floating point numbers to an even multiple of the …\nThe scale factors.\nScaling applied first, scaled around (0, 0).\nFind “simple” numbers is some range. Used by sliders.\nTotal number of values seen. Includes those that have been …\nTransforms the given coordinate in the <code>from</code> space to the <code>to</code>…\nTransforms the given coordinate in the <code>from</code> space to the <code>to</code>…\nTransforms the given rectangle in the <code>in</code>-space to a …\nTranslation amount, applied after scaling.\n<code>vec2(x, y) == Vec2::new(x, y)</code>\nCalculate a smooth velocity (per second) over the entire …\nHow far to the right.\nRightwards. Width.\nHow far down.\nDownwards. Height.\nleft/center/right or top/center/bottom alignment for e.g. …\nTwo-dimension alignment, e.g. <code>Align2::LEFT_TOP</code>.\nHorizontal or vertical center.\nRight or bottom.\nLeft or top.\nAllocates a rectangle of the specified <code>size</code> inside the …\nhttps://easings.net/#easeInBack\nhttps://easings.net/#easeInOutBack\nhttps://easings.net/#easeOutBack\nhttps://easings.net/#easeInBounce\nhttps://easings.net/#easeInOutBounce\nhttps://easings.net/#easeOutBounce\nhttps://easings.net/#easeInCirc\nhttps://easings.net/#easeInOutCirc\nhttps://easings.net/#easeOutCirc\nhttps://easings.net/#easeInCubic\nhttps://easings.net/#easeInOutCubic\nhttps://easings.net/#easeOutCubic\nhttps://easings.net/#easeInExpo\nhttps://easings.net/#easeInOutExpo\nhttps://easings.net/#easeOutExpo\nNo easing, just <code>y = x</code>\nhttps://easings.net/#easeInQuad\nhttps://easings.net/#easeInOutQuad\nhttps://easings.net/#easeOutQuad\nhttps://easings.net/#easeInSine\nhttps://easings.net/#easeInOutSine\nhttps://easings.net/#easeOuSine\nFind the “simplest” number in a closed range [min, max]…\nRGBA image.\nA 2D RGBA color image in RAM.\nUsed for the font texture.\nA single-channel image designed for the font texture.\nAn image stored in RAM.\nA change to an image.\nWhat to set the texture to.\nThe pixels, row by row, from top to bottom.\nThe coverage value.\nIf <code>None</code>, set the whole texture to <code>Self::image</code>.\nwidth, height.\nwidth, height\nProvides interior mutability.\nAn RAII implementation of a “scoped lock” of a mutex. …\nProvides interior mutability.\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemember to handle <code>Color32::PLACEHOLDER</code> specially!\nAggregate information about a bunch of allocations.\nCollected allocation statistics for shapes and meshes.\nNumber of separate clip rectangles\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA connected line (without thickness or gaps) which can be …\nTessellation quality options\nConverts <code>Shape</code>s into triangles (<code>Mesh</code>).\nThe maximum distance between the original curve and the …\nIf <code>true</code> (default) cull certain primitives before …\nIf true, no clipping will be done.\nOutput the clip rectangles to be painted.\nOutput the text-containing rectangles.\nThe default value will be 1.0e-5, it will be used during …\nUse “feathering” to smooth out the edges of shapes as …\nThe size of the feathering, in physical pixels.\nThe path is taken to be closed (i.e. returning to the …\nThe path is taken to be closed (i.e. returning to the …\nLike <code>Self::fill</code> but with texturing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>rayon</code> feature is activated, should we parallelize …\nHelpers for constructing paths\nIf <code>true</code>, small filled circled will be optimized by using …\nIf <code>true</code> (default), align right-angled line segments to the …\nIf <code>true</code> (default), align rectangles to the physical pixel …\nIf <code>true</code> (default) align text to the physical pixel grid. …\nA closed path (returning to the first point).\nOpen-ended.\nIf <code>true</code>, invalid meshes will be silently ignored. If <code>false</code>…\nAdd one quadrant of a circle\noverwrites existing points\nThe text should expand the <code>Ui</code> size when reaching its …\nA <code>.ttf</code> or <code>.otf</code> file and a font face index.\nDescribes the font data and the sizes to use.\nFont of unknown size.\nHow to select a sized font.\nExtra scale and vertical tweak to apply to all text of a …\nThe collection of fonts used by <code>epaint</code>.\nThe collection of fonts used by <code>epaint</code>.\nText that has been laid out, ready for painting.\nPrefer this font before all existing ones.\nDescribes the task of laying out text.\nUse this font as a fallback, after all existing ones.\nA font where each character is the same width (<code>w</code> is the …\nOne of the names in <code>FontDefinitions::families</code>.\nSuggested character to use to replace those in password …\nA font where some characters are wider than other (e.g. ‘…\nThe tessellated output of a row.\nOne <code>\\t</code> character is this many spaces wide.\nFormatting option for a section of text.\nHow to wrap and elide text.\nControls the text wrapping and elision of a <code>LayoutJob</code>.\nThe text should be elided using “…” when reaching …\nThe text should wrap to the next line when reaching the <code>Ui</code> …\nLogical width of the glyph.\nHelper for adding a new section when building a <code>LayoutJob</code>.\nWhen using this font’s metrics to layout a row, shift …\nIf <code>true</code>: Allow breaking between any characters. If <code>false</code> …\nIf <code>true</code>, all <code>\\n</code> characters will result in a new <em>paragraph</em>, …\nRange into the galley text\nClosest char at the desired x coordinate. Returns …\nExcludes the implicit <code>\\n</code> after the <code>Row</code>, if any.\nIncludes the implicit <code>\\n</code> after the <code>Row</code>, if any.\nThe character this glyph represents.\nText color\nDifferent types of text cursors, i.e. ways to point into a …\nA <code>.ttf</code> or <code>.otf</code> file and a font face index.\nThe wrap with, with a small margin in some cases.\nSet to true the text was truncated due to …\nIf true, this <code>Row</code> came from a paragraph ending with a <code>\\n</code>. …\nExtra spacing between letters, in points.\nWhich fonts (names) to use for each <code>FontFamily</code>.\nSets the font family and priority\nWhat font family to use.\nFont family\nThe first row must be at least this high. This is in case …\nGet the right font implementation from size and <code>FontFamily</code>.\nThe content of a <code>.ttf</code> or <code>.otf</code> file.\nThe ascent of this font.\nList of font names and their definitions.\nThe height of the tallest font used in the job.\nThe row/line height of this font.\nThe ascent of the sub-font within the font (<code>FontImpl</code>).\nThe row/line height of the sub-font within the font (…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>TextWrapping</code> from a <code>TextWrapMode</code> and an available …\nThe number of triangle indices added before the first …\nThe range of vertices in the mesh that contain glyphs (as …\nOne for each <code>char</code>.\nHow to horizontally align the text (<code>Align::LEFT</code>, …\nCan we display this glyph?\nCan we display all the glyphs in this text?\nWhich font face in the file to use. When in doubt, use <code>0</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe job that this galley is the result of. Contains the …\nJustify text so that word-wrapped rows fill the whole …\nLayout text into a <code>Galley</code>.\nCan be used for first row indentation.\nExplicit line height of the text in points.\nHeight of this row of text.\nSame y range for all characters with the same <code>TextFormat</code>.\nMaximum amount of rows the text galley should have.\nWrap text so that no row is wider than this.\nThe tessellated text, using non-normalized (texel) UV …\nTight bounding box around all the meshes in all the rows. …\nBounds of the mesh, and can be used for culling. Does NOT …\nFont name\nCreate a new <code>FontsImpl</code> for text layout. This call is …\nA row can be as long as it need to be.\nTotal number of indices in all the row meshes.\nTotal number of vertices in all the row meshes.\nCharacter to use to represent elided text.\nThe number of physical pixels for each logical point. …\nBaseline position, relative to the galley. Logical …\nFallback or Primary font\nBounding rect.\nLogical bounding rectangle based on font heights etc. Use …\nRound output sizes using <code>emath::GuiRounding</code>, to avoid …\nRows of text, from top to bottom.\nScale the font’s glyphs by this much. this is only a …\nIndex into <code>LayoutJob::sections</code>. Decides color etc.\nThis is included in case there are no glyphs\nThe different section, which can have different fonts, …\nBreak on <code>\\n</code> and at the given wrap width.\nDoes not break on <code>\\n</code>, but shows the replacement character …\nHeight in points.\nThe text on this row, excluding the implicit <code>\\n</code> if any.\nThe complete text of this job, referenced by <code>LayoutSection</code>.\nElide text that doesn’t fit within the given width, …\nExtra scale and vertical tweak to apply to all text of …\nPosition and size of the glyph in the font texture, in …\nIf you use a small font and <code>Align::TOP</code> you can get the …\nThe mesh, ready to be rendered.\nControls the text wrapping and elision.\nA row can be at most <code>max_width</code> wide but can wrap in any …\nShift font’s glyphs downwards by this amount of logical …\nShift font’s glyphs downwards by this fraction of the …\nCharacter cursor.\nAll different types of cursors together.\nParagraph Cursor\nRow Cursor\nCharacter based (NOT bytes). It is fine if this points to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCharacter offset (NOT byte offset!).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCharacter based (NOT bytes). It is fine if this points to …\n0 is first paragraph, and so on. Note that a single …\nIf this cursors sits right at the border of a wrapped row …\nIf this cursors sits right at the border of a wrapped row …\n0 is first row, and so on. Note that a single paragraph …\nStretches the edge pixels to fill beyond the texture’s …\nLinearly interpolate the nearest neighbors, creating a …\nMirrors the texture with each repetition, creating …\nShow the nearest pixel value.\nTiles the texture across the surface, repeating it …\nHow the texture texels are filtered.\nLow-level manager for allocating textures.\nMeta-data about an allocated texture.\nHow the texture texels are filtered.\nDefines how textures are wrapped around objects when …\nWhat has been allocated and freed during the last period.\n4 or 1\nSize in bytes. width x height x <code>Self::bytes_per_pixel</code>.\nTextures to free after painting.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHow to filter when magnifying (when texels are larger than …\nHow to filter when minifying (when texels are smaller than …\nHow to filter between texture mipmaps.\nA human-readable name useful for debugging.\nThe texture filtering mode to use when rendering.\nFree when this reaches zero.\nNew or changed textures. Apply before painting.\nwidth x height\nHow to wrap the texture when the texture coordinates are …\nWraps a floating-point value to add total order and hash. …\nHash the given value with a predictable hasher.\nHash the given value with the given hasher.\nThe suggested keyboard shortcuts for global gui zooming.\nMake everything larger by increasing <code>Context::zoom_factor</code>.\nShow buttons for zooming the ui.\nMake everything smaller by decreasing <code>Context::zoom_factor</code>.\nPrimary keyboard shortcut for zooming in (<code>Cmd</code> + <code>+</code>).\nSecondary keyboard shortcut for zooming in (<code>Cmd</code> + <code>=</code>).\nKeyboard shortcut for zooming in (<code>Cmd</code> + <code>-</code>).\nKeyboard shortcut for resetting zoom in (<code>Cmd</code> + <code>0</code>).\nPainted behind all floating windows\nDebug layer, always painted last / on top\nPopups, menus etc that should always be painted on top of …\nThis is where painted <code>Shape</code>s end up during a frame.\nAn identifier for a paint layer. Also acts as an …\nNormal moveable windows that you reorder by click\nDifferent layer categories\nA list of <code>Shape</code>s paired with a clip rectangle.\nA unique identifier of a specific <code>Shape</code> in a <code>PaintList</code>.\nThings floating on top of everything else, like tooltips. …\nReturns the index of the new <code>Shape</code> that can be used with …\nRead-only access to all held shapes.\nGet or insert the <code>PaintList</code> for the given <code>LayerId</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>PaintList</code> for the given <code>LayerId</code>.\nGet the <code>PaintList</code> for the given <code>LayerId</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMutate the shape at the given index, if any.\nSet the given shape to be empty (a <code>Shape::Noop</code>).\nModify an existing <code>Shape</code>.\nTransform each <code>Shape</code> and clip rectangle by this much, …\nTransform each <code>Shape</code> and clip rectangle in range by this …\nRepresents a byte buffer.\nRepresents a loader capable of loading raw unstructured …\nRepresents bytes which are currently being loaded.\nMaps URI:s to <code>Bytes</code>, e.g. found with <code>include_bytes!</code>.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nA specific loader does not support the format of the image.\nScale to height.\nAn <code>ImageLoader</code> decodes raw bytes into a <code>ColorImage</code>.\nRepresents an image which is currently being loaded.\nRepresents a failed attempt at loading an image.\nThe loaders of bytes, images, and textures.\nRuntime error: Loading was attempted, but failed (e.g. “…\nProgrammer error: There are no image loaders installed.\nProgrammer error: Failed to find the bytes for this image …\nProgrammer error: Failed to parse the bytes as an image …\nProgrammer error: no matching <code>TextureLoader</code>. Because of …\nA specific loader does not support this scheme or protocol.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nBytes are being loaded.\nImage is loading.\nTexture is loading.\nBytes are loaded.\nImage is loaded.\nTexture is loaded.\nScale original size by some factor.\nScale to size.\nGiven as a hint for image loading requests.\nA texture with a known size.\nA <code>TextureLoader</code> uploads a <code>ColorImage</code> to the GPU, returning …\nRepresents a texture is currently being loaded.\nScale to width.\nIf the loader caches any data, this should return the size …\nIf the loader caches any data, this should return the size …\nIf the loader caches any data, this should return the size …\nReturns the (approximate) size of the error message in …\nImplementations may use this to perform work at the end of …\nImplementations may use this to perform work at the end of …\nImplementations may use this to perform work at the end of …\nForget the given <code>uri</code>.\nForget the given <code>uri</code>.\nForget the given <code>uri</code>.\nForget all URIs ever given to this loader.\nForget all URIs ever given to this loader.\nForget all URIs ever given to this loader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the id and size from a <code>TextureHandle</code>.\nUsed to get a unique ID when implementing one of the …\nUnique ID of this loader.\nUnique ID of this loader.\nUnique ID of this loader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry loading the bytes from the given uri.\nTry loading the image from the given uri.\nTry loading the texture from the given uri.\nCreate a <code>SizedTexture</code> from a texture <code>id</code> with a specific …\nFile contents, e.g. the contents of a <code>.png</code>.\nMime type of the content, e.g. <code>image/png</code>.\nSet if known (e.g. from a HTTP header, or by parsing the …\nSet if known (e.g. from a HTTP header, or by parsing the …\nSet if known (e.g. from a HTTP header, or by parsing the …\nSet if known (e.g. from a HTTP header, or by parsing the …\nWhat is saved between frames.\nMenu root associated with an Id from a Response\nStores the state for the context menu.\nComponents of menu state, public for advanced usage.\nCheck if position is in the menu hierarchy’s area.\nThe menu bar goes well in a <code>crate::TopBottomPanel::top</code>, …\nShow a menu at pointer if primary-clicked response.\nClose menu hierarchy.\nRespond to secondary (right) clicks.\nInteraction with a context menu (secondary click).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a top level menu in a menu bar. This would be …\nConstruct a top level menu with a custom button in a menu …\nConstruct a top level menu with an image in a menu bar. …\nBounding box of this menu (without the sub-menu), …\nUsed to check if any menu in the tree wants to close\nShow a menu at pointer if right-clicked response.\nAndroid OS\nApple iPhone OS\nmacOS\nLinux or Unix other than Android\nAn <code>enum</code> of common operating systems.\nUnknown OS - could be wasm\nWindows\nReturns the argument unchanged.\nUses the compile-time <code>target_arch</code> to identify the OS.\nHelper: try to guess from the user-agent of a browser.\nCalls <code>U::from(self)</code>.\nIndicated an alias, e.g. a shortcut\nSomething can be scrolled in any direction (panned).\nHover a cell in a table\nA widget was clicked.\nA context menu is available\nIndicate that a copy will be made\nPut this image to the system clipboard.\nPut this text to the system clipboard.\nRequest an elevated amount of animations and flair for the …\nFor precision work\nA mouse cursor icon.\nNormal cursor icon, whatever that is.\nA widget was double-clicked.\nA widget gained keyboard focus (by tab key).\nWhat egui emits each frame from <code>crate::Context::run</code>.\nThe thing you are hovering can be grabbed\nYou are grabbing the thing you are hovering\nQuestion mark\nInformation about text being edited.\nRequest a standard amount of attention-grabbing actions.\nOmnidirectional move icon (e.g. arrows in all cardinal …\nCan’t drop here\nShow no cursor\nForbidden\nWhat URL to open, and how.\nOpen this url in a browser.\nCommands that the egui integration should execute at the …\nThings that happened during this frame that the …\nThe non-rendering part of what egui emits each frame.\nPointing hand, used for e.g. web links\nShows that processing is being done, but that the program …\nReset the attention request and interrupt related …\nResize a column\nResize something rightwards (e.g. when dragging the …\nHorizontal resize <code>-</code> to make something wider or more narrow …\nDiagonal resize <code>/</code> (right-up to/from left-down)\nResize something up (e.g. when dragging the top edge of …\nResize something up and right (e.g. when dragging the …\nResize something up and left (e.g. when dragging the …\nDiagonal resize <code>\\</code> (left-up to/from right-down)\nResize a row\nResize something downwards (e.g. when dragging the bottom …\nResize something down and right (e.g. when dragging the …\nResize something down and left (e.g. when dragging the …\nVertical resize <code>|</code> (up-down or down-up)\nResize something leftwards (e.g. when dragging the left …\nText caret, e.g. “Click here to edit text”\nText selection was updated.\nA widget was triple-clicked.\nTypes of attention to request from a user when a native …\nA widget’s value changed.\nVertical text caret, e.g. “Click here to edit vertical …\nNot yet ready, try later.\nDescribes a widget such as a <code>crate::Button</code> or a …\nEnhance!\nLet’s get a better overview\nThe difference in the widget tree since last frame.\nCommands that the egui integration should execute at the …\nIf set, put this text in the system clipboard. Ignore if …\nThe contents of some editable text (for <code>TextEdit</code> fields).\nSet the cursor to this icon.\nWhere the primary cursor is.\nWhether the widget is enabled.\nEvents that may be useful to e.g. a screen reader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is set if, and only if, the user is currently editing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe text on labels, buttons, checkboxes etc.\nIs there a mutable <code>TextEdit</code> under the cursor? Use by <code>eframe</code>…\nIf <code>true</code>, open the url in a new tab. If <code>false</code> open it in …\nHow many ui passes is this the sum of?\nIf set, open this url.\nThe number of physical pixels per logical ui point, for …\nNon-rendering related output.\nThe previous text value.\nWhere the <code>crate::TextEdit</code> is located on screen.\nWas <code>crate::Context::request_discard</code> called during the …\nThe current value of checkboxes and radio buttons.\nWhat to paint.\nSelected range of characters in <code>Self::current_text_value</code>.\nTexture changes since last frame (including the font …\nThe type of widget this is.\nThe current value of sliders etc.\nAll the active viewports, including the root.\nReturned when we wrap some ui-code and want to return both …\nThe result of adding a widget to a <code>Ui</code>.\nUsed for optionally showing a tooltip and checking for …\nThe <code>Id</code> of the widget/area this response pertains.\nWhat the user closure returned.\nThe rectangle sensing interaction.\nThe intrinsic / desired size of the widget.\nWhich layer the widget is part of.\nThe area of the screen we are talking about.\nThe response of the area.\nThe senses (click and/or drag) that the widget was …\nThe word <code>git</code>.\nThe Github logo.\nThe Android logo.\nThe Apple logo.\nTux, the Linux penguin.\nThe Windows logo.\nNormal labels. Easily readable, doesn’t take up too much …\nButtons. Maybe slightly bigger than <code>Self::Body</code>.\nCircular handle\nOptions for help debug egui by adding extra visualization\nDefault text style - will use <code>TextStyle::Body</code>, unless …\nDirectly select size and font family\nA way to select <code>FontId</code>, either by picking one directly or …\nRGB is 0-255 in gamma space.\nShape of the handle for sliders and similar widgets.\nHeading. Probably larger than <code>Self::Body</code>.\nHow and when interaction happens.\n0-1 in linear space.\nSame size as <code>Self::Body</code>, but used when monospace is …\nA user-chosen style, found in <code>Style::text_styles</code>.\nHow to format numbers in e.g. a <code>crate::DragValue</code>.\nHow to display numeric color values.\nRectangular handle\nScroll animation configuration, used when programmatically …\nControls the spacing and visuals of a <code>crate::ScrollArea</code>.\nSelected text, selected elements etc\nUsed when small text is needed.\nControls the sizes and distances between widgets.\nSpecifies the look and feel of egui.\nUse a <code>TextStyle</code> to look up the <code>FontId</code> in <code>Style::text_styles</code>…\nLook and feel of the text cursor.\nAlias for a <code>FontId</code> (font of a certain size).\nControls the visual style (colors etc) of egui.\nbg = background, fg = foreground.\nThe visuals of widgets for different states of interaction.\nThe style of an interactive widget as you are clicking or …\nThe opaqueness of the background when the user is hovering …\nThe opaqueness of the handle when the user is hovering the …\nWidth of a solid vertical scrollbar, or height of a …\nIf true and scrolling is enabled for only one direction, …\nHow many seconds a typical animation should last.\nMargin between contents and scroll bar.\nMargin between scroll bar and the outer container (e.g. …\nThe width of the scroll bars at it largest.\nBackground color of widgets that must have a background …\nFor surrounding rectangle of things that need it, like …\nShould the cursor blink?\nShow a background behind buttons.\nButton size is text size plus this on each side\nAllow child widgets to be just on the border and still …\nBackground color behind code-styled monospaced labels.\nShow a background behind collapsing headers.\nHeight of a combo-box before showing scroll bars.\nDefault (minimum) width of a <code>ComboBox</code>.\nButton frames etc.\nIf true, the visuals are overall dark with light text. If …\nOptions to help debug why egui behaves strangely.\nAlways show callstack to ui on hover.\nShow callstack for the current widget on hover if all …\nThe size used for the <code>Ui::max_rect</code> the first frame.\nThe default text styles of the default egui theme.\nThe opaqueness of the background when the user is neither …\nThe opaqueness of the handle when the user is neither …\nThe style to use for <code>DragValue</code> text.\nScroll with a fixed duration, regardless of distance.\nThe min / max scroll duration.\nA good color for error text (e.g. red).\nMake the frame this much larger.\nShow tooltips explaining <code>DragValue</code>:s etc when hovered.\nVery dark or light color (for corresponding theme). Used …\nSomething just barely different from the background color. …\nStroke and text color of the interactive part of a …\nNo scroll bars until you hover the scroll area, at which …\nIf <code>true</code>, scroll bars float above the content, partially …\nHow much space is allocated for a floating scroll bar?\nThe thin width of floating scroll bars that the user is …\nIf true, use colors with more contrast. Good for floating …\nFormat the given number with the given number of decimals.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake sure the scroll handle is at least this big\nShape of the handle for sliders and similar widgets.\nIf we show the hover ui, include where the next widget is …\nThe style of an interactive widget while you hover it, or …\nThe color used for <code>crate::Hyperlink</code>,\nCheckboxes, radio button and collapsing headers have an …\nCheckboxes, radio button and collapsing headers have an …\nCheckboxes, radio button and collapsing headers have an …\nShow a spinner when loading an image.\nThe style of an interactive widget, such as a button, at …\nIndent collapsing regions etc by this much.\nEnd indented regions with a horizontal line\nDraw a vertical lien left of indented region, in e.g. …\nThe opaqueness of the background when the user is hovering …\nShould the cursor change when the user hovers over an …\nThe opaqueness of the handle when the user is hovering …\nHow close a widget must be to the mouse to have a chance …\nMinimum size of a <code>DragValue</code>, color picker button, and …\nHow and when interaction happens.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHorizontal and vertical spacing between widgets.\nHorizontal and vertical margins within a menu frame.\nHorizontal distance between a menu and a submenu.\nThe default wrapping width of a menu.\nCan the user select text that span multiple labels?\nThe first argument is the number to be formatted. The …\nNew scroll animation\nNo animation, scroll instantly.\nThe style of a widget that you cannot interact with.\nHow to format numbers as strings, e.g. in a …\nHow to display numeric color values.\nWhen blinking, this is how long the cursor is invisible.\nWhen blinking, this is how long the cursor is visible.\nThe style of a button that has an open menu beneath it …\nIf set this will change the font family and size for all …\nOverride default text color for all text.\nIf set this will change the default <code>TextStyle</code> for all …\nHow to vertically align text.\nPanel background color\nWith what speed should we scroll? (Default: 1000.0)\nShow where the text cursor would be if you clicked?\nRadius of the interactive area of the corner of a window …\nRadius of the interactive area of the side of a window …\nControls the spacing of a <code>crate::ScrollArea</code>.\nThe animation that should be used when scrolling a …\nCan you select the text on a <code>crate::Label</code> by default?\nShow which widgets make their parent higher\nShow which widgets make their parent wider\nShow an overlay on all interactive widgets.\nIf <code>false</code>, tooltips will show up anytime you hover …\nIf true, highlight widgets that are not aligned to …\nShow interesting widgets under the mouse cursor.\nDefault rail height of a <code>Slider</code>.\nShow trailing color behind the circle of a <code>Slider</code>. Default …\nDefault width of a <code>Slider</code>.\nSolid scroll bars that always use up space\nSizes and distances between widgets\nWhether or not Grids and Tables should be striped by …\nThe color and width of the text cursor\nHow the text cursor acts.\nDefault width of a <code>crate::TextEdit</code>.\nThe <code>FontFamily</code> and size you want to use for a specific …\nThin scroll bars that expand on hover\nDelay in seconds before showing tooltips after the mouse …\nIf you have waited for a tooltip and then hover some other …\nWidth of a tooltip (<code>on_hover_ui</code>, <code>on_hover_text</code> etc).\nShow the URL of hyperlinks in a tooltip when hovered.\nColors etc.\nA good color for warning text (e.g. orange).\nBackground color of widgets that can <em>optionally</em> have a …\nVisual styles of widgets\nHighlight the topmost window.\nHorizontal and vertical margins within a window frame.\nIf set, labels, buttons, etc. will use this to determine …\nIf set, labels, buttons, etc. will use this to determine …\nAspect ratio of the rectangle. Set to &lt; 1.0 to make it …\nCharacter cursor.\nA selected text range (could be a range of length zero).\nA selected text range (could be a range of length zero).\nA <code>.ttf</code> or <code>.otf</code> file and a font face index.\nDescribes the font data and the sizes to use.\nFont of unknown size.\nThe collection of fonts used by <code>epaint</code>.\nText that has been laid out, ready for painting.\nDescribes the task of laying out text.\nA font where each character is the same width (<code>w</code> is the …\nOne of the names in <code>FontDefinitions::families</code>.\nA font where some characters are wider than other (e.g. ‘…\nOne <code>\\t</code> character is this many spaces wide.\nFormatting option for a section of text.\nControls the text wrapping and elision of a <code>LayoutJob</code>.\nThe range of selected character indices.\nIf <code>true</code>: Allow breaking between any characters. If <code>false</code> …\nIf <code>true</code>, all <code>\\n</code> characters will result in a new <em>paragraph</em>, …\nRange into the galley text\nText color\nIs <code>self</code> a super-set of the other range?\nSet to true the text was truncated due to …\nExtra spacing between letters, in points.\nWhich fonts (names) to use for each <code>FontFamily</code>.\nThe first row must be at least this high. This is in case …\nThe content of a <code>.ttf</code> or <code>.otf</code> file.\nList of font names and their definitions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow to horizontally align the text (<code>Align::LEFT</code>, …\nCharacter offset (NOT byte offset!).\nWhich font face in the file to use. When in doubt, use <code>0</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the selected range contains no characters.\nThe job that this galley is the result of. Contains the …\nJustify text so that word-wrapped rows fill the whole …\nCan be used for first row indentation.\nExplicit line height of the text in points.\nMaximum amount of rows the text galley should have.\nWrap text so that no row is wider than this.\nTight bounding box around all the meshes in all the rows. …\nTotal number of indices in all the row meshes.\nTotal number of vertices in all the row meshes.\nCheck for events that modify the cursor range.\nCheck for key presses that are moving the cursor.\nThe empty range.\nThe empty range.\nCharacter to use to represent elided text.\nThe number of physical pixels for each logical point. …\nIf this cursors sits right at the border of a wrapped row …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nBounding rect.\nRound output sizes using <code>emath::GuiRounding</code>, to avoid …\nRows of text, from top to bottom.\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nThe different section, which can have different fonts, …\nSelect all the text in a galley\nIf there is a selection, None is returned. If the two ends …\nreturns the two ends ordered\nReturns the two ends ordered.\nThe complete text of this job, referenced by <code>LayoutSection</code>.\nExtra scale and vertical tweak to apply to all text of …\nIf you use a small font and <code>Align::TOP</code> you can get the …\nControls the text wrapping and elision.\nA selected text range (could be a range of length zero).\nA selected text range (could be a range of length zero).\nHandles text selection in labels (NOT in <code>crate::TextEdit</code>)s.\nThe state of a text cursor selection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle text selection state for a label or similar widget.\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nWhen selecting with a mouse, this is where the mouse was …\nText cursor changes/interaction, without modifying the …\nUpdate accesskit with the current text state.\nThe state of a text cursor selection.\nThe thin rectangle of one end of the selection, e.g. the …\nAccepts and returns character offset (NOT byte offset!).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPaint one end of the selection, e.g. the primary cursor.\nPaint one end of the selection, e.g. the primary cursor, …\nAdds text selection rectangles to the galley.\nThis struct tracks recent values of some time series.\nStores values identified by an <code>Id</code> AND the <code>std::any::TypeId</code> …\nCount the number of values are stored with the given type.\nCount how many values are stored but not yet deserialized.\nReturns the argument unchanged.\nRead a value, optionally deserializing it if available.\nRead a value without trying to deserialize a persisted …\nHash the given value with a predictable hasher.\nHash the given value with the given hasher.\nInsert a value that will be persisted next time you start …\nInsert a value that will not be persisted.\nCalls <code>U::from(self)</code>.\nThe maximum number of bytes that will be used to store the …\nRemove the state of this type and id.\nNote all state of the given type.\nRemove and fetch the state of this type and id.\nSee <code>Self::max_bytes_per_type</code>.\nStores values identified by an <code>Id</code> AND the <code>std::any::TypeId</code> …\nLike <code>std::any::TypeId</code>, but can be serialized and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAutomatic undo system.\nAdd an undo point if, and only if, there has been a change …\nIf the state is changing so often that we never get to …\nCall this as often as you want (e.g. every frame) and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDo we have an undo point different from the given state?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the state is currently changing\nMaximum number of undos. If your state is resource …\nWhen that state hasn’t changed for this many seconds, …\nCreate a new <code>Undoer</code> with the given <code>Settings</code>.\nBegin resizing the viewport with the left mouse button …\nCancel the closing that was signaled by …\nRequest this viewport to be closed.\nThis should be used on the windows that are popped up by …\nWill probably not work as expected!\nShow window decorations, i.e. the chrome around the content\nA viewport run independently from the parent viewport.\nThe user-code that shows the ui in the viewport, used for …\nA desktop feature. This can include a single window …\nThis is a dialog window.\nThis indicates the window is being dragged. This property …\nA dock or panel feature. Typically a Window Manager would …\nA dropdown menu that usually appears when the user clicks …\nThe fallback, when the egui integration doesn’t support …\nSet which window buttons are enabled\nBring the window into focus (native only).\nTurn borderless fullscreen on/off.\nSet the IME cursor editing area.\nThe window icon.\nImage data for an application icon.\nA viewport run inside the parent viewport.\nViewport for immediate rendering.\nRender the given viewport, calling the given ui callback.\nShould be bigger than 0\nShould be bigger than 0\nMaximize or unmaximize window.\nPinnable menu windows. “Torn off” from the main …\nShould be bigger than 0\nEnable mouse pass-through: mouse clicks pass through the …\nThis is a normal, top-level window.\nThe window is a notification. This property is typically …\nSet the outer position of the viewport, i.e. moves the …\nA popup menu that usually appears when the user right …\nRequest a copy of the current selection.\nRequest cut of the current selection\nRequest a paste from the clipboard to the current focused …\nIf the window is unfocused, attract the user’s attention …\nCan the window be resized?\nShould be bigger than 0\nThe root viewport; i.e. the original window.\nTake a screenshot of the next frame after this.\nThe window is a splash screen displayed as an application …\nMoves the window with the left mouse button until the …\nSet the window title.\nToolbar windows. “Torn off” from the main application.\nA tooltip window. Usually used to show additional …\nTurn the window transparent or not.\nA small persistent utility window, such as a palette or …\nControl the building of a new egui viewport (i.e. native …\nThe different types of viewports supported by egui.\nAn output viewport-command from egui to the backend, e.g. …\nA unique identifier of a viewport.\nA fast hash map from <code>ViewportId</code> to <code>T</code>.\nA pair of <code>ViewportId</code>, used to identify a viewport and its …\nA fast hash set of <code>ViewportId</code>.\nDescribes a viewport, i.e. a native window.\nSet the visibility of the window.\nSet window to be always-on-top, always-on-bottom, or …\nThis is wayland only. See <code>Self::with_app_id</code>.\nThe window attrbiutes such as title, position, size, etc.\nWhether clamp the window’s size to monitor’s size. The …\nWhat type of viewport are we?\nCommands to change the viewport, e.g. window title and …\nImage height. This should be a multiple of 4.\nId of us and our parent.\nId of our parent viewport.\nThe desired outer position of the window.\nSchedule a repaint of this viewport after this delay.\nRGBA pixels, with separate/unmultiplied alpha.\nThe title of the viewport. <code>eframe</code> will use this as the …\nThe user-code that shows the GUI.\nThe user-code that shows the GUI, used for deferred …\nImage width. This should be a multiple of 4.\nUse exactly this galley when painting the text.\nUse this <code>LayoutJob</code> when laying out the text.\nText and optional style choices for it.\nThis is how you specify text for a widget.\nAlways clamp values, even existing ones.\nClickable button with text.\nLoad the image from some raw bytes.\nBoolean on/off control with text label.\nA numeric value that you can change by dragging the …\nUsers cannot enter new values that are outside the range.\nFit the image to an exact size.\nFit the image to a fraction of the available size.\nStores the durations between each frame of an animated …\nA clickable hyperlink, e.g. to …\nA widget which displays an image.\nA clickable image within a frame.\nThis type determines how the image should try to fit …\nThis type determines the constraints on how the size of an …\nThis type tells the <code>Ui</code> how to load an image.\nStatic text.\nClickable text, that looks like a hyperlink.\nValues are not clamped.\nFit the image to its original size, scaled by some factor.\nA simple progress bar.\nOne out of several alternatives, either selected or not.\nOne out of several alternatives, either selected or not. …\nA visual separator. A horizontal or vertical line …\nControl a number with a slider.\nSpecifies how values in a <code>Slider</code> are clamped.\nSpecifies the orientation of a <code>Slider</code>.\nA spinner widget used to indicate loading.\nTrait constraining what types <code>crate::TextEdit</code> may use as …\nA text region that the user can edit the contents of.\nLoad the image from an existing texture.\nLoad the image from a URI, e.g. …\nAnything implementing Widget can be added to a <code>Ui</code> with …\nHelper so that you can do e.g. <code>TextEdit::State::load</code>.\nReturns this buffer as a <code>str</code>.\nA solid color to put behind the image. Useful for …\nReads the given character range.\nClears all characters in this buffer\nColor picker widgets.\nRound the corners of the image.\nExtracts uri and frame index\nDeletes a range of text <code>char_range</code> from this buffer.\nDetermines how the image should shrink/expand/stretch/etc. …\nShow larger buttons for switching between light and dark …\nShow a small button to switch to/from dark/light mode …\nShow larger buttons for switching between light and dark …\nShow a small button to switch to/from dark/light mode …\nChecks if bytes are gifs\nChecks if bytes are webp\nInserts text <code>text</code> into this buffer at character index …\nCan this text be edited?\nWhether or not the final size should maintain the original …\nDetermines the maximum size of the image.\nReplaces all contents of this string with <code>text</code>\nShow a button to reset a value to its default. The button …\nShow a button to reset a value to its default. The button …\nRotate the image about an origin by some angle\nClears all characters in this buffer and returns a string …\nMultiply image color with this. Default is WHITE (no tint).\nAllocate space, interact, paint, and return a <code>Response</code>.\nSelect UV range. Default is (0,0) in top-left, (1,1) …\nThe unique identifier for this image, e.g. …\nWhat options to show for alpha\nShow both blend and additive options.\nOnly show normal blend options for alpha.\nSet alpha to 1.0, and show no option for it.\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a button with the given color. If the user clicks …\nShows a color picker where the user can change the given …\nShows a color picker where the user can change the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow a color with background checkers to demonstrate …\nShow a color with background checkers to demonstrate …\nTrait constraining what types <code>crate::TextEdit</code> may use as …\nThe state of a text cursor selection.\nA text region that the user can edit the contents of.\nThe output from a <code>TextEdit</code>.\nThe text edit state stored between frames.\nReturns this buffer as a <code>str</code>.\nThe currently selected range of characters.\nReads the given character range.\nThe currently selected range of characters.\nClears all characters in this buffer\nControls the text selection.\nWhere the text cursor is.\nDeletes a range of text <code>char_range</code> from this buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHow the text was displayed.\nWhere the text in <code>Self::galley</code> ended up on the screen.\nInserts text <code>text</code> into this buffer at character index …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCan this text be edited?\nHandle clicking and/or dragging text.\nReplaces all contents of this string with <code>text</code>\nThe interaction response.\nSets the currently selected range of characters.\nSets the currently selected range of characters.\nThe state we stored after the run.\nClears all characters in this buffer and returns a string …\nThe text was clipped to this rectangle when painted.\nYou can use this to do custom <code>wgpu</code> rendering in an egui …\nYou can use this for storage when implementing …\nA callback trait that can be used to compose an …\nConstruct a wgpu setup using some predefined settings &amp; …\nRun on an existing wgpu setup.\nMethod for selecting an adapter on native.\nInstructs egui to recreate the surface, then skip the …\nAccess to the render state for egui.\nRenderer for a egui based GUI.\nInformation about the screen used for rendering.\nDo nothing and skip the current frame.\nSpecifies which action should be taken as consequence of a …\nConfiguration for using wgpu with eframe or the egui-wgpu …\nAn error produced by egui-wgpu.\nConfiguration for creating a new wgpu setup.\nConfiguration for using an existing wgpu setup.\nWgpu adapter used for rendering.\nA human-readable summary about an adapter\nAll the available adapters.\nBindgroup for the texture + sampler.\nStorage for resources shared with all invocations of …\nHelpers for capturing screenshots of the UI.\nCreates a new <code>RenderState</code>, containing everything needed …\nTake’s epi’s depth/stencil bits and returns the …\nDesired maximum number of frames that the presentation …\nWgpu device used for rendering, created from the adapter.\nConfiguration passed on device request, given an adapter\nCalled after all <code>CallbackTrait::prepare</code> calls are done.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstance descriptor for creating a wgpu instance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional selector for native adapters.\nCreates a renderer for a egui UI.\nCreates a new <code>wgpu::Instance</code> or clones the existing one.\nCreates a new <code>epaint::PaintCallback</code> from a callback trait …\nCallback for surface errors.\nOptions describing the sampler used in the bind group. …\nCalled after all <code>CallbackTrait::finish_prepare</code> calls are …\nTries to parse the adapter’s vendor ID to a …\nHigh-DPI scale factor (pixels per point).\nPower preference for the adapter if …\nFind the framebuffer format that egui prefers\nPresent mode used for the primary surface.\nWgpu queue used for rendering, created from the adapter.\nRegisters a <code>wgpu::Texture</code> with a <code>epaint::TextureId</code>.\nRegisters a <code>wgpu::Texture</code> with a <code>epaint::TextureId</code> while …\nExecutes the egui renderer onto an existing wgpu …\nEgui renderer responsible for drawing the UI.\nSize of the window in physical pixels.\nThe target texture format used for presenting to the …\nGet the WGPU texture and bind group associated to a …\nThe texture may be None if the <code>TextureId</code> is just a handle …\nOption path to output a wgpu trace file.\nUploads the uniform, vertex and index data used by the …\nRegisters a <code>wgpu::Texture</code> with an existing …\nRegisters a <code>wgpu::Texture</code> with an existing …\nShould be called before <code>Self::render</code>.\nHow to create the wgpu adapter &amp; device\nModule for painting <code>egui</code> with <code>wgpu</code> on <code>winit</code>.\nA texture and a buffer for reading the rendered frame back …\nCreates a new asynchronous channel, returning the …\nHandles copying from the <code>CaptureState</code> texture to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandles copying from the <code>CaptureState</code> texture to the …\nUpdates the <code>CaptureState</code> if the size of the surface …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nEnable writes to all channels.\nWhether wgpu should expose adapters that run on top of …\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nBinding is backed by a top level acceleration structure\nA ray-tracing acceleration structure binding.\nFlags for an acceleration structure.\nFlags for a geometry inside a bottom level acceleration …\nUpdate mode for acceleration structure builds.\nHandle to a physical graphics and/or compute device.\nInformation about an adapter.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\nThe texture can be both read and written in the shader via …\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically，depending …\nChooses Immediate -&gt; Mailbox -&gt; Fifo (on web) based on …\nChooses FifoRelaxed -&gt; Fifo based on availability.\nNo explicit minor version is requested, the driver …\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nAllows a buffer to be used as input for a bottom level …\nIf not present, the texture can’t be blended into the …\nEnable blue channel writes\nSupported when targeting the web through webassembly with …\nSupports buffer bindings with sizes that aren’t a …\nAllows the user to create arrays of buffers in shaders:\nBack face\nBackends supported by wgpu.\nOptions that are passed to a given backend.\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nHandle to a binding group.\nDescribes a group of bindings and the resources to be …\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nHandle to a binding group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nBottom Level Acceleration Structure (BLAS).\nBuilds the given sets of geometry into the given Blas.\nContains the sets of geometry that go into a Blas.\nDescriptor for the size defining attributes, for a bottom …\nDefinition for a triangle geometry for a Bottom Level …\nDescriptor for the size defining attributes of a triangle …\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nWebGPU in the browser\nHandle to a GPU-accessible buffer.\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nIntegral type used for buffer slice sizes.\nA slice of a <code>Buffer</code>, to be mapped, used for vertex or …\nDifferent ways that you can use a buffer.\nA read-only view of a mapped buffer’s bytes.\nA write-only view of a mapped buffer’s bytes.\nAlways perform a full build.")