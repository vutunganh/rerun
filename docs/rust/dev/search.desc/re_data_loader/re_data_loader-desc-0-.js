searchState.loadedDescShard("re_data_loader", 0, "Handles loading of Rerun data from file using data loader …\nLoads data from any supported file or in-memory contents …\nKeeps track of all builtin <code>DataLoader</code>s.\nKeeps track of all custom <code>DataLoader</code>s.\nA <code>DataLoader</code> loads data from a file path and/or a file’s …\nErrors that might happen when loading data through a …\nRecommended settings for the <code>DataLoader</code>.\nRecursively loads entire directories, using the …\nWhen an external <code>crate::DataLoader</code> is asked to load some …\nTo register a new external data loader, simply add an …\nA <code>crate::DataLoader</code> that forwards the path to load to all …\nWhat <code>DataLoader</code>s load.\nLoads data from any <code>rrd</code> file or in-memory contents.\nThe recommended <code>re_log_types::ApplicationId</code> to log the …\nReturns the name of the <code>DataLoader</code> that generated this …\nWhat should the logged entity paths be prefixed with?\nEmpty string if no extension.\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPack the data into a <code>LogMsg</code>.\nIs this a supported file extension by any of our builtin …\nIterator over all registered external <code>crate::DataLoader</code>s.\nIterator over all registered <code>DataLoader</code>s.\nA module for loading and working with <code>LeRobot</code> datasets.\nLoads the given <code>contents</code> using all <code>crate::DataLoader</code>s …\nLoads data from in-memory file contents and sends it to <code>tx</code>.\nLoads the given <code>path</code> using all <code>crate::DataLoader</code>s …\nLoads data from a file on the local filesystem and sends …\nName of the <code>DataLoader</code>.\nThe <code>re_log_types::ApplicationId</code> that is currently opened …\nThe <code>re_log_types::StoreId</code> that is currently opened in the …\nRegister a custom <code>DataLoader</code>.\nThe recommended <code>re_log_types::StoreId</code> to log the data to, …\nAll file extension supported by our builtin <code>DataLoader</code>s.\nAt what time(s) should the data be logged to?\nGenerates CLI flags from these settings, for external data …\nData types supported for features in a <code>LeRobot</code> dataset.\nNewtype wrapper for episode indices.\nFeature definition for a <code>LeRobot</code> dataset.\nA <code>LeRobot</code> dataset consists of structured metadata and …\nAn episode in a <code>LeRobot</code> dataset.\n<code>LeRobot</code> dataset metadata.\nMetadata for a <code>LeRobot</code> dataset.\nA task in a <code>LeRobot</code> dataset.\nErrors that might happen when loading data through a …\nName metadata for a feature in the <code>LeRobot</code> dataset.\nVisitor implementation for deserializing the <code>Names</code> type.\nNewtype wrapper for task indices.\nGet the channel dimension for this <code>Feature</code>.\nComputes the storage chunk index for a given episode.\nThe amount of episodes per chunk.\nThe version of the <code>LeRobot</code> codebase the dataset was …\nThe path template for accessing episode data files.\nGenerates the file path for a given episode’s Parquet …\nRetrieve the metadata for a specific feature.\nA mapping of feature names to their respective <code>Feature</code> …\nThe frame rate of the recorded episode data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe path template for accessing image files for an episode.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the provided path contains a <code>LeRobot</code> dataset.\nCheck whether the provided path contains a v1 <code>LeRobot</code> …\nCheck whether the provided path contains a v2 <code>LeRobot</code> …\nLoads a <code>LeRobotDataset</code> from a directory.\nLoads all metadata files from the provided directory.\nLoads <code>LeRobotDatasetInfo</code> from a JSON file.\nRetrieves the name corresponding to a specific index.\nRead the Parquet data file for the provided episode.\nRead video feature for the provided episode.\nThe type of the robot.\nRetrieve the task using the provided task index.\nThe total number of unique chunks in the dataset.\nThe total number of unique episodes in the dataset.\nThe total number of unique frames in the dataset.\nThe total number of unique tasks in the dataset.\nThe total amount of videos in the dataset.\nGenerates the file path for a video observation of a given …\nThe path template for accessing video files for an episode.\nHandle single-entry objects: …\nHandle sequences:\nLoads the data at <code>path</code> using all available …\nLoads the given <code>contents</code> using all <code>crate::DataLoader</code>s …\nLoads the given <code>path</code> using all <code>crate::DataLoader</code>s …\nPrepares an adequate <code>re_log_types::StoreInfo</code> <code>LogMsg</code> given …\nForwards the data in <code>rx_loader</code> to <code>tx</code>, taking care of …\nLoads data from any supported file or in-memory contents …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecursively loads entire directories, using the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen an external <code>crate::DataLoader</code> is asked to load some …\nTo register a new external data loader, simply add an …\nKeeps track of the paths all external executable …\nA <code>crate::DataLoader</code> that forwards the path to load to all …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterator over all registered external <code>crate::DataLoader</code>s.\nColumns in the <code>LeRobot</code> dataset schema that we do not …\nOnly supports <code>LeRobot</code> datasets that are in a supported …\nA <code>DataLoader</code> for <code>LeRobot</code> datasets.\nHelper type similar to <code>Either</code>, but with 3 variants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a single episode from a <code>LeRobot</code> dataset and converts …\nPrepare the viewer for all episodes, by sending out a …\nLoads data from any <code>rrd</code> file or in-memory contents.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")