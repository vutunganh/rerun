searchState.loadedDescShard("re_protos", 0, "This crate contains generated types for the remote store …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOrder as TYPE, TYPE_VIEW so things stay consistent as we …\nAll of the entries in the associated namespace\nMinimal info about an Entry for high-level catalog summary\nWhat type of entry. This has strong implication on which …\nNot used yet\nAlways reserve unspecified as default value\nAlways reserve unspecified as default value\nGenerated client implementations.\nGenerated server implementations.\nRead-only\nThe kind of entry\nThe EntryId is immutable\nThe name is a short human-readable string TODO(jleibs): …\nThe name is a short human-readable string TODO(jleibs): …\nDetails specific to the table-provider\nThe known schema of this table\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nComponent describes semantic data that can be used by any …\nUsed to select a component based on its EntityPath and …\nDataframePart is arrow IPC encoded RecordBatch\nEntry point for all ManifestRegistryService APIs\nsupported encoder versions for encoding data See <code>RerunData</code> …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code> …\nReturn an error if the item already exists\nSpecify how the relevant creation call behaves in case of …\nOverwrite the existing item\nUnique identifier for a partition. Can be user defined …\nTODO(cmc): can we kill this?\nunique recording identifier. At this point in time it is …\nRerunChunk is arrow IPC encoded RecordBatch that has …\nGeneric parameters that will influence the behavior of the …\narrow IPC serialized schema\nSkip if the item already exists\nSpecifies how null values should be filled in the returned …\nuniquely identifies a table\nUnique identifier of a task submitted in the redap tasks …\nUsed to telect a time column.\nA 64-bit number describing either nanoseconds, sequence …\nA time range between start and end time points. Each 64 …\nA recording can have multiple timelines, each is …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nThe specific <em>columns</em> to sample from the final view …\nNested message and enum types in <code>ColumnSelector</code>.\nList of columns to project. If empty, all columns will be …\nSemantic name associated with this data.\nPath to Dataset backing storage (e.g. s3://bucket/file or …\nencoder version used to encode the data\nencoder version used to encode the data\nUnique entry identifier (for debug purposes)\nIf set, the final <code>scanner.filter</code> will be dumped to the …\nIf set, the output of <code>scanner.explain_plan</code> will be dumped …\nAn arbitrary filter expression that will be passed to the …\nThe index used to filter out <em>rows</em> from the view contents. …\nThe range of index values used to filter out <em>rows</em> from the …\nThe specific index values used to filter out <em>rows</em> from the …\nThe component column used to filter out <em>rows</em> from the view …\nInitialized to something random on each thread, then …\nWhether the view_contents should ignore columns …\nWhether the view_contents should ignore semantically empty …\nWhether the view_contents should ignore columns …\nAn arbitrary limit that will be passed to the Lance …\nAn arbitrary offset that will be passed to the Lance …\ncomponent name needs to be a string as user can define …\nAn arbitrary order clause that will be passed to the Lance …\nData payload is Arrow IPC encoded RecordBatch TODO(zehiko) …\nData payload is Arrow IPC encoded RecordBatch\nSpecifies how null values should be filled in the returned …\nApproximate nanoseconds since epoch.\nTODO(zehiko) we need to add support for other types of …\nTODO(zehiko) support for other ranges for other index …\nTODO(zehiko) we need to add support for other types of …\nThe specific index values used to sample <em>rows</em> from the …\nThe subset of the database that the query will run on: a …\nClient can specify specific chunk ids to include. If left …\nClient can specify chunk ids to include. If left …\nIndex column that is queried\nWhich entity paths are we interested in? Leave empty to …\nWhich entity paths are we interested in? Leave empty to …\nGenerated client implementations.\nGenerated server implementations.\nSpecify behavior when index for a partition was already …\nList of specific partitions that will be indexed (all if …\nClient can specify what partitions are queried. If left …\nClient can specify from which partitions to get chunks. If …\nIndex type specific properties\nQuery data - type of data is index specific. Caller must …\nQuery details\nScan parameters\nGeneric parameters that will influence the behavior of the …\nTODO(jleibs): support ScanParameters iff we can plumb them …\nRedap’s public API.\nServer streaming response type for the FetchPartition …\nGenerated trait containing gRPC methods that should be …\nRedap’s public API.\nServer streaming response type for the GetChunks method.\nServer streaming response type for the QueryDataset method.\nGenerated gRPC service name\nServer streaming response type for the ScanPartitionTable …\nServer streaming response type for the ScanTable method.\nServer streaming response type for the SearchDataset …\nServer streaming response type for the WriteChunks method.\nCreates a custom index for a specific column (vector …\nFetch an entire partition from the server, without any …\nPerform Rerun-native queries on a dataset, returning the …\nReturns the schema of the dataset.\nReturns the schema of the partition table (i.e. the …\nPerform Rerun-native queries on a dataset, returning the …\nRecreate an index with the same configuration but …\nRegister new partitions with the Dataset\nInspect the contents of the partition table (i.e. the …\nSearch a previously created index.\nUnimplemented.\nThe payload is encoded as Arrow-IPC.\nCorresponds to <code>LogMsg::ArrowMsg</code>. Used to transmit actual …\nCorresponds to <code>LogMsg::BlueprintActivationCommand</code>.\nThe recording came from the C++ SDK.\nThe file came from the command line.\nThe type of compression used on the payload.\nInformation about the Rust SDK that created the recording.\nThe file was dragged into the viewer.\nThe encoding of the message payload.\nThe recording came from a file.\nThe file was opened using a file dialog.\nA recording which came from a file.\nDetermines where the file came from.\nTODO(#8631): Remove <code>LogMsg</code>\nLZ4 block compression.\nNo compression.\nThe recording came from some other source.\nThe recording came from the Python SDK.\nVersion of the Python SDK that created the recording.\nThe recording came from the Rust SDK.\nThe recording was produced using a data loader, such as …\nCorresponds to <code>LogMsg::SetStoreInfo</code>. Used to identify a …\nInformation about a recording or blueprint.\nThe source of a recording or blueprint.\nA newtype for <code>StoreSource</code> payload.\nWhat kind of source a recording comes from.\nWe don’t know what encoding the payload is in.\nWe don’t know anything about the source of this …\nWe don’t know where the file came from.\nThe file was served over HTTP.\nThe recording came from some action in the viewer.\nUser-chosen name of the application doing the logging.\nThe ID of the blueprint to activate.\nCompression algorithm used.\nCrate version encoded using our custom scheme.\nEncoding of the payload.\nStore source payload. See <code>StoreSourceKind</code> for what exactly …\nThe new store info.\nDetermines what is encoded in <code>extra</code>.\nVersion of LLVM used by the Rust compiler.\nNested message and enum types in <code>LogMsg</code>.\nWhether to make the blueprint active immediately.\nWhether to make the blueprint the default.\nArrow-IPC encoded schema and chunk, compressed according …\nA time-based UID that is used to determine how a <code>StoreInfo</code> …\nVersion of the Rust compiler used to compile the SDK.\nThe ID of the store that this message is for.\nUnique ID of the recording.\nWhere the recording came from.\nVersion of the store crate.\nA message that contains an Arrow-IPC encoded message.\nA message that contains a blueprint activation command.\nA message that contains a new store info.\nTODO(zehiko) add properties as needed\nTODO(zehiko) add properties as needed\nEncoding / decoding error\n<code>DatasetManifest</code> mandatory field names. All mandatory …\nApplication level error - used as <code>details</code> in the …\nError codes for application level errors\nTODO(cmc): this should have response extensions too.\nused to define which column we want to index\nTODO(zehiko) add properties as needed\nmetadata database access error\nobject store access error\nA chunk-level latest-at query, aka <code>LatestAtRelevantChunks</code>.\n/ A chunk-level range query, aka <code>RangeRelevantChunks</code>.\nunused\nWhat index value are we looking for?\nTODO(zehiko) add other properties as needed\nChunks as arrow RecordBatch\nClient can specify specific chunk ids to include. If left …\nClient can specify chunk ids to include. If left …\nerror code\nComponent / column we want to index.\nIndex column that is queried\nChunk manifest is index specific\nIf true, <code>columns</code> always includes <code>byte_offset</code> and <code>byte_size</code>.\nIf true, <code>columns</code> always includes <code>chunk_id</code>,\nIf true, <code>columns</code> always includes all component-level …\nIf true, <code>columns</code> always includes <code>entity_path</code>.\nIf true, <code>columns</code> will contain the entire schema.\nIf true, <code>columns</code> always includes all temporal chunk-level …\nIf true, <code>columns</code> always includes all static …\nComponent details\nPartitions metadata as arrow RecordBatch\nChunks as arrow RecordBatch\nChunk manifest as arrow RecordBatches\nThe path of the entity.\nWhich entity paths are we interested in? Leave empty to …\nWhich entity paths are we interested in? Leave empty to …\nDataset for which we want to search index\nDataset client wants to query\nDataset for which we want to get chunks\nDataset for which we want to create manifests\nDataset for which we want to fetch chunk manifest\nWhich components are we interested in?\nWhich components are we interested in?\nunique identifier associated with the request (e.g. …\nWhich index column should we perform the query on? E.g. …\nWhich index column should we perform the query on? E.g. …\nNested message and enum types in <code>IndexProperties</code>.\nNested message and enum types in <code>IndexQueryProperties</code>.\nWhat index range are we looking for?\nIf specified, will perform a latest-at query with the …\nGenerated client implementations.\nGenerated server implementations.\nhuman readable details about the error\nSpecify behavior when index for a partition was already …\nDefine what happens if create is called multiple times for …\nList of specific partitions that will be indexed (all if …\nClient can specify what partitions are queried. If left …\nClient can specify from which partitions to get chunks. If …\nCreate manifest for specific partitions. All will be …\nwhat kind of index do we want to create and what are its …\nIndex type specific properties\nspecific index query properties based on the index type\nQuery data - type of data is index specific. Caller must …\nA chunk-level latest-at or range query, or both.\nA chunk-level latest-at or range query, or both.\nIf specified, will perform a range query with the given …\ntoday this just wraps the sync request. This at least …\nScan parameters\nGeneric parameters that will influence the behavior of the …\nScan parameters\nWhere is the data for this data source stored (e.g. …\nWhat is the filter index i.e. timeline for which we will …\nWhat kind of data is it (e.g. rrd, mcap, Lance, etc)?\nA <code>ComponentDescriptor</code> meant for querying: all fields are …\nDepending on the type of index that is being created, …\nspecific index query properties based on the index type\nServer streaming response type for the FetchChunkManifest …\nServer streaming response type for the …\nServer streaming response type for the FetchPartition …\nServer streaming response type for the GetChunks method.\nGenerated trait containing gRPC methods that should be …\nServer streaming response type for the QueryDataset method.\nGenerated gRPC service name\nServer streaming response type for the ScanPartitionTable …\nServer streaming response type for the SearchDataset …\nServer streaming response type for the WriteChunks method.\nCreates a custom index for a specific column (vector …\nCreate manifests for all partitions in the Dataset. …\nRetrieves the chunk manifest for a specific index.\nFetch an entire partition from the server, without any …\nFetch the internal state of a Partition Manifest.\nPerform Rerun-native queries on a dataset, returning the …\nReturns the schema of the dataset.\nReturns the schema of the partition table (i.e. the …\nPerform Rerun-native queries on a dataset, returning the …\nRecreate an index with the same configuration but …\nRegister new partitions with the Dataset\nInspect the contents of the partition table (i.e. the …\nSearch a previously created index.\nUnimplemented.\n<code>FetchOutputRequest</code> is the request message for fetching …\n/ <code>FetchOutputResponse</code> is the response message for fetching …\n<code>QueryRequest</code> is the request message for querying tasks …\n<code>QueryResponse</code> is the response message for querying tasks …\n<code>SubmitTasksRequest</code> is the request message for submitting …\n<code>SubmitTaskResponse</code> contains, for each submitted task its …\nA task is a unit of work that can be submitted to the …\nThe output of the task, encoded as a record batch\nUnique identifier for the task\nUnique identifier for the task\nEmpty queries for all tasks if the server allows it.\nTask-type dependant data necessary to de-serialize the task\nType of the task\nGenerated client implementations.\nGenerated server implementations.\n<code>TasksService</code> is the service for submitting and querying …\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\n<code>TasksService</code> is the service for submitting and querying …\nFetch the output of a completed task\nQuery the status of submitted tasks\nSubmit new tasks\nGenerated client implementations.\nGenerated server implementations.\nSimple buffer for messages between SDKs and viewers.\nGenerated trait containing gRPC methods that should be …\nSimple buffer for messages between SDKs and viewers.\nServer streaming response type for the ReadMessages method.\nServer streaming response type for the ReadTables method.\nGenerated gRPC service name\nTODO(jan): Would it be more efficient to send a “message …\nOrder as TYPE, TYPE_VIEW so things stay consistent as we …\nAll of the entries in the associated namespace\nMinimal info about an Entry for high-level catalog summary\nWhat type of entry. This has strong implication on which …\nNot used yet\nAlways reserve unspecified as default value\nAlways reserve unspecified as default value\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nGenerated client implementations.\nGenerated server implementations.\nRead-only\nReturns the enum value of <code>entry_kind</code>, or the default if …\nReturns the enum value of <code>entry_kind</code>, or the default if …\nThe kind of entry\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>EntryKind</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>SystemTableKind</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nThe EntryId is immutable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>EntryKind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SystemTableKind</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nReturns the value of <code>name</code>, or the default value if <code>name</code> is …\nThe name is a short human-readable string TODO(jleibs): …\nThe name is a short human-readable string TODO(jleibs): …\nDetails specific to the table-provider\nThe known schema of this table\nSets <code>entry_kind</code> to the provided enum value.\nSets <code>entry_kind</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nEnable decompressing responses.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComponent describes semantic data that can be used by any …\nUsed to select a component based on its EntityPath and …\nDataframePart is arrow IPC encoded RecordBatch\nEntry point for all ManifestRegistryService APIs\nsupported encoder versions for encoding data See <code>RerunData</code> …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code> …\nReturn an error if the item already exists\nSpecify how the relevant creation call behaves in case of …\nOverwrite the existing item\nUnique identifier for a partition. Can be user defined …\nTODO(cmc): can we kill this?\nunique recording identifier. At this point in time it is …\nRerunChunk is arrow IPC encoded RecordBatch that has …\nGeneric parameters that will influence the behavior of the …\narrow IPC serialized schema\nSkip if the item already exists\nSpecifies how null values should be filled in the returned …\nuniquely identifies a table\nUnique identifier of a task submitted in the redap tasks …\nUsed to telect a time column.\nA 64-bit number describing either nanoseconds, sequence …\nA time range between start and end time points. Each 64 …\nA recording can have multiple timelines, each is …\nReturns the value of <code>archetype_field_name</code>, or the default …\nOptional name of the field within <code>Archetype</code> associated …\nReturns the value of <code>archetype_name</code>, or the default value …\nOptional name of the <code>Archetype</code> associated with this data.\nReturns the value of <code>arrow_schema</code>, or the default value if …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>column_name</code>, or the default value if …\nThe specific <em>columns</em> to sample from the final view …\nNested message and enum types in <code>ColumnSelector</code>.\nList of columns to project. If empty, all columns will be …\nReturns the value of <code>component_name</code>, or the default value …\nSemantic name associated with this data.\nReturns the value of <code>dataset_url</code>, or the default value if …\nPath to Dataset backing storage (e.g. s3://bucket/file or …\nReturns the enum value of <code>encoder_version</code>, or the default …\nReturns the enum value of <code>encoder_version</code>, or the default …\nencoder version used to encode the data\nencoder version used to encode the data\nUnique entry identifier (for debug purposes)\nIf set, the final <code>scanner.filter</code> will be dumped to the …\nIf set, the output of <code>scanner.explain_plan</code> will be dumped …\nReturns the value of <code>filter</code>, or the default value if <code>filter</code>…\nAn arbitrary filter expression that will be passed to the …\nThe index used to filter out <em>rows</em> from the view contents. …\nThe range of index values used to filter out <em>rows</em> from the …\nThe specific index values used to filter out <em>rows</em> from the …\nThe component column used to filter out <em>rows</em> from the view …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>EncoderVersion</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>SparseFillStrategy</code>, or <code>None</code> if <code>value</code> …\nConverts an <code>i32</code> to a <code>StoreKind</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>IfMissingBehavior</code>, or <code>None</code> if <code>value</code> …\nConverts an <code>i32</code> to a <code>IfDuplicateBehavior</code>, or <code>None</code> if <code>value</code> …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nReturns the value of <code>id</code>, or the default value if <code>id</code> is …\nReturns the value of <code>inc</code>, or the default value if <code>inc</code> is …\nInitialized to something random on each thread, then …\nWhether the view_contents should ignore columns …\nWhether the view_contents should ignore semantically empty …\nWhether the view_contents should ignore columns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>EncoderVersion</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>SparseFillStrategy</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StoreKind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>IfMissingBehavior</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>IfDuplicateBehavior</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nReturns the value of <code>limit_len</code>, or the default value if …\nAn arbitrary limit that will be passed to the Lance …\nReturns the value of <code>limit_offset</code>, or the default value if …\nAn arbitrary offset that will be passed to the Lance …\ncomponent name needs to be a string as user can define …\nReturns the enum value of <code>on_missing_columns</code>, or the …\nAn arbitrary order clause that will be passed to the Lance …\nReturns the value of <code>payload</code>, or the default value if …\nData payload is Arrow IPC encoded RecordBatch TODO(zehiko) …\nData payload is Arrow IPC encoded RecordBatch\nSets <code>encoder_version</code> to the provided enum value.\nSets <code>encoder_version</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nSets <code>on_missing_columns</code> to the provided enum value.\nSets <code>sparse_fill_strategy</code> to the provided enum value.\nReturns the enum value of <code>sparse_fill_strategy</code>, or the …\nSpecifies how null values should be filled in the returned …\nReturns the value of <code>time_ns</code>, or the default value if …\nApproximate nanoseconds since epoch.\nTODO(zehiko) we need to add support for other types of …\nTODO(zehiko) support for other ranges for other index …\nTODO(zehiko) we need to add support for other types of …\nThe specific index values used to sample <em>rows</em> from the …\nThe subset of the database that the query will run on: a …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClient can specify specific chunk ids to include. If left …\nClient can specify chunk ids to include. If left …\nIndex column that is queried\nWhich entity paths are we interested in? Leave empty to …\nWhich entity paths are we interested in? Leave empty to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerated client implementations.\nGenerated server implementations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the enum value of <code>on_duplicate</code>, or the default if …\nReturns the enum value of <code>on_duplicate</code>, or the default if …\nSpecify behavior when index for a partition was already …\nList of specific partitions that will be indexed (all if …\nClient can specify what partitions are queried. If left …\nClient can specify from which partitions to get chunks. If …\nIndex type specific properties\nQuery data - type of data is index specific. Caller must …\nQuery details\nScan parameters\nGeneric parameters that will influence the behavior of the …\nSets <code>on_duplicate</code> to the provided enum value.\nSets <code>on_duplicate</code> to the provided enum value.\nTODO(jleibs): support ScanParameters iff we can plumb them …\nRedap’s public API.\nEnable decompressing responses.\nCreates a custom index for a specific column (vector …\nFetch an entire partition from the server, without any …\nReturns the argument unchanged.\nPerform Rerun-native queries on a dataset, returning the …\nReturns the schema of the dataset.\nReturns the schema of the partition table (i.e. the …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nPerform Rerun-native queries on a dataset, returning the …\nRecreate an index with the same configuration but …\nRegister new partitions with the Dataset\nInspect the contents of the partition table (i.e. the …\nSearch a previously created index.\nCompress requests with the given encoding.\nUnimplemented.\nServer streaming response type for the FetchPartition …\nGenerated trait containing gRPC methods that should be …\nRedap’s public API.\nServer streaming response type for the GetChunks method.\nServer streaming response type for the QueryDataset method.\nGenerated gRPC service name\nServer streaming response type for the ScanPartitionTable …\nServer streaming response type for the ScanTable method.\nServer streaming response type for the SearchDataset …\nServer streaming response type for the WriteChunks method.\nEnable decompressing requests with the given encoding.\nCreates a custom index for a specific column (vector …\nFetch an entire partition from the server, without any …\nReturns the argument unchanged.\nPerform Rerun-native queries on a dataset, returning the …\nReturns the schema of the dataset.\nReturns the schema of the partition table (i.e. the …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nPerform Rerun-native queries on a dataset, returning the …\nRecreate an index with the same configuration but …\nRegister new partitions with the Dataset\nInspect the contents of the partition table (i.e. the …\nSearch a previously created index.\nCompress responses with the given encoding, if the client …\nUnimplemented.\nThe payload is encoded as Arrow-IPC.\nCorresponds to <code>LogMsg::ArrowMsg</code>. Used to transmit actual …\nCorresponds to <code>LogMsg::BlueprintActivationCommand</code>.\nThe recording came from the C++ SDK.\nThe file came from the command line.\nThe type of compression used on the payload.\nInformation about the Rust SDK that created the recording.\nThe file was dragged into the viewer.\nThe encoding of the message payload.\nThe recording came from a file.\nThe file was opened using a file dialog.\nA recording which came from a file.\nDetermines where the file came from.\nTODO(#8631): Remove <code>LogMsg</code>\nLZ4 block compression.\nNo compression.\nThe recording came from some other source.\nThe recording came from the Python SDK.\nVersion of the Python SDK that created the recording.\nThe recording came from the Rust SDK.\nThe recording was produced using a data loader, such as …\nCorresponds to <code>LogMsg::SetStoreInfo</code>. Used to identify a …\nInformation about a recording or blueprint.\nThe source of a recording or blueprint.\nA newtype for <code>StoreSource</code> payload.\nWhat kind of source a recording comes from.\nWe don’t know what encoding the payload is in.\nWe don’t know anything about the source of this …\nWe don’t know where the file came from.\nThe file was served over HTTP.\nThe recording came from some action in the viewer.\nUser-chosen name of the application doing the logging.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nThe ID of the blueprint to activate.\nReturns the enum value of <code>compression</code>, or the default if …\nCompression algorithm used.\nCrate version encoded using our custom scheme.\nReturns the enum value of <code>encoding</code>, or the default if the …\nEncoding of the payload.\nStore source payload. See <code>StoreSourceKind</code> for what exactly …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Compression</code>, or <code>None</code> if <code>value</code> is not …\nConverts an <code>i32</code> to a <code>Encoding</code>, or <code>None</code> if <code>value</code> is not a …\nConverts an <code>i32</code> to a <code>StoreSourceKind</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>FileSourceKind</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nThe new store info.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Compression</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Encoding</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>StoreSourceKind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>FileSourceKind</code>.\nReturns the enum value of <code>kind</code>, or the default if the …\nReturns the enum value of <code>kind</code>, or the default if the …\nDetermines what is encoded in <code>extra</code>.\nVersion of LLVM used by the Rust compiler.\nNested message and enum types in <code>LogMsg</code>.\nWhether to make the blueprint active immediately.\nWhether to make the blueprint the default.\nArrow-IPC encoded schema and chunk, compressed according …\nA time-based UID that is used to determine how a <code>StoreInfo</code> …\nVersion of the Rust compiler used to compile the SDK.\nSets <code>compression</code> to the provided enum value.\nSets <code>encoding</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nSets <code>kind</code> to the provided enum value.\nThe ID of the store that this message is for.\nUnique ID of the recording.\nWhere the recording came from.\nVersion of the store crate.\nA message that contains an Arrow-IPC encoded message.\nA message that contains a blueprint activation command.\nA message that contains a new store info.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nTODO(zehiko) add properties as needed\nTODO(zehiko) add properties as needed\nEncoding / decoding error\nApplication level error - used as <code>details</code> in the …\nError codes for application level errors\nTODO(cmc): this should have response extensions too.\nused to define which column we want to index\nTODO(zehiko) add properties as needed\nmetadata database access error\nobject store access error\nA chunk-level latest-at query, aka <code>LatestAtRelevantChunks</code>.\n/ A chunk-level range query, aka <code>RangeRelevantChunks</code>.\nunused\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>at</code>, or the default value if <code>at</code> is …\nWhat index value are we looking for?\nReturns the value of <code>base_tokenizer</code>, or the default value …\nTODO(zehiko) add other properties as needed\nChunks as arrow RecordBatch\nClient can specify specific chunk ids to include. If left …\nClient can specify chunk ids to include. If left …\nReturns the enum value of <code>code</code>, or the default if the …\nerror code\nComponent / column we want to index.\nIndex column that is queried\nChunk manifest is index specific\nIf true, <code>columns</code> always includes <code>byte_offset</code> and <code>byte_size</code>.\nIf true, <code>columns</code> always includes <code>chunk_id</code>,\nIf true, <code>columns</code> always includes all component-level …\nIf true, <code>columns</code> always includes <code>entity_path</code>.\nIf true, <code>columns</code> will contain the entire schema.\nIf true, <code>columns</code> always includes all temporal chunk-level …\nIf true, <code>columns</code> always includes all static …\nComponent details\nHelper to simplify instantiation of the dataframe in …\nPartitions metadata as arrow RecordBatch\nChunks as arrow RecordBatch\nChunk manifest as arrow RecordBatches\nReturns the enum value of <code>distance_metrics</code>, or the default …\nThe path of the entity.\nWhich entity paths are we interested in? Leave empty to …\nWhich entity paths are we interested in? Leave empty to …\nDataset for which we want to search index\nDataset client wants to query\nDataset for which we want to get chunks\nDataset for which we want to create manifests\nDataset for which we want to fetch chunk manifest\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>DataSourceKind</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>VectorDistanceMetric</code>, or <code>None</code> if <code>value</code>…\nConverts an <code>i32</code> to a <code>ErrorCode</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nWhich components are we interested in?\nWhich components are we interested in?\nunique identifier associated with the request (e.g. …\nWhich index column should we perform the query on? E.g. …\nWhich index column should we perform the query on? E.g. …\nNested message and enum types in <code>IndexProperties</code>.\nNested message and enum types in <code>IndexQueryProperties</code>.\nWhat index range are we looking for?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>DataSourceKind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>VectorDistanceMetric</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>ErrorCode</code>.\nIf specified, will perform a latest-at query with the …\nGenerated client implementations.\nGenerated server implementations.\nhuman readable details about the error\nReturns the value of <code>num_partitions</code>, or the default value …\nReturns the value of <code>num_sub_vectors</code>, or the default value …\nReturns the enum value of <code>on_duplicate</code>, or the default if …\nReturns the enum value of <code>on_duplicate</code>, or the default if …\nReturns the enum value of <code>on_duplicate</code>, or the default if …\nSpecify behavior when index for a partition was already …\nDefine what happens if create is called multiple times for …\nList of specific partitions that will be indexed (all if …\nClient can specify what partitions are queried. If left …\nClient can specify from which partitions to get chunks. If …\nCreate manifest for specific partitions. All will be …\nwhat kind of index do we want to create and what are its …\nIndex type specific properties\nspecific index query properties based on the index type\nQuery data - type of data is index specific. Caller must …\nA chunk-level latest-at or range query, or both.\nA chunk-level latest-at or range query, or both.\nIf specified, will perform a range query with the given …\ntoday this just wraps the sync request. This at least …\nScan parameters\nGeneric parameters that will influence the behavior of the …\nScan parameters\nThe Arrow schema of the dataframe in <code>Self::data</code>.\nSets <code>code</code> to the provided enum value.\nSets <code>distance_metrics</code> to the provided enum value.\nSets <code>on_duplicate</code> to the provided enum value.\nSets <code>on_duplicate</code> to the provided enum value.\nSets <code>on_duplicate</code> to the provided enum value.\nSets <code>typ</code> to the provided enum value.\nReturns the value of <code>storage_url</code>, or the default value if …\nWhere is the data for this data source stored (e.g. …\nReturns the value of <code>store_position</code>, or the default value …\nWhat is the filter index i.e. timeline for which we will …\nReturns the value of <code>top_k</code>, or the default value if <code>top_k</code> …\nReturns the enum value of <code>typ</code>, or the default if the field …\nWhat kind of data is it (e.g. rrd, mcap, Lance, etc)?\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nspecific index query properties based on the index type\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEnable decompressing responses.\nCreates a custom index for a specific column (vector …\nCreate manifests for all partitions in the Dataset. …\nRetrieves the chunk manifest for a specific index.\nFetch an entire partition from the server, without any …\nFetch the internal state of a Partition Manifest.\nReturns the argument unchanged.\nPerform Rerun-native queries on a dataset, returning the …\nReturns the schema of the dataset.\nReturns the schema of the partition table (i.e. the …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nPerform Rerun-native queries on a dataset, returning the …\nRecreate an index with the same configuration but …\nRegister new partitions with the Dataset\nInspect the contents of the partition table (i.e. the …\nSearch a previously created index.\nCompress requests with the given encoding.\nUnimplemented.\nServer streaming response type for the FetchChunkManifest …\nServer streaming response type for the …\nServer streaming response type for the FetchPartition …\nServer streaming response type for the GetChunks method.\nGenerated trait containing gRPC methods that should be …\nServer streaming response type for the QueryDataset method.\nGenerated gRPC service name\nServer streaming response type for the ScanPartitionTable …\nServer streaming response type for the SearchDataset …\nServer streaming response type for the WriteChunks method.\nEnable decompressing requests with the given encoding.\nCreates a custom index for a specific column (vector …\nCreate manifests for all partitions in the Dataset. …\nRetrieves the chunk manifest for a specific index.\nFetch an entire partition from the server, without any …\nFetch the internal state of a Partition Manifest.\nReturns the argument unchanged.\nPerform Rerun-native queries on a dataset, returning the …\nReturns the schema of the dataset.\nReturns the schema of the partition table (i.e. the …\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nPerform Rerun-native queries on a dataset, returning the …\nRecreate an index with the same configuration but …\nRegister new partitions with the Dataset\nInspect the contents of the partition table (i.e. the …\nSearch a previously created index.\nCompress responses with the given encoding, if the client …\nUnimplemented.\nA <code>ComponentDescriptor</code> meant for querying: all fields are …\nDepending on the type of index that is being created, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>FetchOutputRequest</code> is the request message for fetching …\n/ <code>FetchOutputResponse</code> is the response message for fetching …\n<code>QueryRequest</code> is the request message for querying tasks …\n<code>QueryResponse</code> is the response message for querying tasks …\n<code>SubmitTasksRequest</code> is the request message for submitting …\n<code>SubmitTaskResponse</code> contains, for each submitted task its …\nA task is a unit of work that can be submitted to the …\nThe output of the task, encoded as a record batch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the task\nUnique identifier for the task\nEmpty queries for all tasks if the server allows it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTask-type dependant data necessary to de-serialize the task\nType of the task\nGenerated client implementations.\nGenerated server implementations.\n<code>TasksService</code> is the service for submitting and querying …\nEnable decompressing responses.\nFetch the output of a completed task\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nQuery the status of submitted tasks\nCompress requests with the given encoding.\nSubmit new tasks\nGenerated gRPC service name\nGenerated trait containing gRPC methods that should be …\n<code>TasksService</code> is the service for submitting and querying …\nEnable decompressing requests with the given encoding.\nFetch the output of a completed task\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nQuery the status of submitted tasks\nCompress responses with the given encoding, if the client …\nSubmit new tasks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nSimple buffer for messages between SDKs and viewers.\nEnable decompressing responses.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nTODO(jan): Would it be more efficient to send a “message …\nGenerated trait containing gRPC methods that should be …\nSimple buffer for messages between SDKs and viewers.\nServer streaming response type for the ReadMessages method.\nServer streaming response type for the ReadTables method.\nGenerated gRPC service name\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nTODO(jan): Would it be more efficient to send a “message …")