{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"writing_docs/","title":"Python docs","text":"<p>A high-level overview of writing and previewing the Rerun python documentation.</p>"},{"location":"writing_docs/#getting-started-with-docs","title":"Getting started with docs","text":""},{"location":"writing_docs/#dependencies","title":"Dependencies","text":"<p>All of the dependencies for documentation generation are captured in the requirements file: <pre><code>pip install -r rerun_py/requirements-doc.txt\n</code></pre></p>"},{"location":"writing_docs/#serving-the-docs-locally","title":"Serving the docs locally","text":"<p>The docs can be previewed locally using <code>mkdocs</code></p> <p>This will watch the contents of the <code>rerun_py</code> folder and refresh documentation live as files are changed. <pre><code>mkdocs serve -f rerun_py/mkdocs.yml -w rerun_py\n</code></pre> or <pre><code>just py-docs-serve\n</code></pre></p>"},{"location":"writing_docs/#how-versioned-docs-are-generated-and-served","title":"How versioned docs are generated and served","text":"<p>Our documentation is versioned with releases and generated via mike</p> <p>The documentation exists as a GitHub Pages project which is hosted from the contents of the <code>gh-pages</code> branch.</p> <p><code>mike</code> updates this branch with new content as part of CI</p> <p>Every commit that lands to main will generate bleeding edge documentation as HEAD. Behind the scenes, a GitHub action is just running: <pre><code>mike deploy -F rerun_py/mkdocs.yml HEAD\n</code></pre></p> <p>On release, when GitHub sees a new tag: <code>X.Y.Z</code>, the GitHub action will instead deploy with a version tag: <pre><code>mike deploy -F rerun_py/mkdocs.yml X.Y.Z latest\n</code></pre></p> <p>You can also locally preview the publicly hosted site with all versions, using mike: <pre><code>mike serve -F rerun_py/mkdocs.yml\n</code></pre> though when locally developing docs you are better off using <code>mkdocs serve</code> as described above since it will handle hot-reloading for you as you edit.</p>"},{"location":"common/","title":"index","text":""},{"location":"common/#getting-started","title":"Getting Started","text":"<ul> <li>Quick start</li> <li>Tutorial</li> <li>Examples on GitHub</li> <li>Troubleshooting</li> </ul> <p>There are many different ways of sending data to the Rerun Viewer depending on what you're trying to achieve and whether the viewer is running in the same process as your code, in another process, or even as a separate web application.</p> <p>Checkout SDK Operating Modes for an overview of what's possible and how.</p>"},{"location":"common/#apis","title":"APIs","text":""},{"location":"common/#initialization-functions","title":"Initialization functions","text":"Function Description <code>rerun.init()</code> Initialize the Rerun SDK with a user-chosen application id (name). <code>rerun.connect()</code> Connect to a remote Rerun Viewer on the given ip:port. <code>rerun.disconnect()</code> Closes all TCP connections, servers, and files. <code>rerun.save()</code> Stream all log-data to a file. <code>rerun.send_blueprint()</code> Create a blueprint from a <code>BlueprintLike</code> and send it to the <code>RecordingStream</code>. <code>rerun.serve()</code> Serve log-data over WebSockets and serve a Rerun web viewer over HTTP. <code>rerun.spawn()</code> Spawn a Rerun Viewer, listening on the given port. <code>rerun.memory_recording()</code> Streams all log-data to a memory buffer. <code>rerun.notebook_show()</code> Output the Rerun viewer in a notebook using IPython IPython.core.display.HTML."},{"location":"common/#logging-functions","title":"Logging functions","text":"Function Description <code>rerun.log()</code> Log data to Rerun. <code>rerun.log_file_from_path()</code> Logs the file at the given <code>path</code> using all <code>DataLoader</code>s available. <code>rerun.log_file_from_contents()</code> Logs the given <code>file_contents</code> using all <code>DataLoader</code>s available."},{"location":"common/#timeline-functions","title":"Timeline functions","text":"Function Description <code>rerun.set_time_sequence()</code> Set the current time for this thread as an integer sequence. <code>rerun.set_time_seconds()</code> Set the current time for this thread in seconds. <code>rerun.set_time_nanos()</code> Set the current time for this thread. <code>rerun.disable_timeline()</code> Clear time information for the specified timeline on this thread. <code>rerun.reset_time()</code> Clear all timeline information on this thread."},{"location":"common/#custom-data","title":"Custom Data","text":"Class Description <code>rerun.AnyValues</code> Helper to log arbitrary values as a bundle of components."},{"location":"common/#clearing-entities","title":"Clearing Entities","text":"Class Description <code>rerun.Clear</code> Archetype: Empties all the components of an entity."},{"location":"common/#annotations","title":"Annotations","text":"Class Description <code>rerun.AnnotationContext</code> Archetype: The <code>AnnotationContext</code> provides additional information on how to display entities. <code>rerun.AnnotationInfo</code> Datatype: Annotation info annotating a class id or key-point id. <code>rerun.ClassDescription</code> Datatype: The description of a semantic Class."},{"location":"common/#images","title":"Images","text":"Class Description <code>rerun.DepthImage</code> Archetype: A depth image. <code>rerun.Image</code> Archetype: A monochrome or color image. <code>rerun.ImageEncoded</code> A monochrome or color image encoded with a common format (PNG, JPEG, etc.). <code>rerun.SegmentationImage</code> Archetype: An image made up of integer class-ids."},{"location":"common/#plotting","title":"Plotting","text":"Class Description <code>rerun.BarChart</code> Archetype: A bar chart. <code>rerun.Scalar</code> Archetype: Log a double-precision scalar. <code>rerun.SeriesLine</code> Archetype: Define the style properties for a line series in a chart. <code>rerun.SeriesPoint</code> Archetype: Define the style properties for a point series in a chart."},{"location":"common/#spatial-archetypes","title":"Spatial Archetypes","text":"Class Description <code>rerun.Arrows3D</code> Archetype: 3D arrows with optional colors, radii, labels, etc. <code>rerun.Arrows2D</code> Archetype: 2D arrows with optional colors, radii, labels, etc. <code>rerun.Asset3D</code> Archetype: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, etc.). <code>rerun.Boxes2D</code> Archetype: 2D boxes with half-extents and optional center, rotations, rotations, colors etc. <code>rerun.Boxes3D</code> Archetype: 3D boxes with half-extents and optional center, rotations, rotations, colors etc. <code>rerun.LineStrips2D</code> Archetype: 2D line strips with positions and optional colors, radii, labels, etc. <code>rerun.LineStrips3D</code> Archetype: 3D line strips with positions and optional colors, radii, labels, etc. <code>rerun.Mesh3D</code> Archetype: A 3D triangle mesh as specified by its per-mesh and per-vertex properties. <code>rerun.Points2D</code> Archetype: A 2D point cloud with positions and optional colors, radii, labels, etc. <code>rerun.Points3D</code> Archetype: A 3D point cloud with positions and optional colors, radii, labels, etc."},{"location":"common/#tensors","title":"Tensors","text":"Class Description <code>rerun.Tensor</code> Archetype: A generic n-dimensional Tensor."},{"location":"common/#text","title":"Text","text":"Class Description <code>rerun.LoggingHandler</code> Provides a logging handler that forwards all events to the Rerun SDK. <code>rerun.TextDocument</code> Archetype: A text element intended to be displayed in its own text-box. <code>rerun.TextLog</code> Archetype: A log entry in a text log, comprised of a text body and its log level."},{"location":"common/#transforms-and-coordinate-systems","title":"Transforms and Coordinate Systems","text":"Class Description <code>rerun.DisconnectedSpace</code> Archetype: Spatially disconnect this entity from its parent. <code>rerun.Pinhole</code> Archetype: Camera perspective projection (a.k.a. intrinsics). <code>rerun.Transform3D</code> Archetype: A 3D transform. <code>rerun.ViewCoordinates</code> Archetype: How we interpret the coordinate system of an entity/space. <code>rerun.Quaternion</code> Datatype: A Quaternion represented by 4 real numbers. <code>rerun.RotationAxisAngle</code> Datatype: 3D rotation represented by a rotation around a given axis. <code>rerun.Scale3D</code> Datatype: 3D scaling factor, part of a transform representation. <code>rerun.TranslationAndMat3x3</code> Datatype: Representation of an affine transform via a 3x3 affine matrix paired with a translation. <code>rerun.TranslationRotationScale3D</code> Datatype: Representation of an affine transform via separate translation, rotation &amp; scale."},{"location":"common/#interfaces","title":"Interfaces","text":"Class Description <code>rerun.AsComponents</code> Describes interface for interpreting an object as a bundle of Components. <code>rerun.ComponentBatchLike</code> Describes interface for objects that can be converted to batch of rerun Components."},{"location":"common/#blueprint","title":"Blueprint","text":"Class Description <code>rerun.blueprint.Blueprint</code> The top-level description of the viewer blueprint. <code>rerun.blueprint.BlueprintPart</code> The types that make up a blueprint. <code>rerun.blueprint.Container</code> Base class for all container types. <code>rerun.blueprint.ContainerLike</code> A type that can be converted to a container. <code>rerun.blueprint.Horizontal</code> A horizontal container. <code>rerun.blueprint.Vertical</code> A vertical container. <code>rerun.blueprint.Grid</code> A grid container. <code>rerun.blueprint.Tabs</code> A tab container. <code>rerun.blueprint.SpaceView</code> Base class for all space view types. <code>rerun.blueprint.BarChartView</code> A bar chart view. <code>rerun.blueprint.Spatial2DView</code> A Spatial 2D view. <code>rerun.blueprint.Spatial3DView</code> A Spatial 3D view. <code>rerun.blueprint.TensorView</code> A tensor view. <code>rerun.blueprint.TextDocumentView</code> A text document view. <code>rerun.blueprint.TextLogView</code> A text log view. <code>rerun.blueprint.TimeSeriesView</code> A time series view. <code>rerun.blueprint.BlueprintPanel</code> The state of the blueprint panel. <code>rerun.blueprint.SelectionPanel</code> The state of the selection panel. <code>rerun.blueprint.TimePanel</code> The state of the time panel."},{"location":"common/#script-helpers","title":"Script Helpers","text":"Function Description <code>rerun.script_add_args()</code> Add common Rerun script arguments to <code>parser</code>. <code>rerun.script_setup()</code> Run common Rerun script setup actions. Connect to the viewer if necessary. <code>rerun.script_teardown()</code> Run common post-actions. Sleep if serving the web viewer."},{"location":"common/#troubleshooting","title":"Troubleshooting","text":"<p>You can set <code>RUST_LOG=debug</code> before running your Python script and/or <code>rerun</code> process to get some verbose logging output.</p> <p>If you run into any issues don't hesitate to open a ticket or join our Discord.</p>"},{"location":"common/archetypes/","title":"Archetypes","text":""},{"location":"common/archetypes/#rerun.archetypes","title":"<code>rerun.archetypes</code>","text":""},{"location":"common/archetypes/#rerun.archetypes.AnnotationContext","title":"<code>class AnnotationContext</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The <code>AnnotationContext</code> provides additional information on how to display entities.</p> <p>Entities can use <code>ClassId</code>s and <code>KeypointId</code>s to provide annotations, and the labels and colors will be looked up in the appropriate <code>AnnotationContext</code>. We use the first annotation context we find in the path-hierarchy when searching up through the ancestors of a given entity path.</p> <p>See also <code>ClassDescription</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.AnnotationContext--segmentation","title":"Segmentation:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_annotation_context_segmentation\", spawn=True)\n\n# Create a simple segmentation image\nimage = np.zeros((200, 300), dtype=np.uint8)\nimage[50:100, 50:120] = 1\nimage[100:180, 130:280] = 2\n\n# Log an annotation context to assign a label and color to each class\nrr.log(\"segmentation\", rr.AnnotationContext([(1, \"red\", (255, 0, 0)), (2, \"green\", (0, 255, 0))]), timeless=True)\n\nrr.log(\"segmentation/image\", rr.SegmentationImage(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.AnnotationContext.__init__","title":"<code>def __init__(context)</code>","text":"<p>Create a new instance of the AnnotationContext archetype.</p> PARAMETER  DESCRIPTION <code>context</code> <p>List of class descriptions, mapping class indices to class names, colors etc.</p> <p> TYPE: <code>AnnotationContextLike</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows2D","title":"<code>class Arrows2D</code>","text":"<p>         Bases: <code>Arrows2DExt</code>, <code>Archetype</code></p> <p>Archetype: 2D arrows with optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Arrows2D--simple-batch-of-2d-arrows","title":"Simple batch of 2D arrows:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_arrow2d\", spawn=True)\n\nrr.log(\n    \"arrows\",\n    rr.Arrows2D(\n        origins=[[0.25, 0.0], [0.25, 0.0], [-0.1, -0.1]],\n        vectors=[[1.0, 0.0], [0.0, -1.0], [-0.7, 0.7]],\n        colors=[[255, 0, 0], [0, 255, 0], [127, 0, 255]],\n        labels=[\"right\", \"up\", \"left-down\"],\n        radii=0.025,\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows2D.__init__","title":"<code>def __init__(*, vectors, origins=None, radii=None, colors=None, labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the Arrows2D archetype.</p> PARAMETER  DESCRIPTION <code>vectors</code> <p>All the vectors for each arrow in the batch.</p> <p> TYPE: <code>Vec2DArrayLike</code> </p> <code>origins</code> <p>All the origin points for each arrow in the batch.</p> <p>If no origins are set, (0, 0, 0) is used as the origin for each arrow.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the arrows.</p> <p>The shaft is rendered as a line with <code>radius = 0.5 * radius</code>. The tip is rendered with <code>height = 2.0 * radius</code> and <code>radius = 1.0 * radius</code>.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the arrows.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows3D","title":"<code>class Arrows3D</code>","text":"<p>         Bases: <code>Arrows3DExt</code>, <code>Archetype</code></p> <p>Archetype: 3D arrows with optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Arrows3D--simple-batch-of-3d-arrows","title":"Simple batch of 3D arrows:","text":"<p><pre><code>from math import tau\n\nimport numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_arrow3d\", spawn=True)\n\nlengths = np.log2(np.arange(0, 100) + 1)\nangles = np.arange(start=0, stop=tau, step=tau * 0.01)\norigins = np.zeros((100, 3))\nvectors = np.column_stack([np.sin(angles) * lengths, np.zeros(100), np.cos(angles) * lengths])\ncolors = [[1.0 - c, c, 0.5, 0.5] for c in angles / tau]\n\nrr.log(\"arrows\", rr.Arrows3D(origins=origins, vectors=vectors, colors=colors))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows3D.__init__","title":"<code>def __init__(*, vectors, origins=None, radii=None, colors=None, labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the Arrows3D archetype.</p> PARAMETER  DESCRIPTION <code>vectors</code> <p>All the vectors for each arrow in the batch.</p> <p> TYPE: <code>Vec3DArrayLike</code> </p> <code>origins</code> <p>All the origin points for each arrow in the batch.</p> <p>If no origins are set, (0, 0, 0) is used as the origin for each arrow.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the arrows.</p> <p>The shaft is rendered as a line with <code>radius = 0.5 * radius</code>. The tip is rendered with <code>height = 2.0 * radius</code> and <code>radius = 1.0 * radius</code>.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the arrows.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Asset3D","title":"<code>class Asset3D</code>","text":"<p>         Bases: <code>Asset3DExt</code>, <code>Archetype</code></p> <p>Archetype: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, etc.).</p> <p>See also <code>Mesh3D</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Asset3D--simple-3d-asset","title":"Simple 3D asset:","text":"<p><pre><code>import sys\n\nimport rerun as rr\n\nif len(sys.argv) &lt; 2:\n    print(f\"Usage: {sys.argv[0]} &lt;path_to_asset.[gltf|glb|obj|stl]&gt;\")\n    sys.exit(1)\n\nrr.init(\"rerun_example_asset3d\", spawn=True)\n\nrr.log(\"world\", rr.ViewCoordinates.RIGHT_HAND_Z_UP, timeless=True)  # Set an up-axis\nrr.log(\"world/asset\", rr.Asset3D(path=sys.argv[1]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Asset3D.__init__","title":"<code>def __init__(*, path=None, contents=None, media_type=None, transform=None)</code>","text":"<p>Create a new instance of the Asset3D archetype.</p> PARAMETER  DESCRIPTION <code>path</code> <p>A path to an file stored on the local filesystem. Mutually exclusive with <code>contents</code>.</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p>The contents of the file. Can be a BufferedReader, BytesIO, or bytes. Mutually exclusive with <code>path</code>.</p> <p> TYPE: <code>BlobLike | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The Media Type of the asset.</p> <p>For instance:  * <code>model/gltf-binary</code>  * <code>model/gltf+json</code>  * <code>model/obj</code>  * <code>model/stl</code></p> <p>If omitted, it will be guessed from the <code>path</code> (if any), or the viewer will try to guess from the contents (magic header). If the media type cannot be guessed, the viewer won't be able to render the asset.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>transform</code> <p>An out-of-tree transform.</p> <p>Applies a transformation to the asset itself without impacting its children.</p> <p> TYPE: <code>Transform3DLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.BarChart","title":"<code>class BarChart</code>","text":"<p>         Bases: <code>BarChartExt</code>, <code>Archetype</code></p> <p>Archetype: A bar chart.</p> <p>The x values will be the indices of the array, and the bar heights will be the provided values.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.BarChart--simple-bar-chart","title":"Simple bar chart:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_bar_chart\", spawn=True)\nrr.log(\"bar_chart\", rr.BarChart([8, 4, 0, 9, 1, 4, 1, 6, 9, 0]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.BarChart.__init__","title":"<code>def __init__(values, *, color=None)</code>","text":"<p>Create a new instance of the BarChart archetype.</p> PARAMETER  DESCRIPTION <code>values</code> <p>The values. Should always be a rank-1 tensor.</p> <p> TYPE: <code>TensorDataLike</code> </p> <code>color</code> <p>The color of the bar chart</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes2D","title":"<code>class Boxes2D</code>","text":"<p>         Bases: <code>Boxes2DExt</code>, <code>Archetype</code></p> <p>Archetype: 2D boxes with half-extents and optional center, rotations, rotations, colors etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Boxes2D--simple-2d-boxes","title":"Simple 2D boxes:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_box2d\", spawn=True)\n\nrr.log(\"simple\", rr.Boxes2D(mins=[-1, -1], sizes=[2, 2]))\n\n# Log an extra rect to set the view bounds\nrr.log(\"bounds\", rr.Boxes2D(sizes=[4.0, 3.0]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes2D.__init__","title":"<code>def __init__(*, sizes=None, mins=None, half_sizes=None, centers=None, array=None, array_format=None, radii=None, colors=None, labels=None, draw_order=None, class_ids=None)</code>","text":"<p>Create a new instance of the Boxes2D archetype.</p> PARAMETER  DESCRIPTION <code>sizes</code> <p>Full extents in x/y. Incompatible with <code>array</code> and <code>half_sizes</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>half_sizes</code> <p>All half-extents that make up the batch of boxes. Specify this instead of <code>sizes</code> Incompatible with <code>array</code> and <code>sizes</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mins</code> <p>Minimum coordinates of the boxes. Specify this instead of <code>centers</code>. Incompatible with <code>array</code>. Only valid when used together with either <code>sizes</code> or <code>half_sizes</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>array</code> <p>An array of boxes in the format specified by <code>array_format</code>. Requires specifying <code>array_format</code>. Incompatible with <code>sizes</code>, <code>half_sizes</code>, <code>mins</code> and <code>centers</code>.</p> <p> TYPE: <code>ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>array_format</code> <p>How to interpret the data in <code>array</code>.</p> <p> TYPE: <code>Box2DFormat | None</code> DEFAULT: <code>None</code> </p> <code>centers</code> <p>Optional center positions of the boxes.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the boxes.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the lines that make up the boxes.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the boxes.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order. Objects with higher values are drawn on top of those with lower values.</p> <p>The default for 2D boxes is 10.0.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the boxes.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes3D","title":"<code>class Boxes3D</code>","text":"<p>         Bases: <code>Boxes3DExt</code>, <code>Archetype</code></p> <p>Archetype: 3D boxes with half-extents and optional center, rotations, rotations, colors etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Boxes3D--batch-of-3d-boxes","title":"Batch of 3D boxes:","text":"<p><pre><code>import rerun as rr\nfrom rerun.datatypes import Angle, Quaternion, Rotation3D, RotationAxisAngle\n\nrr.init(\"rerun_example_box3d_batch\", spawn=True)\n\nrr.log(\n    \"batch\",\n    rr.Boxes3D(\n        centers=[[2, 0, 0], [-2, 0, 0], [0, 0, 2]],\n        half_sizes=[[2.0, 2.0, 1.0], [1.0, 1.0, 0.5], [2.0, 0.5, 1.0]],\n        rotations=[\n            Rotation3D.identity(),\n            Quaternion(xyzw=[0.0, 0.0, 0.382683, 0.923880]),  # 45 degrees around Z\n            RotationAxisAngle(axis=[0, 1, 0], angle=Angle(deg=30)),\n        ],\n        radii=0.025,\n        colors=[(255, 0, 0), (0, 255, 0), (0, 0, 255)],\n        labels=[\"red\", \"green\", \"blue\"],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes3D.__init__","title":"<code>def __init__(*, sizes=None, mins=None, half_sizes=None, centers=None, rotations=None, colors=None, radii=None, labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the Boxes3D archetype.</p> PARAMETER  DESCRIPTION <code>sizes</code> <p>Full extents in x/y/z. Specify this instead of <code>half_sizes</code></p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>half_sizes</code> <p>All half-extents that make up the batch of boxes. Specify this instead of <code>sizes</code></p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mins</code> <p>Minimum coordinates of the boxes. Specify this instead of <code>centers</code>.</p> <p>Only valid when used together with either <code>sizes</code> or <code>half_sizes</code>.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>centers</code> <p>Optional center positions of the boxes.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>rotations</code> <p>Optional rotations of the boxes.</p> <p> TYPE: <code>Rotation3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the boxes.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the lines that make up the boxes.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the boxes.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the boxes.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Clear","title":"<code>class Clear</code>","text":"<p>         Bases: <code>ClearExt</code>, <code>Archetype</code></p> <p>Archetype: Empties all the components of an entity.</p> <p>The presence of a clear means that a latest-at query of components at a given path(s) will not return any components that were logged at those paths before the clear. Any logged components after the clear are unaffected by the clear.</p> <p>This implies that a range query that includes time points that are before the clear, still returns all components at the given path(s). Meaning that in practice clears are ineffective when making use of visible time ranges. Scalar plots are an exception: they track clears and use them to represent holes in the data (i.e. discontinuous lines).</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Clear--flat","title":"Flat:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_clear\", spawn=True)\n\nvectors = [(1.0, 0.0, 0.0), (0.0, -1.0, 0.0), (-1.0, 0.0, 0.0), (0.0, 1.0, 0.0)]\norigins = [(-0.5, 0.5, 0.0), (0.5, 0.5, 0.0), (0.5, -0.5, 0.0), (-0.5, -0.5, 0.0)]\ncolors = [(200, 0, 0), (0, 200, 0), (0, 0, 200), (200, 0, 200)]\n\n# Log a handful of arrows.\nfor i, (vector, origin, color) in enumerate(zip(vectors, origins, colors)):\n    rr.log(f\"arrows/{i}\", rr.Arrows3D(vectors=vector, origins=origin, colors=color))\n\n# Now clear them, one by one on each tick.\nfor i in range(len(vectors)):\n    rr.log(f\"arrows/{i}\", rr.Clear(recursive=False))  # or `rr.Clear.flat()`\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Clear.__init__","title":"<code>def __init__(*, recursive)</code>","text":"<p>Create a new instance of the Clear archetype.</p> PARAMETER  DESCRIPTION <code>recursive</code> <p>Whether to recursively clear all children.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Clear.flat","title":"<code>def flat()</code>  <code>staticmethod</code>","text":"<p>Returns a non-recursive clear archetype.</p> <p>This will empty all components of the associated entity at the logged timepoint. Children will be left untouched.</p>"},{"location":"common/archetypes/#rerun.archetypes.Clear.recursive","title":"<code>def recursive()</code>  <code>staticmethod</code>","text":"<p>Returns a recursive clear archetype.</p> <p>This will empty all components of the associated entity at the logged timepoint, as well as all components of all its recursive children.</p>"},{"location":"common/archetypes/#rerun.archetypes.DepthImage","title":"<code>class DepthImage</code>","text":"<p>         Bases: <code>DepthImageExt</code>, <code>Archetype</code></p> <p>Archetype: A depth image.</p> <p>The shape of the <code>TensorData</code> must be mappable to an <code>HxW</code> tensor. Each pixel corresponds to a depth value in units specified by <code>meter</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.DepthImage--depth-to-3d-example","title":"Depth to 3D example:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\ndepth_image = 65535 * np.ones((200, 300), dtype=np.uint16)\ndepth_image[50:150, 50:150] = 20000\ndepth_image[130:180, 100:280] = 45000\n\nrr.init(\"rerun_example_depth_image_3d\", spawn=True)\n\n# If we log a pinhole camera model, the depth gets automatically back-projected to 3D\nrr.log(\n    \"world/camera\",\n    rr.Pinhole(\n        width=depth_image.shape[1],\n        height=depth_image.shape[0],\n        focal_length=200,\n    ),\n)\n\n# Log the tensor.\nrr.log(\"world/camera/depth\", rr.DepthImage(depth_image, meter=10_000.0))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.DepthImage.__init__","title":"<code>def __init__(data, *, meter=None, draw_order=None)</code>","text":"<p>Create a new instance of the DepthImage archetype.</p> PARAMETER  DESCRIPTION <code>data</code> <p>The depth-image data. Should always be a rank-2 tensor.</p> <p> TYPE: <code>TensorDataLike</code> </p> <code>meter</code> <p>An optional floating point value that specifies how long a meter is in the native depth units.</p> <p>For instance: with uint16, perhaps meter=1000 which would mean you have millimeter precision and a range of up to ~65 meters (2^16 / 1000).</p> <p> TYPE: <code>DepthMeterLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.DisconnectedSpace","title":"<code>class DisconnectedSpace</code>","text":"<p>         Bases: <code>DisconnectedSpaceExt</code>, <code>Archetype</code></p> <p>Archetype: Spatially disconnect this entity from its parent.</p> <p>Specifies that the entity path at which this is logged is spatially disconnected from its parent, making it impossible to transform the entity path into its parent's space and vice versa. It only applies to space views that work with spatial transformations, i.e. 2D &amp; 3D space views. This is useful for specifying that a subgraph is independent of the rest of the scene.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.DisconnectedSpace--disconnected-space","title":"Disconnected space:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_disconnected_space\", spawn=True)\n\n# These two points can be projected into the same space..\nrr.log(\"world/room1/point\", rr.Points3D([[0, 0, 0]]))\nrr.log(\"world/room2/point\", rr.Points3D([[1, 1, 1]]))\n\n# ..but this one lives in a completely separate space!\nrr.log(\"world/wormhole\", rr.DisconnectedSpace())\nrr.log(\"world/wormhole/point\", rr.Points3D([[2, 2, 2]]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.DisconnectedSpace.__init__","title":"<code>def __init__(is_disconnected=True)</code>","text":"<p>Disconnect an entity from its parent.</p> PARAMETER  DESCRIPTION <code>is_disconnected</code> <p>Whether or not the entity should be disconnected from the rest of the scene. Set to <code>True</code> to disconnect the entity from its parent. Set to <code>False</code> to disable the effects of this archetype, (re-)connecting the entity to its parent again.</p> <p> TYPE: <code>DisconnectedSpaceLike</code> DEFAULT: <code>True</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image","title":"<code>class Image</code>","text":"<p>         Bases: <code>ImageExt</code>, <code>Archetype</code></p> <p>Archetype: A monochrome or color image.</p> <p>The shape of the <code>TensorData</code> must be mappable to: - A <code>HxW</code> tensor, treated as a grayscale image. - A <code>HxWx3</code> tensor, treated as an RGB image. - A <code>HxWx4</code> tensor, treated as an RGBA image.</p> <p>Leading and trailing unit-dimensions are ignored, so that <code>1x640x480x3x1</code> is treated as a <code>640x480x3</code> RGB image.</p> <p>Rerun also supports compressed image encoded as JPEG, N12, and YUY2. Using these formats can save a lot of bandwidth and memory. To compress an image, use <code>rerun.Image.compress</code>. To pass in an already encoded image, use  <code>rerun.ImageEncoded</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Image--image_simple","title":"<code>image_simple</code>:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\n# Create an image with numpy\nimage = np.zeros((200, 300, 3), dtype=np.uint8)\nimage[:, :, 0] = 255\nimage[50:150, 50:150] = (0, 255, 0)\n\nrr.init(\"rerun_example_image\", spawn=True)\n\nrr.log(\"image\", rr.Image(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image.__init__","title":"<code>def __init__(data, *, draw_order=None)</code>","text":"<p>Create a new instance of the Image archetype.</p> PARAMETER  DESCRIPTION <code>data</code> <p>The image data. Should always be a rank-2 or rank-3 tensor.</p> <p> TYPE: <code>TensorDataLike</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image.compress","title":"<code>def compress(*, jpeg_quality=95)</code>","text":"<p>Converts an <code>Image</code> to an <code>rerun.ImageEncoded</code> using JPEG compression.</p> <p>JPEG compression works best for photographs. Only RGB or Mono images are supported, not RGBA. Note that compressing to JPEG costs a bit of CPU time, both when logging and later when viewing them.</p> PARAMETER  DESCRIPTION <code>jpeg_quality</code> <p>Higher quality = larger file size. A quality of 95 still saves a lot of space, but is visually very similar.</p> <p> TYPE: <code>int</code> DEFAULT: <code>95</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D","title":"<code>class LineStrips2D</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: 2D line strips with positions and optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D--line_strip2d_batch","title":"<code>line_strip2d_batch</code>:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_line_strip2d_batch\", spawn=True)\n\nrr.log(\n    \"strips\",\n    rr.LineStrips2D(\n        [\n            [[0, 0], [2, 1], [4, -1], [6, 0]],\n            [[0, 3], [1, 4], [2, 2], [3, 4], [4, 2], [5, 4], [6, 3]],\n        ],\n        colors=[[255, 0, 0], [0, 255, 0]],\n        radii=[0.025, 0.005],\n        labels=[\"one strip here\", \"and one strip there\"],\n    ),\n)\n\n# Log an extra rect to set the view bounds\nrr.log(\"bounds\", rr.Boxes2D(centers=[3, 1.5], half_sizes=[4.0, 4.5]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D.__init__","title":"<code>def __init__(strips, *, radii=None, colors=None, labels=None, draw_order=None, class_ids=None)</code>","text":"<p>Create a new instance of the LineStrips2D archetype.</p> PARAMETER  DESCRIPTION <code>strips</code> <p>All the actual 2D line strips that make up the batch.</p> <p> TYPE: <code>LineStrip2DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the line strips.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the line strips.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the line strips.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order of each line strip.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the lines.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D","title":"<code>class LineStrips3D</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: 3D line strips with positions and optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D--many-strips","title":"Many strips:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_line_strip3d_batch\", spawn=True)\n\nrr.log(\n    \"strips\",\n    rr.LineStrips3D(\n        [\n            [\n                [0, 0, 2],\n                [1, 0, 2],\n                [1, 1, 2],\n                [0, 1, 2],\n            ],\n            [\n                [0, 0, 0],\n                [0, 0, 1],\n                [1, 0, 0],\n                [1, 0, 1],\n                [1, 1, 0],\n                [1, 1, 1],\n                [0, 1, 0],\n                [0, 1, 1],\n            ],\n        ],\n        colors=[[255, 0, 0], [0, 255, 0]],\n        radii=[0.025, 0.005],\n        labels=[\"one strip here\", \"and one strip there\"],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D.__init__","title":"<code>def __init__(strips, *, radii=None, colors=None, labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the LineStrips3D archetype.</p> PARAMETER  DESCRIPTION <code>strips</code> <p>All the actual 3D line strips that make up the batch.</p> <p> TYPE: <code>LineStrip3DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the line strips.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the line strips.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the line strips.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the lines.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D","title":"<code>class Mesh3D</code>","text":"<p>         Bases: <code>Mesh3DExt</code>, <code>Archetype</code></p> <p>Archetype: A 3D triangle mesh as specified by its per-mesh and per-vertex properties.</p> <p>See also <code>Asset3D</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D--simple-indexed-3d-mesh","title":"Simple indexed 3D mesh:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_mesh3d_indexed\", spawn=True)\n\nrr.log(\n    \"triangle\",\n    rr.Mesh3D(\n        vertex_positions=[[0.0, 1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n        vertex_normals=[0.0, 0.0, 1.0],\n        vertex_colors=[[0, 0, 255], [0, 255, 0], [255, 0, 0]],\n        indices=[2, 1, 0],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D.__init__","title":"<code>def __init__(*, vertex_positions, indices=None, mesh_properties=None, vertex_normals=None, vertex_colors=None, vertex_texcoords=None, albedo_texture=None, mesh_material=None, class_ids=None)</code>","text":"<p>Create a new instance of the Mesh3D archetype.</p> PARAMETER  DESCRIPTION <code>vertex_positions</code> <p>The positions of each vertex. If no <code>indices</code> are specified, then each triplet of positions is interpreted as a triangle.</p> <p> TYPE: <code>Vec3DArrayLike</code> </p> <code>indices</code> <p>If specified, a flattened array of indices that describe the mesh's triangles, i.e. its length must be divisible by 3. Mutually exclusive with <code>mesh_properties</code>.</p> <p> TYPE: <code>ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mesh_properties</code> <p>Optional properties for the mesh as a whole (including indexed drawing). Mutually exclusive with <code>indices</code>.</p> <p> TYPE: <code>MeshPropertiesLike | None</code> DEFAULT: <code>None</code> </p> <code>vertex_normals</code> <p>An optional normal for each vertex. If specified, this must have as many elements as <code>vertex_positions</code>.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>vertex_texcoords</code> <p>An optional texture coordinate for each vertex. If specified, this must have as many elements as <code>vertex_positions</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>vertex_colors</code> <p>An optional color for each vertex.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mesh_material</code> <p>Optional material properties for the mesh as a whole.</p> <p> TYPE: <code>MaterialLike | None</code> DEFAULT: <code>None</code> </p> <code>albedo_texture</code> <p>Optional albedo texture. Used with <code>vertex_texcoords</code> on <code>Mesh3D</code>. Currently supports only sRGB(A) textures, ignoring alpha. (meaning that the tensor must have 3 or 4 channels and use the <code>u8</code> format)</p> <p> TYPE: <code>TensorDataLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the vertices. The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole","title":"<code>class Pinhole</code>","text":"<p>         Bases: <code>PinholeExt</code>, <code>Archetype</code></p> <p>Archetype: Camera perspective projection (a.k.a. intrinsics).</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole--simple-pinhole-camera","title":"Simple pinhole camera:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_pinhole\", spawn=True)\nrng = np.random.default_rng(12345)\n\nimage = rng.uniform(0, 255, size=[3, 3, 3])\nrr.log(\"world/image\", rr.Pinhole(focal_length=3, width=3, height=3))\nrr.log(\"world/image\", rr.Image(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole--perspective-pinhole-camera","title":"Perspective pinhole camera:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_pinhole_perspective\", spawn=True)\n\nrr.log(\"world/cam\", rr.Pinhole(fov_y=0.7853982, aspect_ratio=1.7777778, camera_xyz=rr.ViewCoordinates.RUB))\n\nrr.log(\"world/points\", rr.Points3D([(0.0, 0.0, -0.5), (0.1, 0.1, -0.5), (-0.1, -0.1, -0.5)]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole.__init__","title":"<code>def __init__(*, image_from_camera=None, resolution=None, camera_xyz=None, width=None, height=None, focal_length=None, principal_point=None, fov_y=None, aspect_ratio=None)</code>","text":"<p>Create a new instance of the Pinhole archetype.</p> PARAMETER  DESCRIPTION <code>image_from_camera</code> <p>Row-major intrinsics matrix for projecting from camera space to image space. The first two axes are X=Right and Y=Down, respectively. Projection is done along the positive third (Z=Forward) axis. This can be specified instead of <code>focal_length</code> and <code>principal_point</code>.</p> <p> TYPE: <code>Mat3x3Like | None</code> DEFAULT: <code>None</code> </p> <code>resolution</code> <p>Pixel resolution (usually integers) of child image space. Width and height. <code>image_from_camera</code> projects onto the space spanned by <code>(0,0)</code> and <code>resolution - 1</code>.</p> <p> TYPE: <code>Vec2DLike | None</code> DEFAULT: <code>None</code> </p> <code>camera_xyz</code> <p>Sets the view coordinates for the camera.</p> <p>All common values are available as constants on the <code>components.ViewCoordinates</code> class.</p> <p>The default is <code>ViewCoordinates.RDF</code>, i.e. X=Right, Y=Down, Z=Forward, and this is also the recommended setting. This means that the camera frustum will point along the positive Z axis of the parent space, and the cameras \"up\" direction will be along the negative Y axis of the parent space.</p> <p>The camera frustum will point whichever axis is set to <code>F</code> (or the opposite of <code>B</code>). When logging a depth image under this entity, this is the direction the point cloud will be projected. With <code>RDF</code>, the default forward is +Z.</p> <p>The frustum's \"up\" direction will be whichever axis is set to <code>U</code> (or the opposite of <code>D</code>). This will match the negative Y direction of pixel space (all images are assumed to have xyz=RDF). With <code>RDF</code>, the default is up is -Y.</p> <p>The frustum's \"right\" direction will be whichever axis is set to <code>R</code> (or the opposite of <code>L</code>). This will match the positive X direction of pixel space (all images are assumed to have xyz=RDF). With <code>RDF</code>, the default right is +x.</p> <p>Other common formats are <code>RUB</code> (X=Right, Y=Up, Z=Back) and <code>FLU</code> (X=Forward, Y=Left, Z=Up).</p> <p>NOTE: setting this to something else than <code>RDF</code> (the default) will change the orientation of the camera frustum, and make the pinhole matrix not match up with the coordinate system of the pinhole entity.</p> <p>The pinhole matrix (the <code>image_from_camera</code> argument) always project along the third (Z) axis, but will be re-oriented to project along the forward axis of the <code>camera_xyz</code> argument.</p> <p> TYPE: <code>ViewCoordinatesLike | None</code> DEFAULT: <code>None</code> </p> <code>focal_length</code> <p>The focal length of the camera in pixels. This is the diagonal of the projection matrix. Set one value for symmetric cameras, or two values (X=Right, Y=Down) for anamorphic cameras.</p> <p> TYPE: <code>float | ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>principal_point</code> <p>The center of the camera in pixels. The default is half the width and height. This is the last column of the projection matrix. Expects two values along the dimensions Right and Down</p> <p> TYPE: <code>ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>Width of the image in pixels.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p> <code>height</code> <p>Height of the image in pixels.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p> <code>fov_y</code> <p>Vertical field of view in radians.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>aspect_ratio</code> <p>Aspect ratio (width/height).</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points2D","title":"<code>class Points2D</code>","text":"<p>         Bases: <code>Points2DExt</code>, <code>Archetype</code></p> <p>Archetype: A 2D point cloud with positions and optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Points2D--randomly-distributed-2d-points-with-varying-color-and-radius","title":"Randomly distributed 2D points with varying color and radius:","text":"<p><pre><code>import rerun as rr\nfrom numpy.random import default_rng\n\nrr.init(\"rerun_example_points2d_random\", spawn=True)\nrng = default_rng(12345)\n\npositions = rng.uniform(-3, 3, size=[10, 2])\ncolors = rng.uniform(0, 255, size=[10, 4])\nradii = rng.uniform(0, 1, size=[10])\n\nrr.log(\"random\", rr.Points2D(positions, colors=colors, radii=radii))\n\n# Log an extra rect to set the view bounds\nrr.log(\"bounds\", rr.Boxes2D(half_sizes=[4, 3]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points2D.__init__","title":"<code>def __init__(positions, *, radii=None, colors=None, labels=None, draw_order=None, class_ids=None, keypoint_ids=None)</code>","text":"<p>Create a new instance of the Points2D archetype.</p> PARAMETER  DESCRIPTION <code>positions</code> <p>All the 2D positions at which the point cloud shows points.</p> <p> TYPE: <code>Vec2DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the points, effectively turning them into circles.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p>The colors are interpreted as RGB or RGBA in sRGB gamma-space,  As either 0-1 floats or 0-255 integers, with separate alpha.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the points.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order.  Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>keypoint_ids</code> <p>Optional keypoint IDs for the points, identifying them within a class.</p> <p>If keypoint IDs are passed in but no class IDs were specified, the class ID will  default to 0.  This is useful to identify points within a single classification (which is identified  with <code>class_id</code>).  E.g. the classification might be 'Person' and the keypoints refer to joints on a  detected skeleton.</p> <p> TYPE: <code>KeypointIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D","title":"<code>class Points3D</code>","text":"<p>         Bases: <code>Points3DExt</code>, <code>Archetype</code></p> <p>Archetype: A 3D point cloud with positions and optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Points3D--randomly-distributed-3d-points-with-varying-color-and-radius","title":"Randomly distributed 3D points with varying color and radius:","text":"<p><pre><code>import rerun as rr\nfrom numpy.random import default_rng\n\nrr.init(\"rerun_example_points3d_random\", spawn=True)\nrng = default_rng(12345)\n\npositions = rng.uniform(-5, 5, size=[10, 3])\ncolors = rng.uniform(0, 255, size=[10, 3])\nradii = rng.uniform(0, 1, size=[10])\n\nrr.log(\"random\", rr.Points3D(positions, colors=colors, radii=radii))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D.__init__","title":"<code>def __init__(positions, *, radii=None, colors=None, labels=None, class_ids=None, keypoint_ids=None)</code>","text":"<p>Create a new instance of the Points3D archetype.</p> PARAMETER  DESCRIPTION <code>positions</code> <p>All the 3D positions at which the point cloud shows points.</p> <p> TYPE: <code>Vec3DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the points, effectively turning them into circles.</p> <p> TYPE: <code>RadiusArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p>The colors are interpreted as RGB or RGBA in sRGB gamma-space,  As either 0-1 floats or 0-255 integers, with separate alpha.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the points.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>keypoint_ids</code> <p>Optional keypoint IDs for the points, identifying them within a class.</p> <p>If keypoint IDs are passed in but no class IDs were specified, the class ID will  default to 0.  This is useful to identify points within a single classification (which is identified  with <code>class_id</code>).  E.g. the classification might be 'Person' and the keypoints refer to joints on a  detected skeleton.</p> <p> TYPE: <code>KeypointIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Scalar","title":"<code>class Scalar</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Log a double-precision scalar.</p> <p>The current timeline value will be used for the time/X-axis, hence scalars cannot be timeless.</p> <p>When used to produce a plot, this archetype is used to provide the data that is referenced by the <code>SeriesLine</code> or <code>SeriesPoint</code> archetypes. You can do this by logging both archetypes to the same path, or alternatively configuring the plot-specific archetypes through the blueprint.</p> <p>See also  <code>SeriesPoint</code>, <code>SeriesLine</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Scalar--simple-line-plot","title":"Simple line plot:","text":"<p><pre><code>import math\n\nimport rerun as rr\n\nrr.init(\"rerun_example_scalar\", spawn=True)\n\n# Log the data on a timeline called \"step\".\nfor step in range(0, 64):\n    rr.set_time_sequence(\"step\", step)\n    rr.log(\"scalar\", rr.Scalar(math.sin(step / 10.0)))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Scalar.__init__","title":"<code>def __init__(scalar)</code>","text":"<p>Create a new instance of the Scalar archetype.</p> PARAMETER  DESCRIPTION <code>scalar</code> <p>The scalar value to log.</p> <p> TYPE: <code>ScalarLike</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.SegmentationImage","title":"<code>class SegmentationImage</code>","text":"<p>         Bases: <code>SegmentationImageExt</code>, <code>Archetype</code></p> <p>Archetype: An image made up of integer class-ids.</p> <p>The shape of the <code>TensorData</code> must be mappable to an <code>HxW</code> tensor. Each pixel corresponds to a class-id that will be mapped to a color based on annotation context.</p> <p>In the case of floating point images, the label will be looked up based on rounding to the nearest integer value.</p> <p>Leading and trailing unit-dimensions are ignored, so that <code>1x640x480x1</code> is treated as a <code>640x480</code> image.</p> <p>See also <code>AnnotationContext</code> to associate each class with a color and a label.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.SegmentationImage--simple-segmentation-image","title":"Simple segmentation image:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\n# Create a segmentation image\nimage = np.zeros((8, 12), dtype=np.uint8)\nimage[0:4, 0:6] = 1\nimage[4:8, 6:12] = 2\n\nrr.init(\"rerun_example_segmentation_image\", spawn=True)\n\n# Assign a label and color to each class\nrr.log(\"/\", rr.AnnotationContext([(1, \"red\", (255, 0, 0)), (2, \"green\", (0, 255, 0))]), timeless=True)\n\nrr.log(\"image\", rr.SegmentationImage(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.SegmentationImage.__init__","title":"<code>def __init__(data, *, draw_order=None)</code>","text":"<p>Create a new instance of the SegmentationImage archetype.</p> PARAMETER  DESCRIPTION <code>data</code> <p>The image data. Should always be a rank-2 tensor.</p> <p> TYPE: <code>TensorDataLike</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesLine","title":"<code>class SeriesLine</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Define the style properties for a line series in a chart.</p> <p>This archetype only provides styling information and should be logged as timeless when possible. The underlying data needs to be logged to the same entity-path using the <code>Scalar</code> archetype.</p> <p>See <code>Scalar</code></p> Example"},{"location":"common/archetypes/#rerun.archetypes.SeriesLine--line-series","title":"Line series:","text":"<p><pre><code>from math import cos, sin, tau\n\nimport rerun as rr\n\nrr.init(\"rerun_example_series_line_style\", spawn=True)\n\n# Set up plot styling:\n# They are logged timeless as they don't change over time and apply to all timelines.\n# Log two lines series under a shared root so that they show in the same plot by default.\nrr.log(\"trig/sin\", rr.SeriesLine(color=[255, 0, 0], name=\"sin(0.01t)\", width=2), timeless=True)\nrr.log(\"trig/cos\", rr.SeriesLine(color=[0, 255, 0], name=\"cos(0.01t)\", width=4), timeless=True)\n\n# Log the data on a timeline called \"step\".\nfor t in range(0, int(tau * 2 * 100.0)):\n    rr.set_time_sequence(\"step\", t)\n\n    rr.log(\"trig/sin\", rr.Scalar(sin(float(t) / 100.0)))\n    rr.log(\"trig/cos\", rr.Scalar(cos(float(t) / 100.0)))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesLine.__init__","title":"<code>def __init__(*, color=None, width=None, name=None)</code>","text":"<p>Create a new instance of the SeriesLine archetype.</p> PARAMETER  DESCRIPTION <code>color</code> <p>Color for the corresponding series.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>Stroke width for the corresponding series.</p> <p> TYPE: <code>StrokeWidthLike | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Display name of the series.</p> <p>Used in the legend.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesPoint","title":"<code>class SeriesPoint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Define the style properties for a point series in a chart.</p> <p>This archetype only provides styling information and should be logged as timeless when possible. The underlying data needs to be logged to the same entity-path using the <code>Scalar</code> archetype.</p> <p>See <code>Scalar</code></p> Example"},{"location":"common/archetypes/#rerun.archetypes.SeriesPoint--point-series","title":"Point series:","text":"<p><pre><code>from math import cos, sin, tau\n\nimport rerun as rr\n\nrr.init(\"rerun_example_series_point_style\", spawn=True)\n\n# Set up plot styling:\n# They are logged timeless as they don't change over time and apply to all timelines.\n# Log two point series under a shared root so that they show in the same plot by default.\nrr.log(\n    \"trig/sin\",\n    rr.SeriesPoint(\n        color=[255, 0, 0],\n        name=\"sin(0.01t)\",\n        marker=\"circle\",\n        marker_size=4,\n    ),\n    timeless=True,\n)\nrr.log(\n    \"trig/cos\",\n    rr.SeriesPoint(\n        color=[0, 255, 0],\n        name=\"cos(0.01t)\",\n        marker=\"cross\",\n        marker_size=2,\n    ),\n    timeless=True,\n)\n\n# Log the data on a timeline called \"step\".\nfor t in range(0, int(tau * 2 * 10.0)):\n    rr.set_time_sequence(\"step\", t)\n\n    rr.log(\"trig/sin\", rr.Scalar(sin(float(t) / 10.0)))\n    rr.log(\"trig/cos\", rr.Scalar(cos(float(t) / 10.0)))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesPoint.__init__","title":"<code>def __init__(*, color=None, marker=None, name=None, marker_size=None)</code>","text":"<p>Create a new instance of the SeriesPoint archetype.</p> PARAMETER  DESCRIPTION <code>color</code> <p>Color for the corresponding series.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p> <code>marker</code> <p>What shape to use to represent the point</p> <p> TYPE: <code>MarkerShapeLike | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Display name of the series.</p> <p>Used in the legend.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>marker_size</code> <p>Size of the marker.</p> <p> TYPE: <code>MarkerSizeLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Tensor","title":"<code>class Tensor</code>","text":"<p>         Bases: <code>TensorExt</code>, <code>Archetype</code></p> <p>Archetype: A generic n-dimensional Tensor.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Tensor--simple-tensor","title":"Simple tensor:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\ntensor = np.random.randint(0, 256, (8, 6, 3, 5), dtype=np.uint8)  # 4-dimensional tensor\n\nrr.init(\"rerun_example_tensor\", spawn=True)\n\n# Log the tensor, assigning names to each dimension\nrr.log(\"tensor\", rr.Tensor(tensor, dim_names=(\"width\", \"height\", \"channel\", \"batch\")))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Tensor.__init__","title":"<code>def __init__(data=None, *, dim_names=None)</code>","text":"<p>Construct a <code>Tensor</code> archetype.</p> <p>The <code>Tensor</code> archetype internally contains a single component: <code>TensorData</code>.</p> <p>See the <code>TensorData</code> constructor for more advanced options to interpret buffers as <code>TensorData</code> of varying shapes.</p> <p>For simple cases, you can pass array objects and optionally specify the names of the dimensions. The shape of the <code>TensorData</code> will be inferred from the array.</p> PARAMETER  DESCRIPTION <code>self</code> <p>The TensorData object to construct.</p> <p> TYPE: <code>Any</code> </p> <code>data</code> <p>A TensorData object, or type that can be converted to a numpy array.</p> <p> TYPE: <code>TensorDataLike | TensorLike | None</code> DEFAULT: <code>None</code> </p> <code>dim_names</code> <p>The names of the tensor dimensions when generating the shape from an array.</p> <p> TYPE: <code>Sequence[str | None] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextDocument","title":"<code>class TextDocument</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: A text element intended to be displayed in its own text-box.</p> <p>Supports raw text and markdown.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.TextDocument--markdown-text-document","title":"Markdown text document:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_text_document\", spawn=True)\n\nrr.log(\"text_document\", rr.TextDocument(\"Hello, TextDocument!\"))\n\nrr.log(\n    \"markdown\",\n    rr.TextDocument(\n        '''\n# Hello Markdown!\n[Click here to see the raw text](recording://markdown:Text).\n\nBasic formatting:\n\n| **Feature**       | **Alternative** |\n| ----------------- | --------------- |\n| Plain             |                 |\n| *italics*         | _italics_       |\n| **bold**          | __bold__        |\n| ~~strikethrough~~ |                 |\n| `inline code`     |                 |\n\n----------------------------------\n\n## Support\n- [x] [Commonmark](https://commonmark.org/help/) support\n- [x] GitHub-style strikethrough, tables, and checkboxes\n- Basic syntax highlighting for:\n  - [x] C and C++\n  - [x] Python\n  - [x] Rust\n  - [ ] Other languages\n\n## Links\nYou can link to [an entity](recording://markdown),\na [specific instance of an entity](recording://markdown[#0]),\nor a [specific component](recording://markdown:Text).\n\nOf course you can also have [normal https links](https://github.com/rerun-io/rerun), e.g. &lt;https://rerun.io&gt;.\n\n## Image\n![A random image](https://picsum.photos/640/480)\n'''.strip(),\n        media_type=rr.MediaType.MARKDOWN,\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextDocument.__init__","title":"<code>def __init__(text, *, media_type=None)</code>","text":"<p>Create a new instance of the TextDocument archetype.</p> PARAMETER  DESCRIPTION <code>text</code> <p>Contents of the text document.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>media_type</code> <p>The Media Type of the text.</p> <p>For instance: * <code>text/plain</code> * <code>text/markdown</code></p> <p>If omitted, <code>text/plain</code> is assumed.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextLog","title":"<code>class TextLog</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: A log entry in a text log, comprised of a text body and its log level.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.TextLog--text_log_integration","title":"<code>text_log_integration</code>:","text":"<p><pre><code>import logging\n\nimport rerun as rr\n\nrr.init(\"rerun_example_text_log_integration\", spawn=True)\n\n# Log a text entry directly\nrr.log(\"logs\", rr.TextLog(\"this entry has loglevel TRACE\", level=rr.TextLogLevel.TRACE))\n\n# Or log via a logging handler\nlogging.getLogger().addHandler(rr.LoggingHandler(\"logs/handler\"))\nlogging.getLogger().setLevel(-1)\nlogging.info(\"This INFO log got added through the standard logging interface\")\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextLog.__init__","title":"<code>def __init__(text, *, level=None, color=None)</code>","text":"<p>Create a new instance of the TextLog archetype.</p> PARAMETER  DESCRIPTION <code>text</code> <p>The body of the message.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>level</code> <p>The verbosity level of the message.</p> <p>This can be used to filter the log messages in the Rerun Viewer.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Optional color to use for the log line in the Rerun Viewer.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Transform3D","title":"<code>class Transform3D</code>","text":"<p>         Bases: <code>Transform3DExt</code>, <code>Archetype</code></p> <p>Archetype: A 3D transform.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Transform3D--variety-of-3d-transforms","title":"Variety of 3D transforms:","text":"<p><pre><code>from math import pi\n\nimport rerun as rr\nfrom rerun.datatypes import Angle, RotationAxisAngle\n\nrr.init(\"rerun_example_transform3d\", spawn=True)\n\narrow = rr.Arrows3D(origins=[0, 0, 0], vectors=[0, 1, 0])\n\nrr.log(\"base\", arrow)\n\nrr.log(\"base/translated\", rr.Transform3D(translation=[1, 0, 0]))\nrr.log(\"base/translated\", arrow)\n\nrr.log(\n    \"base/rotated_scaled\",\n    rr.Transform3D(\n        rotation=RotationAxisAngle(axis=[0, 0, 1], angle=Angle(rad=pi / 4)),\n        scale=2,\n    ),\n)\nrr.log(\"base/rotated_scaled\", arrow)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Transform3D.__init__","title":"<code>def __init__(transform=None, *, translation=None, rotation=None, scale=None, mat3x3=None, from_parent=None)</code>","text":"<p>Create a new instance of the Transform3D archetype.</p> PARAMETER  DESCRIPTION <code>transform</code> <p>Transform using an existing Transform3D datatype object. If not provided, none of the other named parameters must be set.</p> <p> TYPE: <code>Transform3DLike | None</code> DEFAULT: <code>None</code> </p> <code>translation</code> <p>3D translation vector, applied last. Not compatible with <code>transform</code>.</p> <p> TYPE: <code>Vec3DLike | None</code> DEFAULT: <code>None</code> </p> <code>rotation</code> <p>3D rotation, applied second. Not compatible with <code>transform</code> and <code>mat3x3</code> parameters.</p> <p> TYPE: <code>Rotation3DLike | None</code> DEFAULT: <code>None</code> </p> <code>scale</code> <p>3D scale, applied last. Not compatible with <code>transform</code> and <code>mat3x3</code> parameters.</p> <p> TYPE: <code>Scale3DLike | None</code> DEFAULT: <code>None</code> </p> <code>mat3x3</code> <p>3x3 matrix representing scale and rotation, applied after translation. Not compatible with <code>rotation</code> and <code>scale</code> parameters. TODO(#3559): Support 4x4 and 4x3 matrices.</p> <p> TYPE: <code>Mat3x3Like | None</code> DEFAULT: <code>None</code> </p> <code>from_parent</code> <p>If true, the transform maps from the parent space to the space where the transform was logged.  Otherwise, the transform maps from the space to its parent.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.ViewCoordinates","title":"<code>class ViewCoordinates</code>","text":"<p>         Bases: <code>ViewCoordinatesExt</code>, <code>Archetype</code></p> <p>Archetype: How we interpret the coordinate system of an entity/space.</p> <p>For instance: What is \"up\"? What does the Z axis mean? Is this right-handed or left-handed?</p> <p>The three coordinates are always ordered as [x, y, z].</p> <p>For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points down, and the Z axis points forward.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.ViewCoordinates--view-coordinates-for-adjusting-the-eye-camera","title":"View coordinates for adjusting the eye camera:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_view_coordinates\", spawn=True)\n\nrr.log(\"world\", rr.ViewCoordinates.RIGHT_HAND_Z_UP, timeless=True)  # Set an up-axis\nrr.log(\n    \"world/xyz\",\n    rr.Arrows3D(\n        vectors=[[1, 0, 0], [0, 1, 0], [0, 0, 1]],\n        colors=[[255, 0, 0], [0, 255, 0], [0, 0, 255]],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.ViewCoordinates.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the ViewCoordinates archetype.</p>"},{"location":"common/blueprint_apis/","title":"APIs","text":""},{"location":"common/blueprint_apis/#rerun.blueprint","title":"<code>rerun.blueprint</code>","text":""},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPart","title":"<code>BlueprintPart = Union[ContainerLike, BlueprintPanel, SelectionPanel, TimePanel]</code>  <code>module-attribute</code>","text":"<p>The types that make up a blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.ContainerLike","title":"<code>ContainerLike = Union[Container, SpaceView]</code>  <code>module-attribute</code>","text":"<p>A type that can be converted to a container.</p> <p>These types all implement a <code>to_container()</code> method that wraps them in the necessary helper classes.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint","title":"<code>class Blueprint</code>","text":"<p>The top-level description of the viewer blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.__init__","title":"<code>def __init__(*parts, auto_layout=None, auto_space_views=None, collapse_panels=False)</code>","text":"<p>Construct a new blueprint from the given parts.</p> <p>Each BlueprintPart can be one of the following:</p> <ul> <li>ContainerLike</li> <li>BlueprintPanel</li> <li>SelectionPanel</li> <li>TimePanel</li> </ul> <p>It is an error to provide more than one of instance of any of the panel types.</p> <p>Blueprints only have a single top-level \"root\" container that defines the viewport. If you provide multiple <code>ContainerLike</code> instances, they will be combined under a single root <code>Tab</code> container.</p> PARAMETER  DESCRIPTION <code>*parts</code> <p>The parts of the blueprint.</p> <p> TYPE: <code>BlueprintPart</code> DEFAULT: <code>()</code> </p> <code>auto_layout</code> <p>Whether to automatically layout the viewport. If <code>True</code>, the container layout will be reset whenever a new space view is added to the viewport. Defaults to <code>False</code>. Defaults to <code>False</code> unless no Containers or SpaceViews are provided, in which case it defaults to <code>True</code>. If you want to create a completely empty Blueprint, you must explicitly set this to <code>False</code>.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>auto_space_views</code> <p>Whether to automatically add space views to the viewport. If <code>True</code>, the viewport will automatically add space views based on content in the data store. Defaults to <code>False</code> unless no Containers or SpaceViews are provided, in which case it defaults to <code>True</code>. If you want to create a completely empty Blueprint, you must explicitly set this to <code>False</code>.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>collapse_panels</code> <p>Whether to collapse the panels in the viewer. Defaults to <code>False</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.connect","title":"<code>def connect(application_id, *, addr=None, make_active=True, make_default=True)</code>","text":"<p>Connect to a remote Rerun Viewer on the given ip:port and send this blueprint.</p> PARAMETER  DESCRIPTION <code>application_id</code> <p>The application ID to use for this blueprint. This must match the application ID used when initiating rerun for any data logging you wish to associate with this blueprint.</p> <p> TYPE: <code>str</code> </p> <code>addr</code> <p>The ip:port to connect to</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>make_active</code> <p>Immediately make this the active blueprint for the associated <code>app_id</code>. Note that setting this to <code>false</code> does not mean the blueprint may not still end up becoming active. In particular, if <code>make_default</code> is true and there is no other currently active blueprint.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>make_default</code> <p>Make this the default blueprint for the <code>app_id</code>. The default blueprint will be used as the template when the user resets the blueprint for the app. It will also become the active blueprint if no other blueprint is currently active.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.save","title":"<code>def save(application_id, path=None)</code>","text":"<p>Save this blueprint to a file. Rerun recommends the <code>.rbl</code> suffix.</p> PARAMETER  DESCRIPTION <code>application_id</code> <p>The application ID to use for this blueprint. This must match the application ID used when initiating rerun for any data logging you wish to associate with this blueprint.</p> <p> TYPE: <code>str</code> </p> <code>path</code> <p>The path to save the blueprint to. Defaults to <code>&lt;application_id&gt;.rbl</code>.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.spawn","title":"<code>def spawn(application_id, port=9876, memory_limit='75%')</code>","text":"<p>Spawn a Rerun viewer with this blueprint.</p> PARAMETER  DESCRIPTION <code>application_id</code> <p>The application ID to use for this blueprint. This must match the application ID used when initiating rerun for any data logging you wish to associate with this blueprint.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The port to listen on.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9876</code> </p> <code>memory_limit</code> <p>An upper limit on how much memory the Rerun Viewer should use. When this limit is reached, Rerun will drop the oldest data. Example: <code>16GB</code> or <code>50%</code> (of system total).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'75%'</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Conform with the <code>BlueprintLike</code> interface.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container","title":"<code>class Container</code>","text":"<p>Base class for all container types.</p> <p>Consider using one of the subclasses instead of this class directly:</p> <ul> <li>rerun.blueprint.Horizontal</li> <li>rerun.blueprint.Vertical</li> <li>rerun.blueprint.Grid</li> <li>rerun.blueprint.Tabs</li> </ul> <p>These are ergonomic helpers on top of rerun.blueprint.archetypes.ContainerBlueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.__init__","title":"<code>def __init__(*args, contents=None, kind, column_shares=None, row_shares=None, grid_columns=None, active_tab=None, name)</code>","text":"<p>Construct a new container.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>kind</code> <p>The kind of the container. This must correspond to a known container kind. Prefer to use one of the subclasses of <code>Container</code> which will populate this for you.</p> <p> TYPE: <code>ContainerKindLike</code> </p> <code>column_shares</code> <p>The layout shares of the columns in the container. The share is used to determine what fraction of the total width each column should take up. The column with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>. This is only applicable to <code>Horizontal</code> or <code>Grid</code> containers.</p> <p> TYPE: <code>Optional[ColumnShareArrayLike]</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of the rows in the container. The share is used to determine what fraction of the total height each row should take up. The row with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>. This is only applicable to <code>Vertical</code> or <code>Grid</code> containers.</p> <p> TYPE: <code>Optional[RowShareArrayLike]</code> DEFAULT: <code>None</code> </p> <code>grid_columns</code> <p>The number of columns in the grid. This is only applicable to <code>Grid</code> containers.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>active_tab</code> <p>The active tab in the container. This is only applicable to <code>Tabs</code> containers.</p> <p> TYPE: <code>Optional[int | str]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal","title":"<code>class Horizontal</code>","text":"<p>         Bases: <code>Container</code></p> <p>A horizontal container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.__init__","title":"<code>def __init__(*args, contents=None, column_shares=None, name=None)</code>","text":"<p>Construct a new horizontal container.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>column_shares</code> <p>The layout shares of the columns in the container. The share is used to determine what fraction of the total width each column should take up. The column with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[ColumnShareArrayLike]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical","title":"<code>class Vertical</code>","text":"<p>         Bases: <code>Container</code></p> <p>A vertical container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.__init__","title":"<code>def __init__(*args, contents=None, row_shares=None, name=None)</code>","text":"<p>Construct a new vertical container.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of the rows in the container. The share is used to determine what fraction of the total height each row should take up. The row with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[RowShareArrayLike]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid","title":"<code>class Grid</code>","text":"<p>         Bases: <code>Container</code></p> <p>A grid container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.__init__","title":"<code>def __init__(*args, contents=None, column_shares=None, row_shares=None, grid_columns=None, name=None)</code>","text":"<p>Construct a new grid container.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>column_shares</code> <p>The layout shares of the columns in the container. The share is used to determine what fraction of the total width each column should take up. The column with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[ColumnShareArrayLike]</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of the rows in the container. The share is used to determine what fraction of the total height each row should take up. The row with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[RowShareArrayLike]</code> DEFAULT: <code>None</code> </p> <code>grid_columns</code> <p>The number of columns in the grid.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs","title":"<code>class Tabs</code>","text":"<p>         Bases: <code>Container</code></p> <p>A tab container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.__init__","title":"<code>def __init__(*args, contents=None, active_tab=None, name=None)</code>","text":"<p>Construct a new tab container.</p> PARAMETER  DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>active_tab</code> <p>The index or name of the active tab.</p> <p> TYPE: <code>Optional[int | str]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView","title":"<code>class SpaceView</code>","text":"<p>Base class for all space view types.</p> <p>Consider using one of the subclasses instead of this class directly:</p> <ul> <li>rerun.blueprint.BarChartView</li> <li>rerun.blueprint.Spatial2DView</li> <li>rerun.blueprint.Spatial3DView</li> <li>rerun.blueprint.TensorView</li> <li>rerun.blueprint.TextDocumentView</li> <li>rerun.blueprint.TextLogView</li> <li>rerun.blueprint.TimeSeriesView</li> </ul> <p>These are ergonomic helpers on top of rerun.blueprint.archetypes.SpaceViewBlueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.__init__","title":"<code>def __init__(*, class_identifier, origin, contents, name)</code>","text":"<p>Construct a blueprint for a new space view.</p> PARAMETER  DESCRIPTION <code>name</code> <p>The name of the space view.</p> <p> TYPE: <code>Utf8Like | None</code> </p> <code>class_identifier</code> <p>The class of the space view to add. This must correspond to a known space view class. Prefer to use one of the subclasses of <code>SpaceView</code> which will populate this for you.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this space view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView","title":"<code>class BarChartView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A bar chart view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new bar chart view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView","title":"<code>class Spatial2DView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A Spatial 2D view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new spatial 2D view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView","title":"<code>class Spatial3DView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A Spatial 3D view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new spatial 3D view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView","title":"<code>class TensorView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A tensor view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new tensor view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView","title":"<code>class TextDocumentView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A text document view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new text document view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView","title":"<code>class TextLogView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A text log view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new text log view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView","title":"<code>class TimeSeriesView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>A time series view.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None)</code>","text":"<p>Construct a blueprint for a new time series view.</p> PARAMETER  DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPanel","title":"<code>class BlueprintPanel</code>","text":"<p>         Bases: <code>Panel</code></p> <p>The state of the blueprint panel.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPanel.__init__","title":"<code>def __init__(*, expanded=None)</code>","text":"<p>Construct a new blueprint panel.</p> PARAMETER  DESCRIPTION <code>expanded</code> <p>Whether the panel is expanded or not.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPanel.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SelectionPanel","title":"<code>class SelectionPanel</code>","text":"<p>         Bases: <code>Panel</code></p> <p>The state of the selection panel.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SelectionPanel.__init__","title":"<code>def __init__(*, expanded=None)</code>","text":"<p>Construct a new selection panel.</p> PARAMETER  DESCRIPTION <code>expanded</code> <p>Whether the panel is expanded or not.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SelectionPanel.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimePanel","title":"<code>class TimePanel</code>","text":"<p>         Bases: <code>Panel</code></p> <p>The state of the time panel.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimePanel.__init__","title":"<code>def __init__(*, expanded=None)</code>","text":"<p>Construct a new time panel.</p> PARAMETER  DESCRIPTION <code>expanded</code> <p>Whether the panel is expanded or not.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimePanel.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_archetypes/","title":"Archetypes","text":""},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes","title":"<code>rerun.blueprint.archetypes</code>","text":""},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.Background3D","title":"<code>class Background3D</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Configuration for the background of the 3D space view.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.Background3D.__init__","title":"<code>def __init__(kind, *, color=None)</code>","text":"<p>Create a new instance of the Background3D archetype.</p> PARAMETER  DESCRIPTION <code>kind</code> <p>The type of the background. Defaults to DirectionalGradient</p> <p> TYPE: <code>Background3DKindLike</code> </p> <code>color</code> <p>Color used for Background3DKind.SolidColor.</p> <p>Defaults to White.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ContainerBlueprint","title":"<code>class ContainerBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The top-level description of the Viewport.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ContainerBlueprint.__init__","title":"<code>def __init__(container_kind, *, display_name=None, contents=None, col_shares=None, row_shares=None, active_tab=None, visible=None, grid_columns=None)</code>","text":"<p>Create a new instance of the ContainerBlueprint archetype.</p> PARAMETER  DESCRIPTION <code>container_kind</code> <p>The class of the view.</p> <p> TYPE: <code>ContainerKindLike</code> </p> <code>display_name</code> <p>The name of the container.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p><code>ContainerIds</code>s or <code>SpaceViewId</code>s that are children of this container.</p> <p> TYPE: <code>EntityPathArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>col_shares</code> <p>The layout shares of each column in the container.</p> <p>For <code>Horizontal</code> containers, the length of this list should always match the number of contents.</p> <p>Ignored for <code>Vertical</code> containers.</p> <p> TYPE: <code>ColumnShareArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of each row of the container.</p> <p>For <code>Vertical</code> containers, the length of this list should always match the number of contents.</p> <p>Ignored for <code>Horizontal</code> containers.</p> <p> TYPE: <code>RowShareArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>active_tab</code> <p>Which tab is active.</p> <p>Only applies to <code>Tabs</code> containers.</p> <p> TYPE: <code>EntityPathLike | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this container is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>VisibleLike | None</code> DEFAULT: <code>None</code> </p> <code>grid_columns</code> <p>How many columns this grid should have.</p> <p>If unset, the grid layout will be auto.</p> <p>Ignored for <code>Horizontal</code>/<code>Vertical</code> containers.</p> <p> TYPE: <code>GridColumnsLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PanelBlueprint","title":"<code>class PanelBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Shared state for the 3 collapsible panels.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PanelBlueprint.__init__","title":"<code>def __init__(*, expanded=None)</code>","text":"<p>Create a new instance of the PanelBlueprint archetype.</p> PARAMETER  DESCRIPTION <code>expanded</code> <p>Whether or not the panel is expanded.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PlotLegend","title":"<code>class PlotLegend</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Configuration for the legend of a plot.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PlotLegend.__init__","title":"<code>def __init__(*, corner=None, visible=None)</code>","text":"<p>Create a new instance of the PlotLegend archetype.</p> PARAMETER  DESCRIPTION <code>corner</code> <p>To what corner the legend is aligned.</p> <p>Defaults to the right bottom corner.</p> <p> TYPE: <code>Corner2DLike | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether the legend is shown at all.</p> <p>True by default.</p> <p> TYPE: <code>VisibleLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ScalarAxis","title":"<code>class ScalarAxis</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Configuration for the scalar axis of a plot.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ScalarAxis.__init__","title":"<code>def __init__(*, range=None, lock_range_during_zoom=None)</code>","text":"<p>Create a new instance of the ScalarAxis archetype.</p> PARAMETER  DESCRIPTION <code>range</code> <p>The range of the axis.</p> <p>If unset, the range well be automatically determined based on the queried data.</p> <p> TYPE: <code>Range1DLike | None</code> DEFAULT: <code>None</code> </p> <code>lock_range_during_zoom</code> <p>Whether to lock the range of the axis during zoom.</p> <p> TYPE: <code>LockRangeDuringZoomLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewBlueprint","title":"<code>class SpaceViewBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The top-level description of the Viewport.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewBlueprint.__init__","title":"<code>def __init__(class_identifier, *, display_name=None, space_origin=None, visible=None)</code>","text":"<p>Create a new instance of the SpaceViewBlueprint archetype.</p> PARAMETER  DESCRIPTION <code>class_identifier</code> <p>The class of the view.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>display_name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>space_origin</code> <p>The \"anchor point\" of this space view.</p> <p>Defaults to the root path '/' if not specified.</p> <p>The transform at this path forms the reference point for all scene-&gt;world transforms in this space view. I.e. the position of this entity path in space forms the origin of the coordinate system in this space view. Furthermore, this is the primary indicator for heuristics on what entities we show in this space view.</p> <p> TYPE: <code>EntityPathLike | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this space view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>VisibleLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewContents","title":"<code>class SpaceViewContents</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The contents of a <code>SpaceView</code>.</p> <p>The contents are found by combining a collection of <code>QueryExpression</code>s.</p> <pre><code>+ /world/**           # add everything\u2026\n- /world/roads/**     # \u2026but remove all roads\u2026\n+ /world/roads/main   # \u2026but show main road\n</code></pre> <p>If there is multiple matching rules, the most specific rule wins. If there are multiple rules of the same specificity, the last one wins. If no rules match, the path is excluded.</p> <p>Specifying a path without a <code>+</code> or <code>-</code> prefix is equivalent to <code>+</code>: <pre><code>/world/**           # add everything\u2026\n- /world/roads/**   # \u2026but remove all roads\u2026\n/world/roads/main   # \u2026but show main road\n</code></pre></p> <p>The <code>/**</code> suffix matches the whole subtree, i.e. self and any child, recursively (<code>/world/**</code> matches both <code>/world</code> and <code>/world/car/driver</code>). Other uses of <code>*</code> are not (yet) supported.</p> <p>Internally, <code>EntityPathFilter</code> sorts the rule by entity path, with recursive coming before non-recursive. This means the last matching rule is also the most specific one. For instance: <pre><code>+ /world/**\n- /world\n- /world/car/**\n+ /world/car/driver\n</code></pre></p> <p>The last rule matching <code>/world/car/driver</code> is <code>+ /world/car/driver</code>, so it is included. The last rule matching <code>/world/car/hood</code> is <code>- /world/car/**</code>, so it is excluded. The last rule matching <code>/world</code> is <code>- /world</code>, so it is excluded. The last rule matching <code>/world/house</code> is <code>+ /world/**</code>, so it is included.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewContents.__init__","title":"<code>def __init__(query)</code>","text":"<p>Create a new instance of the SpaceViewContents archetype.</p> PARAMETER  DESCRIPTION <code>query</code> <p>The <code>QueryExpression</code> that populates the contents for the <code>SpaceView</code>.</p> <p>They determine which entities are part of the spaceview.</p> <p> TYPE: <code>Utf8ArrayLike</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ViewportBlueprint","title":"<code>class ViewportBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The top-level description of the Viewport.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ViewportBlueprint.__init__","title":"<code>def __init__(*, root_container=None, maximized=None, auto_layout=None, auto_space_views=None, past_viewer_recommendations=None)</code>","text":"<p>Create a new instance of the ViewportBlueprint archetype.</p> PARAMETER  DESCRIPTION <code>root_container</code> <p>The layout of the space-views</p> <p> TYPE: <code>UuidLike | None</code> DEFAULT: <code>None</code> </p> <code>maximized</code> <p>Show one tab as maximized?</p> <p> TYPE: <code>UuidLike | None</code> DEFAULT: <code>None</code> </p> <code>auto_layout</code> <p>Whether the viewport layout is determined automatically.</p> <p>If <code>true</code>, the container layout will be reset whenever a new space view is added or removed. This defaults to <code>false</code> and is automatically set to <code>false</code> when there is user determined layout.</p> <p> TYPE: <code>AutoLayoutLike | None</code> DEFAULT: <code>None</code> </p> <code>auto_space_views</code> <p>Whether or not space views should be created automatically.</p> <p>If <code>true</code>, the viewer will only add space views that it hasn't considered previously (as identified by <code>past_viewer_recommendations</code>) and which aren't deemed redundant to existing space views. This defaults to <code>false</code> and is automatically set to <code>false</code> when the user adds space views manually in the viewer.</p> <p> TYPE: <code>AutoSpaceViewsLike | None</code> DEFAULT: <code>None</code> </p> <code>past_viewer_recommendations</code> <p>Hashes of all recommended space views the viewer has already added and that should not be added again.</p> <p>This is an internal field and should not be set usually. If you want the viewer from stopping to add space views, you should set <code>auto_space_views</code> to <code>false</code>.</p> <p>The viewer uses this to determine whether it should keep adding space views.</p> <p> TYPE: <code>UInt64ArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_components/","title":"Components","text":""},{"location":"common/blueprint_components/#rerun.blueprint.datatypes","title":"<code>rerun.blueprint.datatypes</code>","text":""},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRange","title":"<code>class VisibleTimeRange</code>","text":"<p>Datatype: Visible time range bounds.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRange.__init__","title":"<code>def __init__(from_sequence, to_sequence, from_time, to_time)</code>","text":"<p>Create a new instance of the VisibleTimeRange datatype.</p> PARAMETER  DESCRIPTION <code>from_sequence</code> <p>Low time boundary for sequence timeline.</p> <p> TYPE: <code>VisibleTimeRangeBoundaryLike</code> </p> <code>to_sequence</code> <p>High time boundary for sequence timeline.</p> <p> TYPE: <code>VisibleTimeRangeBoundaryLike</code> </p> <code>from_time</code> <p>Low time boundary for time timeline.</p> <p> TYPE: <code>VisibleTimeRangeBoundaryLike</code> </p> <code>to_time</code> <p>High time boundary for time timeline.</p> <p> TYPE: <code>VisibleTimeRangeBoundaryLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRangeBoundary","title":"<code>class VisibleTimeRangeBoundary</code>","text":"<p>Datatype: Type of boundary for visible history.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRangeBoundary.__init__","title":"<code>def __init__(kind, time)</code>","text":"<p>Create a new instance of the VisibleTimeRangeBoundary datatype.</p> PARAMETER  DESCRIPTION <code>kind</code> <p>Type of the boundary.</p> <p> TYPE: <code>VisibleTimeRangeBoundaryKindLike</code> </p> <code>time</code> <p>Value of the boundary (ignored for <code>Infinite</code> type).</p> <p> TYPE: <code>TimeIntLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRangeBoundaryKind","title":"<code>class VisibleTimeRangeBoundaryKind</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Datatype: Kind of boundary for visible history, see <code>VisibleTimeRangeBoundary</code>.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRangeBoundaryKind.Absolute","title":"<code>Absolute = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Boundary is an absolute value.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRangeBoundaryKind.Infinite","title":"<code>Infinite = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The boundary extends to infinity.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.datatypes.VisibleTimeRangeBoundaryKind.RelativeToTimeCursor","title":"<code>RelativeToTimeCursor = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Boundary is a value relative to the time cursor.</p>"},{"location":"common/blueprint_datatypes/","title":"Datatypes","text":""},{"location":"common/blueprint_datatypes/#rerun.blueprint.components","title":"<code>rerun.blueprint.components</code>","text":""},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.ActiveTab","title":"<code>class ActiveTab</code>","text":"<p>         Bases: <code>EntityPath</code></p> <p>Component: The active tab in a tabbed container.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.AutoLayout","title":"<code>class AutoLayout</code>","text":"<p>         Bases: <code>AutoLayoutExt</code></p> <p>Component: Whether the viewport layout is determined automatically.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.AutoLayout.__init__","title":"<code>def __init__(auto_layout)</code>","text":"<p>Create a new instance of the AutoLayout component.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.AutoSpaceViews","title":"<code>class AutoSpaceViews</code>","text":"<p>         Bases: <code>AutoSpaceViewsExt</code></p> <p>Component: Whether or not space views should be created automatically.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.AutoSpaceViews.__init__","title":"<code>def __init__(auto_space_views)</code>","text":"<p>Create a new instance of the AutoSpaceViews component.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Background3DKind","title":"<code>class Background3DKind</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: The type of the background in 3D space views.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Background3DKind.GradientBright","title":"<code>GradientBright = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Gradient depending on the direction of the view, bright theme.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Background3DKind.GradientDark","title":"<code>GradientDark = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Gradient depending on the direction of the view, dark theme.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Background3DKind.SolidColor","title":"<code>SolidColor = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Simple uniform color.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.ColumnShare","title":"<code>class ColumnShare</code>","text":"<p>         Bases: <code>ColumnShareExt</code></p> <p>Component: The layout share of a column in the container.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.ColumnShare.__init__","title":"<code>def __init__(share)</code>","text":"<p>Create a new instance of the ColumnShare component.</p> PARAMETER  DESCRIPTION <code>share</code> <p>The layout shares of a column in the container.</p> <p> TYPE: <code>ColumnShareLike</code> </p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.ContainerKind","title":"<code>class ContainerKind</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: The kind of a blueprint container (tabs, grid, \u2026).</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Corner2D","title":"<code>class Corner2D</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: One of four 2D corners, typically used to align objects.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.EntityPropertiesComponent","title":"<code>class EntityPropertiesComponent</code>","text":"<p>Component: The configurable set of overridable properties.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.EntityPropertiesComponent.__init__","title":"<code>def __init__(props)</code>","text":"<p>Create a new instance of the EntityPropertiesComponent component.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.GridColumns","title":"<code>class GridColumns</code>","text":"<p>         Bases: <code>GridColumnsExt</code></p> <p>Component: How many columns a grid container should have.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.GridColumns.__init__","title":"<code>def __init__(columns)</code>","text":"<p>Create a new instance of the GridColumns component.</p> PARAMETER  DESCRIPTION <code>columns</code> <p>The number of columns.</p> <p> TYPE: <code>GridColumnsLike</code> </p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.IncludedContent","title":"<code>class IncludedContent</code>","text":"<p>         Bases: <code>EntityPath</code></p> <p>Component: All the contents in the container.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.IncludedSpaceView","title":"<code>class IncludedSpaceView</code>","text":"<p>         Bases: <code>Uuid</code></p> <p>Component: The unique id of a space view, used to refer to views in containers.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.LockRangeDuringZoom","title":"<code>class LockRangeDuringZoom</code>","text":"<p>Component: Indicate whether the range should be locked when zooming in on the data.</p> <p>Default is <code>false</code>, i.e. zoom will change the visualized range.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.LockRangeDuringZoom.__init__","title":"<code>def __init__(lock_range)</code>","text":"<p>Create a new instance of the LockRangeDuringZoom component.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.PanelExpanded","title":"<code>class PanelExpanded</code>","text":"<p>         Bases: <code>Bool</code></p> <p>Component: Whether an application panel is expanded or not.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.QueryExpression","title":"<code>class QueryExpression</code>","text":"<p>         Bases: <code>Utf8</code></p> <p>Component: An individual <code>QueryExpression</code> used to filter a set of <code>EntityPath</code>s.</p> <p>Each expression is either an inclusion or an exclusion expression. Inclusions start with an optional <code>+</code> and exclusions must start with a <code>-</code>.</p> <p>Multiple expressions are combined together as part of <code>SpaceViewContents</code>.</p> <p>The <code>/**</code> suffix matches the whole subtree, i.e. self and any child, recursively (<code>/world/**</code> matches both <code>/world</code> and <code>/world/car/driver</code>). Other uses of <code>*</code> are not (yet) supported.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.RootContainer","title":"<code>class RootContainer</code>","text":"<p>         Bases: <code>Uuid</code></p> <p>Component: The container that sits at the root of a viewport.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.RowShare","title":"<code>class RowShare</code>","text":"<p>         Bases: <code>RowShareExt</code></p> <p>Component: The layout share of a row in the container.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.RowShare.__init__","title":"<code>def __init__(share)</code>","text":"<p>Create a new instance of the RowShare component.</p> PARAMETER  DESCRIPTION <code>share</code> <p>The layout share of a row in the container.</p> <p> TYPE: <code>RowShareLike</code> </p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.SpaceViewClass","title":"<code>class SpaceViewClass</code>","text":"<p>         Bases: <code>Utf8</code></p> <p>Component: The class of a <code>SpaceView</code>.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.SpaceViewMaximized","title":"<code>class SpaceViewMaximized</code>","text":"<p>         Bases: <code>Uuid</code></p> <p>Component: Whether a space view is maximized.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.SpaceViewOrigin","title":"<code>class SpaceViewOrigin</code>","text":"<p>         Bases: <code>EntityPath</code></p> <p>Component: The origin of a <code>SpaceView</code>.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.ViewerRecommendationHash","title":"<code>class ViewerRecommendationHash</code>","text":"<p>         Bases: <code>UInt64</code></p> <p>Component: Hash of a viewer recommendation.</p> <p>The formation of this hash is considered an internal implementation detail of the viewer.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Visible","title":"<code>class Visible</code>","text":"<p>         Bases: <code>VisibleExt</code></p> <p>Component: Whether the container, space view, entity or instance is currently visible.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.Visible.__init__","title":"<code>def __init__(visible)</code>","text":"<p>Create a new instance of the Visible component.</p>"},{"location":"common/blueprint_datatypes/#rerun.blueprint.components.VisibleTimeRange","title":"<code>class VisibleTimeRange</code>","text":"<p>         Bases: <code>VisibleTimeRange</code></p> <p>Component: The range of values that will be included in a space view query.</p>"},{"location":"common/components/","title":"Components","text":""},{"location":"common/components/#rerun.components","title":"<code>rerun.components</code>","text":""},{"location":"common/components/#rerun.components.AnnotationContext","title":"<code>class AnnotationContext</code>","text":"<p>         Bases: <code>AnnotationContextExt</code></p> <p>Component: The <code>AnnotationContext</code> provides additional information on how to display entities.</p> <p>Entities can use <code>ClassId</code>s and <code>KeypointId</code>s to provide annotations, and the labels and colors will be looked up in the appropriate <code>AnnotationContext</code>. We use the first annotation context we find in the path-hierarchy when searching up through the ancestors of a given entity path.</p>"},{"location":"common/components/#rerun.components.AnnotationContext.__init__","title":"<code>def __init__(class_map)</code>","text":"<p>Create a new instance of the AnnotationContext component.</p> PARAMETER  DESCRIPTION <code>class_map</code> <p>List of class descriptions, mapping class indices to class names, colors etc.</p> <p> TYPE: <code>AnnotationContextLike</code> </p>"},{"location":"common/components/#rerun.components.Blob","title":"<code>class Blob</code>","text":"<p>         Bases: <code>BlobExt</code></p> <p>Component: A binary blob of data.</p>"},{"location":"common/components/#rerun.components.Blob.__init__","title":"<code>def __init__(data)</code>","text":"<p>Create a new instance of the Blob component.</p>"},{"location":"common/components/#rerun.components.ClassId","title":"<code>class ClassId</code>","text":"<p>         Bases: <code>ClassId</code></p> <p>Component: A 16-bit ID representing a type of semantic class.</p>"},{"location":"common/components/#rerun.components.ClearIsRecursive","title":"<code>class ClearIsRecursive</code>","text":"<p>         Bases: <code>ClearIsRecursiveExt</code></p> <p>Component: Configures how a clear operation should behave - recursive or not.</p>"},{"location":"common/components/#rerun.components.ClearIsRecursive.__init__","title":"<code>def __init__(recursive)</code>","text":"<p>Create a new instance of the ClearIsRecursive component.</p> PARAMETER  DESCRIPTION <code>recursive</code> <p>If true, also clears all recursive children entities.</p> <p> TYPE: <code>ClearIsRecursiveLike</code> </p>"},{"location":"common/components/#rerun.components.Color","title":"<code>class Color</code>","text":"<p>         Bases: <code>Rgba32</code></p> <p>Component: An RGBA color with unmultiplied/separate alpha, in sRGB gamma space with linear alpha.</p> <p>The color is stored as a 32-bit integer, where the most significant byte is <code>R</code> and the least significant byte is <code>A</code>.</p> <p>Float colors are assumed to be in 0-1 gamma sRGB space. All other colors are assumed to be in 0-255 gamma sRGB space. If there is an alpha, we assume it is in linear space, and separate (NOT pre-multiplied).</p>"},{"location":"common/components/#rerun.components.DepthMeter","title":"<code>class DepthMeter</code>","text":"<p>         Bases: <code>DepthMeterExt</code></p> <p>Component: A component indicating how long a meter is, expressed in native units.</p>"},{"location":"common/components/#rerun.components.DepthMeter.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the DepthMeter component.</p>"},{"location":"common/components/#rerun.components.DisconnectedSpace","title":"<code>class DisconnectedSpace</code>","text":"<p>         Bases: <code>DisconnectedSpaceExt</code></p> <p>Component: Spatially disconnect this entity from its parent.</p> <p>Specifies that the entity path at which this is logged is spatially disconnected from its parent, making it impossible to transform the entity path into its parent's space and vice versa. It only applies to space views that work with spatial transformations, i.e. 2D &amp; 3D space views. This is useful for specifying that a subgraph is independent of the rest of the scene.</p>"},{"location":"common/components/#rerun.components.DisconnectedSpace.__init__","title":"<code>def __init__(is_disconnected=True)</code>","text":"<p>Disconnect an entity from its parent.</p> PARAMETER  DESCRIPTION <code>is_disconnected</code> <p>Whether or not the entity should be disconnected from the rest of the scene. Set to <code>True</code> to disconnect the entity from its parent. Set to <code>False</code> to disable the effects of this component, (re-)connecting the entity to its parent again.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"common/components/#rerun.components.DrawOrder","title":"<code>class DrawOrder</code>","text":"<p>         Bases: <code>DrawOrderExt</code></p> <p>Component: Draw order used for the display order of 2D elements.</p> <p>Higher values are drawn on top of lower values. An entity can have only a single draw order component. Within an entity draw order is governed by the order of the components.</p> <p>Draw order for entities with the same draw order is generally undefined.</p>"},{"location":"common/components/#rerun.components.DrawOrder.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the DrawOrder component.</p>"},{"location":"common/components/#rerun.components.HalfSizes2D","title":"<code>class HalfSizes2D</code>","text":"<p>         Bases: <code>Vec2D</code></p> <p>Component: Half-sizes (extents) of a 2D box along its local axis, starting at its local origin/center.</p> <p>The box extends both in negative and positive direction along each axis. Negative sizes indicate that the box is flipped along the respective axis, but this has no effect on how it is displayed.</p>"},{"location":"common/components/#rerun.components.HalfSizes3D","title":"<code>class HalfSizes3D</code>","text":"<p>         Bases: <code>Vec3D</code></p> <p>Component: Half-sizes (extents) of a 3D box along its local axis, starting at its local origin/center.</p> <p>The box extends both in negative and positive direction along each axis. Negative sizes indicate that the box is flipped along the respective axis, but this has no effect on how it is displayed.</p>"},{"location":"common/components/#rerun.components.InstanceKey","title":"<code>class InstanceKey</code>","text":"<p>         Bases: <code>InstanceKeyExt</code></p> <p>Component: A unique numeric identifier for each individual instance within a batch.</p> <p>Instance keys are automatically assigned by the <code>rerun</code> library and should not be set manually.</p> <p>The instance key is just the index of the instance within the batch, i.e. the first point in a point cloud has <code>InstanceKey = 0</code>, the second <code>InstanceKey = 1</code>, and so on.</p> <p>We plan to remove the <code>InstanceKey</code> component in the near future.</p>"},{"location":"common/components/#rerun.components.InstanceKey.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the InstanceKey component.</p>"},{"location":"common/components/#rerun.components.KeypointId","title":"<code>class KeypointId</code>","text":"<p>         Bases: <code>KeypointId</code></p> <p>Component: A 16-bit ID representing a type of semantic keypoint within a class.</p> <p><code>KeypointId</code>s are only meaningful within the context of a [<code>rerun.datatypes.ClassDescription</code>].</p> <p>Used to look up an [<code>rerun.datatypes.AnnotationInfo</code>] for a Keypoint within the [<code>rerun.components.AnnotationContext</code>].</p>"},{"location":"common/components/#rerun.components.LineStrip2D","title":"<code>class LineStrip2D</code>","text":"<p>         Bases: <code>LineStrip2DExt</code></p> <p>Component: A line strip in 2D space.</p> <p>A line strip is a list of points connected by line segments. It can be used to draw approximations of smooth curves.</p> <p>The points will be connected in order, like so: <pre><code>       2------3     5\n      /        \\   /\n0----1          \\ /\n                 4\n</code></pre></p>"},{"location":"common/components/#rerun.components.LineStrip2D.__init__","title":"<code>def __init__(points)</code>","text":"<p>Create a new instance of the LineStrip2D component.</p>"},{"location":"common/components/#rerun.components.LineStrip3D","title":"<code>class LineStrip3D</code>","text":"<p>         Bases: <code>LineStrip3DExt</code></p> <p>Component: A line strip in 3D space.</p> <p>A line strip is a list of points connected by line segments. It can be used to draw approximations of smooth curves.</p> <p>The points will be connected in order, like so: <pre><code>       2------3     5\n      /        \\   /\n0----1          \\ /\n                 4\n</code></pre></p>"},{"location":"common/components/#rerun.components.LineStrip3D.__init__","title":"<code>def __init__(points)</code>","text":"<p>Create a new instance of the LineStrip3D component.</p>"},{"location":"common/components/#rerun.components.MarkerShape","title":"<code>class MarkerShape</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Shape of a marker.</p>"},{"location":"common/components/#rerun.components.MarkerSize","title":"<code>class MarkerSize</code>","text":"<p>         Bases: <code>MarkerSizeExt</code></p> <p>Component: Size of a marker in UI points.</p>"},{"location":"common/components/#rerun.components.MarkerSize.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the MarkerSize component.</p>"},{"location":"common/components/#rerun.components.Material","title":"<code>class Material</code>","text":"<p>         Bases: <code>Material</code></p> <p>Component: Material properties of a mesh.</p>"},{"location":"common/components/#rerun.components.MediaType","title":"<code>class MediaType</code>","text":"<p>         Bases: <code>MediaTypeExt</code>, <code>Utf8</code></p> <p>Component: A standardized media type (RFC2046, formerly known as MIME types), encoded as a utf8 string.</p> <p>The complete reference of officially registered media types is maintained by the IANA and can be consulted at https://www.iana.org/assignments/media-types/media-types.xhtml.</p>"},{"location":"common/components/#rerun.components.MeshProperties","title":"<code>class MeshProperties</code>","text":"<p>         Bases: <code>MeshProperties</code></p> <p>Component: Optional triangle indices for a mesh.</p>"},{"location":"common/components/#rerun.components.Name","title":"<code>class Name</code>","text":"<p>         Bases: <code>Utf8</code></p> <p>Component: A display name, typically for an entity or a item like a plot series.</p>"},{"location":"common/components/#rerun.components.OutOfTreeTransform3D","title":"<code>class OutOfTreeTransform3D</code>","text":"<p>         Bases: <code>Transform3D</code></p> <p>Component: An out-of-tree affine transform between two 3D spaces, represented in a given direction.</p> <p>\"Out-of-tree\" means that the transform only affects its own entity: children don't inherit from it.</p>"},{"location":"common/components/#rerun.components.PinholeProjection","title":"<code>class PinholeProjection</code>","text":"<p>         Bases: <code>Mat3x3</code></p> <p>Component: Camera projection, from image coordinates to view coordinates.</p> <p>Child from parent. Image coordinates from camera view coordinates.</p> Example: <pre><code>1496.1     0.0  980.5\n   0.0  1496.1  744.5\n   0.0     0.0    1.0\n</code></pre>"},{"location":"common/components/#rerun.components.Position2D","title":"<code>class Position2D</code>","text":"<p>         Bases: <code>Vec2D</code></p> <p>Component: A position in 2D space.</p>"},{"location":"common/components/#rerun.components.Position3D","title":"<code>class Position3D</code>","text":"<p>         Bases: <code>Vec3D</code></p> <p>Component: A position in 3D space.</p>"},{"location":"common/components/#rerun.components.Radius","title":"<code>class Radius</code>","text":"<p>         Bases: <code>RadiusExt</code></p> <p>Component: A Radius component.</p>"},{"location":"common/components/#rerun.components.Radius.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Radius component.</p>"},{"location":"common/components/#rerun.components.Range1D","title":"<code>class Range1D</code>","text":"<p>Component: A 1D range, specifying a lower and upper bound.</p>"},{"location":"common/components/#rerun.components.Range1D.__init__","title":"<code>def __init__(range)</code>","text":"<p>Create a new instance of the Range1D component.</p>"},{"location":"common/components/#rerun.components.Resolution","title":"<code>class Resolution</code>","text":"<p>         Bases: <code>Vec2D</code></p> <p>Component: Pixel resolution width &amp; height, e.g. of a camera sensor.</p> <p>Typically in integer units, but for some use cases floating point may be used.</p>"},{"location":"common/components/#rerun.components.Rotation3D","title":"<code>class Rotation3D</code>","text":"<p>         Bases: <code>Rotation3D</code></p> <p>Component: A 3D rotation, represented either by a quaternion or a rotation around axis.</p>"},{"location":"common/components/#rerun.components.Scalar","title":"<code>class Scalar</code>","text":"<p>         Bases: <code>ScalarExt</code></p> <p>Component: A double-precision scalar.</p> <p>Used for time series plots.</p>"},{"location":"common/components/#rerun.components.Scalar.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Scalar component.</p>"},{"location":"common/components/#rerun.components.ScalarScattering","title":"<code>class ScalarScattering</code>","text":"<p>         Bases: <code>ScalarScatteringExt</code></p> <p>Component: If true, a scalar will be shown as individual point in a scatter plot.</p>"},{"location":"common/components/#rerun.components.ScalarScattering.__init__","title":"<code>def __init__(scattered)</code>","text":"<p>Create a new instance of the ScalarScattering component.</p>"},{"location":"common/components/#rerun.components.StrokeWidth","title":"<code>class StrokeWidth</code>","text":"<p>         Bases: <code>StrokeWidthExt</code></p> <p>Component: The width of a stroke specified in UI points.</p>"},{"location":"common/components/#rerun.components.StrokeWidth.__init__","title":"<code>def __init__(width)</code>","text":"<p>Create a new instance of the StrokeWidth component.</p>"},{"location":"common/components/#rerun.components.TensorData","title":"<code>class TensorData</code>","text":"<p>         Bases: <code>TensorData</code></p> <p>Component: A multi-dimensional <code>Tensor</code> of data.</p> <p>The number of dimensions and their respective lengths is specified by the <code>shape</code> field. The dimensions are ordered from outermost to innermost. For example, in the common case of a 2D RGB Image, the shape would be <code>[height, width, channel]</code>.</p> <p>These dimensions are combined with an index to look up values from the <code>buffer</code> field, which stores a contiguous array of typed values.</p> <p>Note that the buffer may be encoded in a compressed format such as <code>jpeg</code> or in a format with downsampled chroma, such as NV12 or YUY2. For file formats, the shape is used as a hint, for chroma downsampled format the shape has to be the shape of the decoded image.</p>"},{"location":"common/components/#rerun.components.Texcoord2D","title":"<code>class Texcoord2D</code>","text":"<p>         Bases: <code>Vec2D</code></p> <p>Component: A 2D texture UV coordinate.</p> <p>Texture coordinates specify a position on a 2D texture. A range from 0-1 covers the entire texture in the respective dimension. Unless configured otherwise, the texture repeats outside of this range. Rerun uses top-left as the origin for UV coordinates.</p> <p>0     U     1 0 + --------- \u2192   |           . V |           .   |           . 1 \u2193 . . . . . .</p> <p>This is the same convention as in Vulkan/Metal/DX12/WebGPU, but (!) unlike OpenGL, which places the origin at the bottom-left.</p>"},{"location":"common/components/#rerun.components.Text","title":"<code>class Text</code>","text":"<p>         Bases: <code>Utf8</code></p> <p>Component: A string of text, e.g. for labels and text documents.</p>"},{"location":"common/components/#rerun.components.TextLogLevel","title":"<code>class TextLogLevel</code>","text":"<p>         Bases: <code>TextLogLevelExt</code>, <code>Utf8</code></p> <p>Component: The severity level of a text log message.</p> <p>Recommended to be one of: * <code>\"CRITICAL\"</code> * <code>\"ERROR\"</code> * <code>\"WARN\"</code> * <code>\"INFO\"</code> * <code>\"DEBUG\"</code> * <code>\"TRACE\"</code></p>"},{"location":"common/components/#rerun.components.Transform3D","title":"<code>class Transform3D</code>","text":"<p>         Bases: <code>Transform3D</code></p> <p>Component: An affine transform between two 3D spaces, represented in a given direction.</p>"},{"location":"common/components/#rerun.components.Vector2D","title":"<code>class Vector2D</code>","text":"<p>         Bases: <code>Vec2D</code></p> <p>Component: A vector in 2D space.</p>"},{"location":"common/components/#rerun.components.Vector3D","title":"<code>class Vector3D</code>","text":"<p>         Bases: <code>Vec3D</code></p> <p>Component: A vector in 3D space.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates","title":"<code>class ViewCoordinates</code>","text":"<p>         Bases: <code>ViewCoordinatesExt</code></p> <p>Component: How we interpret the coordinate system of an entity/space.</p> <p>For instance: What is \"up\"? What does the Z axis mean? Is this right-handed or left-handed?</p> <p>The three coordinates are always ordered as [x, y, z].</p> <p>For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points down, and the Z axis points forward.</p> <p>The following constants are used to represent the different directions:  * Up = 1  * Down = 2  * Right = 3  * Left = 4  * Forward = 5  * Back = 6</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.__init__","title":"<code>def __init__(coordinates)</code>","text":"<p>Create a new instance of the ViewCoordinates component.</p> PARAMETER  DESCRIPTION <code>coordinates</code> <p>The directions of the [x, y, z] axes.</p> <p> TYPE: <code>ViewCoordinatesLike</code> </p>"},{"location":"common/components/#rerun.components.VisualizerOverrides","title":"<code>class VisualizerOverrides</code>","text":"<p>Component: The name of a visualizer.</p>"},{"location":"common/components/#rerun.components.VisualizerOverrides.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the VisualizerOverrides component.</p>"},{"location":"common/custom_data/","title":"Custom Data","text":""},{"location":"common/custom_data/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/custom_data/#rerun.AnyValues","title":"<code>class AnyValues</code>","text":"<p>         Bases: <code>AsComponents</code></p> <p>Helper to log arbitrary values as a bundle of components.</p> Example <pre><code>rr.log(\n    \"any_values\", rr.AnyValues(\n        confidence=[1.2, 3.4, 5.6],\n        description=\"Bla bla bla\u2026\",\n    ),\n)\n</code></pre>"},{"location":"common/custom_data/#rerun.AnyValues.__init__","title":"<code>def __init__(drop_untyped_nones=True, **kwargs)</code>","text":"<p>Construct a new AnyValues bundle.</p> <p>Each kwarg will be logged as a separate component using the provided data.  - The key will be used as the name of the component  - The value must be able to be converted to an array of arrow types. In    general, if you can pass it to pyarrow.array you can log it as a    extension component.</p> <p>All values must either have the same length, or be singular in which case they will be treated as a splat.</p> <p>Note: rerun requires that a given component only take on a single type. The first type logged will be the type that is used for all future logs of that component. The API will make a best effort to do type conversion if supported by numpy and arrow. Any components that can't be converted will result in a warning (or an exception in strict mode).</p> <p><code>None</code> values provide a particular challenge as they have no type information until after the component has been logged with a particular type. By default, these values are dropped. This should generally be fine as logging <code>None</code> to clear the value before it has been logged is meaningless unless you are logging out-of-order data. In such cases, consider introducing your own typed component via rerun.ComponentBatchLike.</p> <p>You can change this behavior by setting <code>drop_untyped_nones</code> to <code>False</code>, but be aware that this will result in potential warnings (or exceptions in strict mode).</p> <p>If you are want to inspect how your component will be converted to the underlying arrow code, the following snippet is what is happening internally: <pre><code>np_value = np.atleast_1d(np.array(value, copy=False))\npa_value = pa.array(value)\n</code></pre></p> PARAMETER  DESCRIPTION <code>drop_untyped_nones</code> <p>If True, any components that are None will be dropped unless they have been previously logged with a type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>kwargs</code> <p>The components to be logged.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/datatypes/","title":"Datatypes","text":""},{"location":"common/datatypes/#rerun.datatypes","title":"<code>rerun.datatypes</code>","text":""},{"location":"common/datatypes/#rerun.datatypes.Angle","title":"<code>class Angle</code>","text":"<p>         Bases: <code>AngleExt</code></p> <p>Datatype: Angle in either radians or degrees.</p>"},{"location":"common/datatypes/#rerun.datatypes.Angle.inner","title":"<code>inner: float = field(converter=float)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>Radians (float):     3D rotation angle in radians. Only one of <code>degrees</code> or <code>radians</code> should be set.</p> </li> <li> <p>Degrees (float):     3D rotation angle in degrees. Only one of <code>degrees</code> or <code>radians</code> should be set.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.Angle.kind","title":"<code>kind: Literal['radians', 'degrees'] = field(default='radians')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Possible values:</p> <ul> <li> <p>\"Radians\":     3D rotation angle in radians. Only one of <code>degrees</code> or <code>radians</code> should be set.</p> </li> <li> <p>\"Degrees\":     3D rotation angle in degrees. Only one of <code>degrees</code> or <code>radians</code> should be set.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.Angle.__init__","title":"<code>def __init__(rad=None, deg=None)</code>","text":"<p>Create a new instance of the Angle datatype.</p> PARAMETER  DESCRIPTION <code>rad</code> <p>Angle in radians, specify either <code>rad</code> or <code>deg</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>deg</code> <p>Angle in degrees, specify either <code>rad</code> or <code>deg</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.AnnotationInfo","title":"<code>class AnnotationInfo</code>","text":"<p>         Bases: <code>AnnotationInfoExt</code></p> <p>Datatype: Annotation info annotating a class id or key-point id.</p> <p>Color and label will be used to annotate entities/keypoints which reference the id. The id refers either to a class or key-point id</p>"},{"location":"common/datatypes/#rerun.datatypes.AnnotationInfo.__init__","title":"<code>def __init__(id, label=None, color=None)</code>","text":"<p>Create a new instance of the AnnotationInfo datatype.</p> PARAMETER  DESCRIPTION <code>id</code> <p><code>ClassId</code> or <code>KeypointId</code> to which this annotation info belongs.</p> <p> TYPE: <code>int</code> </p> <code>label</code> <p>The label that will be shown in the UI.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>The color that will be applied to the annotated entity.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Bool","title":"<code>class Bool</code>","text":"<p>         Bases: <code>BoolExt</code></p> <p>Datatype: A single boolean.</p>"},{"location":"common/datatypes/#rerun.datatypes.Bool.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescription","title":"<code>class ClassDescription</code>","text":"<p>         Bases: <code>ClassDescriptionExt</code></p> <p>Datatype: The description of a semantic Class.</p> <p>If an entity is annotated with a corresponding <code>ClassId</code>, rerun will use the attached <code>AnnotationInfo</code> to derive labels and colors.</p> <p>Keypoints within an annotation class can similarly be annotated with a <code>KeypointId</code> in which case we should defer to the label and color for the <code>AnnotationInfo</code> specifically associated with the Keypoint.</p> <p>Keypoints within the class can also be decorated with skeletal edges. Keypoint-connections are pairs of <code>KeypointId</code>s. If an edge is defined, and both keypoints exist within the instance of the class, then the keypoints should be connected with an edge. The edge should be labeled and colored as described by the class's <code>AnnotationInfo</code>.</p> <p>Note that a <code>ClassDescription</code> can be directly logged using <code>rerun.log</code>. This is equivalent to logging a <code>rerun.AnnotationContext</code> containing a single <code>ClassDescription</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescription.__init__","title":"<code>def __init__(*, info, keypoint_annotations=[], keypoint_connections=[])</code>","text":"<p>Create a new instance of the ClassDescription datatype.</p> PARAMETER  DESCRIPTION <code>info</code> <p>The <code>AnnotationInfo</code> for the class.</p> <p> TYPE: <code>AnnotationInfoLike</code> </p> <code>keypoint_annotations</code> <p>The <code>AnnotationInfo</code> for all the keypoints.</p> <p> TYPE: <code>Sequence[AnnotationInfoLike] | None</code> DEFAULT: <code>[]</code> </p> <code>keypoint_connections</code> <p>The connections between keypoints.</p> <p> TYPE: <code>Sequence[KeypointPairLike] | None</code> DEFAULT: <code>[]</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescriptionMapElem","title":"<code>class ClassDescriptionMapElem</code>","text":"<p>         Bases: <code>ClassDescriptionMapElemExt</code></p> <p>Datatype: A helper type for mapping class IDs to class descriptions.</p> <p>This is internal to the <code>AnnotationContext</code> structure.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescriptionMapElem.__init__","title":"<code>def __init__(class_id, class_description)</code>","text":"<p>Create a new instance of the ClassDescriptionMapElem datatype.</p> PARAMETER  DESCRIPTION <code>class_id</code> <p>The key: the class ID.</p> <p> TYPE: <code>ClassIdLike</code> </p> <code>class_description</code> <p>The value: class name, color, etc.</p> <p> TYPE: <code>ClassDescriptionLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.ClassId","title":"<code>class ClassId</code>","text":"<p>         Bases: <code>ClassIdExt</code></p> <p>Datatype: A 16-bit ID representing a type of semantic class.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassId.__init__","title":"<code>def __init__(id)</code>","text":"<p>Create a new instance of the ClassId datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.EntityPath","title":"<code>class EntityPath</code>","text":"<p>         Bases: <code>EntityPathExt</code></p> <p>Datatype: A path to an entity in the <code>DataStore</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.EntityPath.__init__","title":"<code>def __init__(path)</code>","text":"<p>Create a new instance of the EntityPath datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Float32","title":"<code>class Float32</code>","text":"<p>Datatype: A single-precision 32-bit IEEE 754 floating point number.</p>"},{"location":"common/datatypes/#rerun.datatypes.Float32.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointId","title":"<code>class KeypointId</code>","text":"<p>         Bases: <code>KeypointIdExt</code></p> <p>Datatype: A 16-bit ID representing a type of semantic keypoint within a class.</p> <p><code>KeypointId</code>s are only meaningful within the context of a [<code>rerun.datatypes.ClassDescription</code>].</p> <p>Used to look up an [<code>rerun.datatypes.AnnotationInfo</code>] for a Keypoint within the [<code>rerun.components.AnnotationContext</code>].</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointId.__init__","title":"<code>def __init__(id)</code>","text":"<p>Create a new instance of the KeypointId datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointPair","title":"<code>class KeypointPair</code>","text":"<p>         Bases: <code>KeypointPairExt</code></p> <p>Datatype: A connection between two <code>Keypoints</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointPair.__init__","title":"<code>def __init__(keypoint0, keypoint1)</code>","text":"<p>Create a new instance of the KeypointPair datatype.</p> PARAMETER  DESCRIPTION <code>keypoint0</code> <p>The first point of the pair.</p> <p> TYPE: <code>KeypointIdLike</code> </p> <code>keypoint1</code> <p>The second point of the pair.</p> <p> TYPE: <code>KeypointIdLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Mat3x3","title":"<code>class Mat3x3</code>","text":"<p>         Bases: <code>Mat3x3Ext</code></p> <p>Datatype: A 3x3 Matrix.</p> <p>Matrices in Rerun are stored as flat list of coefficients in column-major order: <pre><code>            column 0       column 1       column 2\n       -------------------------------------------------\nrow 0 | flat_columns[0] flat_columns[3] flat_columns[6]\nrow 1 | flat_columns[1] flat_columns[4] flat_columns[7]\nrow 2 | flat_columns[2] flat_columns[5] flat_columns[8]\n</code></pre></p> <p>However, construction is done from a list of rows, which follows NumPy's convention: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat3x3([1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns, np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32)\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat3x3([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32),\n)\n</code></pre> If you want to construct a matrix from a list of columns instead, use the named <code>columns</code> parameter: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat3x3(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat3x3(columns=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\n</code></pre></p>"},{"location":"common/datatypes/#rerun.datatypes.Mat3x3.__init__","title":"<code>def __init__(rows=None, *, columns=None)</code>","text":""},{"location":"common/datatypes/#rerun.datatypes.Mat4x4","title":"<code>class Mat4x4</code>","text":"<p>         Bases: <code>Mat4x4Ext</code></p> <p>Datatype: A 4x4 Matrix.</p> <p>Matrices in Rerun are stored as flat list of coefficients in column-major order: <pre><code>           column 0         column 1         column 2         column 3\n       --------------------------------------------------------------------\nrow 0 | flat_columns[0]  flat_columns[4]  flat_columns[8]  flat_columns[12]\nrow 1 | flat_columns[1]  flat_columns[5]  flat_columns[9]  flat_columns[13]\nrow 2 | flat_columns[2]  flat_columns[6]  flat_columns[10] flat_columns[14]\nrow 3 | flat_columns[3]  flat_columns[7]  flat_columns[11] flat_columns[15]\n</code></pre></p> <p>However, construction is done from a list of rows, which follows NumPy's convention: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat4x4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).flat_columns,\n    np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]).flat_columns,\n    np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16], dtype=np.float32),\n)\n</code></pre> If you want to construct a matrix from a list of columns instead, use the named <code>columns</code> parameter: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat4x4(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat4x4(columns=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype=np.float32),\n)\n</code></pre></p>"},{"location":"common/datatypes/#rerun.datatypes.Mat4x4.__init__","title":"<code>def __init__(rows=None, *, columns=None)</code>","text":""},{"location":"common/datatypes/#rerun.datatypes.Material","title":"<code>class Material</code>","text":"<p>         Bases: <code>MaterialExt</code></p> <p>Datatype: Material properties of a mesh.</p>"},{"location":"common/datatypes/#rerun.datatypes.Material.__init__","title":"<code>def __init__(albedo_factor=None)</code>","text":"<p>Create a new instance of the Material datatype.</p> PARAMETER  DESCRIPTION <code>albedo_factor</code> <p>Optional color multiplier.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.MeshProperties","title":"<code>class MeshProperties</code>","text":"<p>         Bases: <code>MeshPropertiesExt</code></p> <p>Datatype: Optional triangle indices for a mesh.</p>"},{"location":"common/datatypes/#rerun.datatypes.MeshProperties.__init__","title":"<code>def __init__(indices=None)</code>","text":"<p>Create a new instance of the MeshProperties datatype.</p> PARAMETER  DESCRIPTION <code>indices</code> <p>A flattened array of vertex indices that describe the mesh's triangles.</p> <p>Its length must be divisible by 3.</p> <p> TYPE: <code>ArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Quaternion","title":"<code>class Quaternion</code>","text":"<p>         Bases: <code>QuaternionExt</code></p> <p>Datatype: A Quaternion represented by 4 real numbers.</p> <p>Note: although the x,y,z,w components of the quaternion will be passed through to the datastore as provided, when used in the viewer Quaternions will always be normalized.</p>"},{"location":"common/datatypes/#rerun.datatypes.Rgba32","title":"<code>class Rgba32</code>","text":"<p>         Bases: <code>Rgba32Ext</code></p> <p>Datatype: An RGBA color with unmultiplied/separate alpha, in sRGB gamma space with linear alpha.</p> <p>The color is stored as a 32-bit integer, where the most significant byte is <code>R</code> and the least significant byte is <code>A</code>.</p> <p>Float colors are assumed to be in 0-1 gamma sRGB space. All other colors are assumed to be in 0-255 gamma sRGB space. If there is an alpha, we assume it is in linear space, and separate (NOT pre-multiplied).</p>"},{"location":"common/datatypes/#rerun.datatypes.Rgba32.__init__","title":"<code>def __init__(rgba)</code>","text":"<p>Create a new instance of the Rgba32 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Rotation3D","title":"<code>class Rotation3D</code>","text":"<p>         Bases: <code>Rotation3DExt</code></p> <p>Datatype: A 3D rotation.</p>"},{"location":"common/datatypes/#rerun.datatypes.Rotation3D.inner","title":"<code>inner: Union[datatypes.Quaternion, datatypes.RotationAxisAngle] = field(converter=Rotation3DExt.inner__field_converter_override)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>Quaternion (datatypes.Quaternion):     Rotation defined by a quaternion.</p> </li> <li> <p>AxisAngle (datatypes.RotationAxisAngle):     Rotation defined with an axis and an angle.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.RotationAxisAngle","title":"<code>class RotationAxisAngle</code>","text":"<p>         Bases: <code>RotationAxisAngleExt</code></p> <p>Datatype: 3D rotation represented by a rotation around a given axis.</p>"},{"location":"common/datatypes/#rerun.datatypes.RotationAxisAngle.__init__","title":"<code>def __init__(axis, angle=None, *, radians=None, degrees=None)</code>","text":"<p>Create a new instance of the RotationAxisAngle datatype.</p> PARAMETER  DESCRIPTION <code>axis</code> <p>Axis to rotate around.</p> <p>This is not required to be normalized.  If normalization fails (typically because the vector is length zero), the rotation is silently  ignored.</p> <p> TYPE: <code>Vec3DLike</code> </p> <code>angle</code> <p>How much to rotate around the axis.</p> <p> TYPE: <code>AngleLike | None</code> DEFAULT: <code>None</code> </p> <code>radians</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>degrees</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>degrees</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>radians</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Scale3D","title":"<code>class Scale3D</code>","text":"<p>         Bases: <code>Scale3DExt</code></p> <p>Datatype: 3D scaling factor, part of a transform representation.</p> Example <pre><code># uniform scaling\nscale = rr.datatypes.Scale3D(3.)\n\n# non-uniform scaling\nscale = rr.datatypes.Scale3D([1, 1, -1])\nscale = rr.datatypes.Scale3D(rr.datatypes.Vec3D([1, 1, -1]))\n</code></pre>"},{"location":"common/datatypes/#rerun.datatypes.Scale3D.inner","title":"<code>inner: Union[datatypes.Vec3D, float] = field(converter=Scale3DExt.inner__field_converter_override)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>ThreeD (datatypes.Vec3D):     Individual scaling factors for each axis, distorting the original object.</p> </li> <li> <p>Uniform (float):     Uniform scaling factor along all axis.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TensorBuffer","title":"<code>class TensorBuffer</code>","text":"<p>         Bases: <code>TensorBufferExt</code></p> <p>Datatype: The underlying storage for a <code>Tensor</code>.</p> <p>Tensor elements are stored in a contiguous buffer of a single type.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorBuffer.inner","title":"<code>inner: Union[npt.NDArray[np.float16], npt.NDArray[np.float32], npt.NDArray[np.float64], npt.NDArray[np.int16], npt.NDArray[np.int32], npt.NDArray[np.int64], npt.NDArray[np.int8], npt.NDArray[np.uint16], npt.NDArray[np.uint32], npt.NDArray[np.uint64], npt.NDArray[np.uint8]] = field(converter=TensorBufferExt.inner__field_converter_override)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>U8 (npt.NDArray[np.uint8]):     8bit unsigned integer.</p> </li> <li> <p>U16 (npt.NDArray[np.uint16]):     16bit unsigned integer.</p> </li> <li> <p>U32 (npt.NDArray[np.uint32]):     32bit unsigned integer.</p> </li> <li> <p>U64 (npt.NDArray[np.uint64]):     64bit unsigned integer.</p> </li> <li> <p>I8 (npt.NDArray[np.int8]):     8bit signed integer.</p> </li> <li> <p>I16 (npt.NDArray[np.int16]):     16bit signed integer.</p> </li> <li> <p>I32 (npt.NDArray[np.int32]):     32bit signed integer.</p> </li> <li> <p>I64 (npt.NDArray[np.int64]):     64bit signed integer.</p> </li> <li> <p>F16 (npt.NDArray[np.float16]):     16bit IEEE-754 floating point, also known as <code>half</code>.</p> </li> <li> <p>F32 (npt.NDArray[np.float32]):     32bit IEEE-754 floating point, also known as <code>float</code> or <code>single</code>.</p> </li> <li> <p>F64 (npt.NDArray[np.float64]):     64bit IEEE-754 floating point, also known as <code>double</code>.</p> </li> <li> <p>JPEG (npt.NDArray[np.uint8]):     Raw bytes of a JPEG file.</p> </li> <li> <p>NV12 (npt.NDArray[np.uint8]):     NV12 is a YUV 4:2:0 chroma downsamples format with 8 bits per channel.</p> <p>First comes entire image in Y, followed by interleaved lines ordered as U0, V0, U1, V1, etc.</p> </li> <li> <p>YUY2 (npt.NDArray[np.uint8]):     YUY2, also known as YUYV is a YUV 4:2:2 chroma downsampled format with 8 bits per channel.</p> <p>The order of the channels is Y0, U0, Y1, V0.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TensorBuffer.kind","title":"<code>kind: Literal['u8', 'u16', 'u32', 'u64', 'i8', 'i16', 'i32', 'i64', 'f16', 'f32', 'f64', 'jpeg', 'nv12', 'yuy2'] = field(default='u8')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Possible values:</p> <ul> <li> <p>\"U8\":     8bit unsigned integer.</p> </li> <li> <p>\"U16\":     16bit unsigned integer.</p> </li> <li> <p>\"U32\":     32bit unsigned integer.</p> </li> <li> <p>\"U64\":     64bit unsigned integer.</p> </li> <li> <p>\"I8\":     8bit signed integer.</p> </li> <li> <p>\"I16\":     16bit signed integer.</p> </li> <li> <p>\"I32\":     32bit signed integer.</p> </li> <li> <p>\"I64\":     64bit signed integer.</p> </li> <li> <p>\"F16\":     16bit IEEE-754 floating point, also known as <code>half</code>.</p> </li> <li> <p>\"F32\":     32bit IEEE-754 floating point, also known as <code>float</code> or <code>single</code>.</p> </li> <li> <p>\"F64\":     64bit IEEE-754 floating point, also known as <code>double</code>.</p> </li> <li> <p>\"JPEG\":     Raw bytes of a JPEG file.</p> </li> <li> <p>\"NV12\":     NV12 is a YUV 4:2:0 chroma downsamples format with 8 bits per channel.</p> <p>First comes entire image in Y, followed by interleaved lines ordered as U0, V0, U1, V1, etc.</p> </li> <li> <p>\"YUY2\":     YUY2, also known as YUYV is a YUV 4:2:2 chroma downsampled format with 8 bits per channel.</p> <p>The order of the channels is Y0, U0, Y1, V0.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TensorData","title":"<code>class TensorData</code>","text":"<p>         Bases: <code>TensorDataExt</code></p> <p>Datatype: A multi-dimensional <code>Tensor</code> of data.</p> <p>The number of dimensions and their respective lengths is specified by the <code>shape</code> field. The dimensions are ordered from outermost to innermost. For example, in the common case of a 2D RGB Image, the shape would be <code>[height, width, channel]</code>.</p> <p>These dimensions are combined with an index to look up values from the <code>buffer</code> field, which stores a contiguous array of typed values.</p> <p>Note that the buffer may be encoded in a compressed format such as <code>jpeg</code> or in a format with downsampled chroma, such as NV12 or YUY2. For file formats, the shape is used as a hint, for chroma downsampled format the shape has to be the shape of the decoded image.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorData.__init__","title":"<code>def __init__(*, shape=None, buffer=None, array=None, dim_names=None)</code>","text":"<p>Construct a <code>TensorData</code> object.</p> <p>The <code>TensorData</code> object is internally represented by three fields: <code>shape</code> and <code>buffer</code>.</p> <p>This constructor provides additional arguments 'array', and 'dim_names'. When passing in a multi-dimensional array such as a <code>np.ndarray</code>, the <code>shape</code> and <code>buffer</code> fields will be populated automagically.</p> PARAMETER  DESCRIPTION <code>self</code> <p>The TensorData object to construct.</p> <p> TYPE: <code>Any</code> </p> <code>shape</code> <p>The shape of the tensor. If None, and an array is provided, the shape will be inferred from the shape of the array.</p> <p> TYPE: <code>Sequence[TensorDimensionLike] | None</code> DEFAULT: <code>None</code> </p> <code>buffer</code> <p>The buffer of the tensor. If None, and an array is provided, the buffer will be generated from the array.</p> <p> TYPE: <code>TensorBufferLike | None</code> DEFAULT: <code>None</code> </p> <code>array</code> <p>A numpy array (or The array of the tensor. If None, the array will be inferred from the buffer.</p> <p> TYPE: <code>TensorLike | None</code> DEFAULT: <code>None</code> </p> <code>dim_names</code> <p>The names of the tensor dimensions when generating the shape from an array.</p> <p> TYPE: <code>Sequence[str | None] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimension","title":"<code>class TensorDimension</code>","text":"<p>Datatype: A single dimension within a multi-dimensional tensor.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimension.__init__","title":"<code>def __init__(size, name=None)</code>","text":"<p>Create a new instance of the TensorDimension datatype.</p> PARAMETER  DESCRIPTION <code>size</code> <p>The length of this dimension.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The name of this dimension, e.g. \"width\", \"height\", \"channel\", \"batch', \u2026.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TimeInt","title":"<code>class TimeInt</code>","text":"<p>Datatype: A 64-bit number describing either nanoseconds OR sequence numbers.</p>"},{"location":"common/datatypes/#rerun.datatypes.TimeInt.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the TimeInt datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Transform3D","title":"<code>class Transform3D</code>","text":"<p>         Bases: <code>Transform3DExt</code></p> <p>Datatype: Representation of a 3D affine transform.</p>"},{"location":"common/datatypes/#rerun.datatypes.Transform3D.inner","title":"<code>inner: Union[datatypes.TranslationAndMat3x3, datatypes.TranslationRotationScale3D] = field()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>TranslationAndMat3x3 (datatypes.TranslationAndMat3x3):</p> </li> <li> <p>TranslationRotationScale (datatypes.TranslationRotationScale3D):</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TranslationAndMat3x3","title":"<code>class TranslationAndMat3x3</code>","text":"<p>         Bases: <code>TranslationAndMat3x3Ext</code></p> <p>Datatype: Representation of an affine transform via a 3x3 affine matrix paired with a translation.</p> <p>First applies the matrix, then the translation.</p>"},{"location":"common/datatypes/#rerun.datatypes.TranslationAndMat3x3.__init__","title":"<code>def __init__(translation=None, mat3x3=None, *, from_parent=False)</code>","text":"<p>Create a new instance of the TranslationAndMat3x3 datatype.</p> PARAMETER  DESCRIPTION <code>translation</code> <p>3D translation, applied after the matrix.</p> <p> TYPE: <code>Vec3DLike | None</code> DEFAULT: <code>None</code> </p> <code>mat3x3</code> <p>3x3 matrix for scale, rotation &amp; shear.</p> <p> TYPE: <code>Mat3x3Like | None</code> DEFAULT: <code>None</code> </p> <code>from_parent</code> <p>If true, the transform maps from the parent space to the space where the transform was logged.  Otherwise, the transform maps from the space to its parent.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TranslationRotationScale3D","title":"<code>class TranslationRotationScale3D</code>","text":"<p>         Bases: <code>TranslationRotationScale3DExt</code></p> <p>Datatype: Representation of an affine transform via separate translation, rotation &amp; scale.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt32","title":"<code>class UInt32</code>","text":"<p>         Bases: <code>UInt32Ext</code></p> <p>Datatype: A 32bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt32.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt32 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt64","title":"<code>class UInt64</code>","text":"<p>         Bases: <code>UInt64Ext</code></p> <p>Datatype: A 64bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt64.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt64 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec2D","title":"<code>class UVec2D</code>","text":"<p>Datatype: A uint32 vector in 2D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the UVec2D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec3D","title":"<code>class UVec3D</code>","text":"<p>Datatype: A uint32 vector in 3D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the UVec3D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec4D","title":"<code>class UVec4D</code>","text":"<p>Datatype: A uint vector in 4D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec4D.__init__","title":"<code>def __init__(xyzw)</code>","text":"<p>Create a new instance of the UVec4D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Utf8","title":"<code>class Utf8</code>","text":"<p>         Bases: <code>Utf8Ext</code></p> <p>Datatype: A string of text, encoded as UTF-8.</p>"},{"location":"common/datatypes/#rerun.datatypes.Utf8.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Uuid","title":"<code>class Uuid</code>","text":"<p>         Bases: <code>UuidExt</code></p> <p>Datatype: A 16-byte uuid.</p>"},{"location":"common/datatypes/#rerun.datatypes.Uuid.__init__","title":"<code>def __init__(bytes)</code>","text":"<p>Create a new instance of the Uuid datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec2D","title":"<code>class Vec2D</code>","text":"<p>         Bases: <code>Vec2DExt</code></p> <p>Datatype: A vector in 2D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec3D","title":"<code>class Vec3D</code>","text":"<p>         Bases: <code>Vec3DExt</code></p> <p>Datatype: A vector in 3D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec4D","title":"<code>class Vec4D</code>","text":"<p>         Bases: <code>Vec4DExt</code></p> <p>Datatype: A vector in 4D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec4D.__init__","title":"<code>def __init__(xyzw)</code>","text":"<p>Create a new instance of the Vec4D datatype.</p>"},{"location":"common/enums/","title":"Enums","text":""},{"location":"common/enums/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/enums/#rerun.Box2DFormat","title":"<code>class Box2DFormat</code>","text":"<p>         Bases: <code>Enum</code></p> <p>How to specify 2D boxes (axis-aligned bounding boxes).</p>"},{"location":"common/enums/#rerun.Box2DFormat.XCYCW2H2","title":"<code>XCYCW2H2 = 'XCYCW2H2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x_center, y_center, width/2, height/2].</p>"},{"location":"common/enums/#rerun.Box2DFormat.XCYCWH","title":"<code>XCYCWH = 'XCYCWH'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x_center, y_center, width, height].</p>"},{"location":"common/enums/#rerun.Box2DFormat.XYWH","title":"<code>XYWH = 'XYWH'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x,y,w,h], with x,y = left,top.</p>"},{"location":"common/enums/#rerun.Box2DFormat.XYXY","title":"<code>XYXY = 'XYXY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = right,bottom.</p>"},{"location":"common/enums/#rerun.Box2DFormat.YXHW","title":"<code>YXHW = 'YXHW'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[y,x,h,w], with x,y = left,top.</p>"},{"location":"common/enums/#rerun.Box2DFormat.YXYX","title":"<code>YXYX = 'YXYX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = right,bottom.</p>"},{"location":"common/enums/#rerun.ImageFormat","title":"<code>class ImageFormat</code>","text":"<p>Image file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.BMP","title":"<code>BMP: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>BMP file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.GIF","title":"<code>GIF: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>JPEG/JPG file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.JPEG","title":"<code>JPEG: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>JPEG/JPG file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.NV12","title":"<code>NV12: type[NV12]</code>  <code>instance-attribute</code>","text":"<p>Raw NV12 encoded image.</p> <p>The type comes with a <code>size_hint</code> attribute, a tuple of (height, width) which has to be specified specifying in order to set the RGB size of the image.</p>"},{"location":"common/enums/#rerun.ImageFormat.PNG","title":"<code>PNG: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>PNG file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.TIFF","title":"<code>TIFF: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>TIFF file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.YUY2","title":"<code>YUY2: type[YUY2]</code>  <code>instance-attribute</code>","text":"<p>Raw YUY2 encoded image.</p> <p>YUY2 is a YUV422 encoding with bytes ordered as <code>yuyv</code>.</p> <p>The type comes with a <code>size_hint</code> attribute, a tuple of (height, width) which has to be specified specifying in order to set the RGB size of the image.</p>"},{"location":"common/experimental/","title":"Experimental","text":""},{"location":"common/experimental/#rerun.experimental","title":"<code>rerun.experimental</code>","text":"<p>Experimental features for Rerun.</p> <p>These features are not yet stable and may change in future releases without going through the normal deprecation cycle.</p>"},{"location":"common/image_helpers/","title":"Image Helpers","text":""},{"location":"common/image_helpers/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/image_helpers/#rerun.ImageEncoded","title":"<code>class ImageEncoded</code>","text":"<p>         Bases: <code>AsComponents</code></p> <p>A monochrome or color image encoded with a common format (PNG, JPEG, etc.).</p> <p>The encoded image can be loaded from either a file using its <code>path</code> or provided directly via <code>contents</code>.</p>"},{"location":"common/image_helpers/#rerun.ImageEncoded.__init__","title":"<code>def __init__(*, path=None, contents=None, format=None, draw_order=None)</code>","text":"<p>Create a new image with a given format.</p> PARAMETER  DESCRIPTION <code>path</code> <p>A path to a file stored on the local filesystem. Mutually exclusive with <code>contents</code>.</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p>The contents of the file. Can be a BufferedReader, BytesIO, or bytes. Mutually exclusive with <code>path</code>.</p> <p> TYPE: <code>bytes | IO[bytes] | None</code> DEFAULT: <code>None</code> </p> <code>format</code> <p>The format of the image file or image encoding. If not provided, it will be inferred from the file extension if a path is specified. Note that encodings like NV12 and YUY2 can not be inferred from the file extension.</p> <p> TYPE: <code>ImageFormat | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order. Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>DrawOrderLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/","title":"Initialization functions","text":""},{"location":"common/initialization_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/initialization_functions/#rerun.init","title":"<code>def init(application_id, *, recording_id=None, spawn=False, init_logging=True, default_enabled=True, strict=False, default_blueprint=None)</code>","text":"<p>Initialize the Rerun SDK with a user-chosen application id (name).</p> <p>You must call this function first in order to initialize a global recording. Without an active recording, all methods of the SDK will turn into no-ops.</p> <p>For more advanced use cases, e.g. multiple recordings setups, see <code>rerun.new_recording</code>.</p> <p>Warning</p> <p>If you don't specify a <code>recording_id</code>, it will default to a random value that is generated once at the start of the process. That value will be kept around for the whole lifetime of the process, and even inherited by all its subprocesses, if any.</p> <p>This makes it trivial to log data to the same recording in a multiprocess setup, but it also means that the following code will not create two distinct recordings: <pre><code>rr.init(\"my_app\")\nrr.init(\"my_app\")\n</code></pre></p> <p>To create distinct recordings from the same process, specify distinct recording IDs: <pre><code>from uuid import uuid4\nrr.init(\"my_app\", recording_id=uuid4())\nrr.init(\"my_app\", recording_id=uuid4())\n</code></pre></p> PARAMETER  DESCRIPTION <code>application_id</code> <p>Your Rerun recordings will be categorized by this application id, so try to pick a unique one for each application that uses the Rerun SDK.</p> <p>For example, if you have one application doing object detection and another doing camera calibration, you could have <code>rerun.init(\"object_detector\")</code> and <code>rerun.init(\"calibrator\")</code>.</p> <p>Application ids starting with <code>rerun_example_</code> are reserved for Rerun examples, and will be treated specially by the Rerun Viewer. In particular, it will opt-in to more analytics, and will also seed the global random number generator deterministically.</p> <p> TYPE: <code>str</code> </p> <code>recording_id</code> <p>Set the recording ID that this process is logging to, as a UUIDv4.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>spawn</code> <p>Spawn a Rerun Viewer and stream logging data to it. Short for calling <code>spawn</code> separately. If you don't call this, log events will be buffered indefinitely until you call either <code>connect</code>, <code>show</code>, or <code>save</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>default_enabled</code> <p>Should Rerun logging be on by default? Can be overridden with the RERUN env-var, e.g. <code>RERUN=on</code> or <code>RERUN=off</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>init_logging</code> <p>Should we initialize the logging for this application?</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>strict</code> <p>If <code>True</code>, an exceptions is raised on use error (wrong parameter types, etc.). If <code>False</code>, errors are logged as warnings instead.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.connect","title":"<code>def connect(addr=None, *, flush_timeout_sec=2.0, default_blueprint=None, recording=None)</code>","text":"<p>Connect to a remote Rerun Viewer on the given ip:port.</p> <p>Requires that you first start a Rerun Viewer by typing 'rerun' in a terminal.</p> <p>This function returns immediately.</p> PARAMETER  DESCRIPTION <code>addr</code> <p>The ip:port to connect to</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>flush_timeout_sec</code> <p>The minimum time the SDK will wait during a flush before potentially dropping data if progress is not being made. Passing <code>None</code> indicates no timeout, and can cause a call to <code>flush</code> to block indefinitely.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>2.0</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.disconnect","title":"<code>def disconnect(recording=None)</code>","text":"<p>Closes all TCP connections, servers, and files.</p> <p>Closes all TCP connections, servers, and files that have been opened with [<code>rerun.connect</code>], [<code>rerun.serve</code>], [<code>rerun.save</code>] or [<code>rerun.spawn</code>].</p> PARAMETER  DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.save","title":"<code>def save(path, default_blueprint=None, recording=None)</code>","text":"<p>Stream all log-data to a file.</p> <p>Call this before you log any data!</p> PARAMETER  DESCRIPTION <code>path</code> <p>The path to save the data to.</p> <p> TYPE: <code>str | Path</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.send_blueprint","title":"<code>def send_blueprint(blueprint, *, make_active=True, make_default=True, recording=None)</code>","text":"<p>Create a blueprint from a <code>BlueprintLike</code> and send it to the <code>RecordingStream</code>.</p> PARAMETER  DESCRIPTION <code>blueprint</code> <p>A blueprint object to send to the viewer.</p> <p> TYPE: <code>BlueprintLike</code> </p> <code>make_active</code> <p>Immediately make this the active blueprint for the associated <code>app_id</code>. Note that setting this to <code>false</code> does not mean the blueprint may not still end up becoming active. In particular, if <code>make_default</code> is true and there is no other currently active blueprint.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>make_default</code> <p>Make this the default blueprint for the <code>app_id</code>. The default blueprint will be used as the template when the user resets the blueprint for the app. It will also become the active blueprint if no other blueprint is currently active.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.serve","title":"<code>def serve(*, open_browser=True, web_port=None, ws_port=None, default_blueprint=None, recording=None, server_memory_limit='25%')</code>","text":"<p>Serve log-data over WebSockets and serve a Rerun web viewer over HTTP.</p> <p>You can also connect to this server with the native viewer using <code>rerun localhost:9090</code>.</p> <p>The WebSocket server will buffer all log data in memory so that late connecting viewers will get all the data. You can limit the amount of data buffered by the WebSocket server with the <code>server_memory_limit</code> argument. Once reached, the earliest logged data will be dropped. Note that this means that timeless data may be dropped if logged early.</p> <p>This function returns immediately.</p> PARAMETER  DESCRIPTION <code>open_browser</code> <p>Open the default browser to the viewer.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>web_port</code> <p>The port to serve the web viewer on (defaults to 9090).</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>ws_port</code> <p>The port to serve the WebSocket server on (defaults to 9877)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>server_memory_limit</code> <p>Maximum amount of memory to use for buffering log data for clients that connect late. This can be a percentage of the total ram (e.g. \"50%\") or an absolute value (e.g. \"4GB\").</p> <p> TYPE: <code>str</code> DEFAULT: <code>'25%'</code> </p>"},{"location":"common/initialization_functions/#rerun.spawn","title":"<code>def spawn(*, port=9876, connect=True, memory_limit='75%', default_blueprint=None, recording=None)</code>","text":"<p>Spawn a Rerun Viewer, listening on the given port.</p> <p>This is often the easiest and best way to use Rerun. Just call this once at the start of your program.</p> <p>You can also call rerun.init with a <code>spawn=True</code> argument.</p> PARAMETER  DESCRIPTION <code>port</code> <p>The port to listen on.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9876</code> </p> <code>connect</code> <p>also connect to the viewer and stream logging data to it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>memory_limit</code> <p>An upper limit on how much memory the Rerun Viewer should use. When this limit is reached, Rerun will drop the oldest data. Example: <code>16GB</code> or <code>50%</code> (of system total).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'75%'</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use if <code>connect = True</code>. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.memory_recording","title":"<code>def memory_recording(recording=None)</code>","text":"<p>Streams all log-data to a memory buffer.</p> <p>This can be used to display the RRD to alternative formats such as html. See: rerun.MemoryRecording.as_html.</p> PARAMETER  DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>MemoryRecording</code> <p>A memory recording object that can be used to read the data.</p>"},{"location":"common/initialization_functions/#rerun.notebook_show","title":"<code>def notebook_show(*, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT, app_url=None, timeout_ms=DEFAULT_TIMEOUT, blueprint=None, recording=None)</code>","text":"<p>Output the Rerun viewer in a notebook using IPython IPython.core.display.HTML.</p> PARAMETER  DESCRIPTION <code>width</code> <p>The width of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_WIDTH</code> </p> <code>height</code> <p>The height of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_HEIGHT</code> </p> <code>app_url</code> <p>Alternative HTTP url to find the Rerun web viewer. This will default to using https://app.rerun.io or localhost if rerun.start_web_viewer_server has been called.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout_ms</code> <p>The number of milliseconds to wait for the Rerun web viewer to load.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_TIMEOUT</code> </p> <code>blueprint</code> <p>The blueprint to display in the viewer.</p> <p> TYPE: <code>BlueprintLike</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/interfaces/","title":"Interfaces","text":""},{"location":"common/interfaces/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/interfaces/#rerun.AsComponents","title":"<code>class AsComponents</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>Describes interface for interpreting an object as a bundle of Components.</p> <p>Note: the <code>num_instances()</code> function is an optional part of this interface. The method does not need to be implemented as it is only used after checking for its existence. (There is unfortunately no way to express this correctly with the Python typing system, see https://github.com/python/typing/issues/601).</p>"},{"location":"common/interfaces/#rerun.AsComponents.as_component_batches","title":"<code>def as_component_batches()</code>","text":"<p>Returns an iterable of <code>ComponentBatchLike</code> objects.</p> <p>Each object in the iterable must adhere to the <code>ComponentBatchLike</code> interface.</p>"},{"location":"common/interfaces/#rerun.ComponentBatchLike","title":"<code>class ComponentBatchLike</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>Describes interface for objects that can be converted to batch of rerun Components.</p>"},{"location":"common/interfaces/#rerun.ComponentBatchLike.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>Returns a <code>pyarrow.Array</code> of the component data.</p> <p>Each element in the array corresponds to an instance of the component. Single-instanced components and splats must still be represented as a 1-element array.</p>"},{"location":"common/interfaces/#rerun.ComponentBatchLike.component_name","title":"<code>def component_name()</code>","text":"<p>Returns the name of the component.</p>"},{"location":"common/logging_functions/","title":"Logging functions","text":""},{"location":"common/logging_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/logging_functions/#rerun.log","title":"<code>def log(entity_path, entity, *extra, timeless=False, recording=None, strict=None)</code>","text":"<p>Log data to Rerun.</p> <p>This is the main entry point for logging data to rerun. It can be used to log anything that implements the <code>rerun.AsComponents</code> interface, or a collection of <code>ComponentBatchLike</code> objects.</p> <p>When logging data, you must always provide an entity_path for identifying the data. Note that the path prefix \"rerun/\" is considered reserved for use by the Rerun SDK itself and should not be used for logging user data. This is where Rerun will log additional information such as warnings.</p> <p>The most common way to log is with one of the rerun archetypes, all of which implement the <code>AsComponents</code> interface.</p> <p>For example, to log a 3D point: <pre><code>rr.log(\"my/point\", rr.Points3D(position=[1.0, 2.0, 3.0]))\n</code></pre></p> <p>The <code>log</code> function can flexibly accept an arbitrary number of additional objects which will be merged into the first entity so long as they don't expose conflicting components, for instance: <pre><code># Log three points with arrows sticking out of them,\n# and a custom \"confidence\" component.\nrr.log(\n    \"my/points\",\n    rr.Points3D([[0.2, 0.5, 0.3], [0.9, 1.2, 0.1], [1.0, 4.2, 0.3]], radii=[0.1, 0.2, 0.3]),\n    rr.Arrows3D(vectors=[[0.3, 2.1, 0.2], [0.9, -1.1, 2.3], [-0.4, 0.5, 2.9]]),\n    rr.AnyValues(confidence=[0.3, 0.4, 0.9]),\n)\n</code></pre></p> <p>See also: <code>rerun.log_components</code>.</p> PARAMETER  DESCRIPTION <code>entity_path</code> <p>Path to the entity in the space hierarchy.</p> <p>The entity path can either be a string (with special characters escaped, split on unescaped slashes) or a list of unescaped strings. This means that logging to <code>\"world/my\\ image\\!\"</code> is the same as logging to [\"world\", \"my image!\"].</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> <p> TYPE: <code>str | list[str]</code> </p> <code>entity</code> <p>Anything that implements the <code>rerun.AsComponents</code> interface, usually an archetype.</p> <p> TYPE: <code>AsComponents | Iterable[ComponentBatchLike]</code> </p> <code>*extra</code> <p>An arbitrary number of additional component bundles implementing the <code>rerun.AsComponents</code> interface, that are logged to the same entity path.</p> <p> TYPE: <code>AsComponents | Iterable[ComponentBatchLike]</code> DEFAULT: <code>()</code> </p> <code>timeless</code> <p>If true, the logged components will be timeless.</p> <p>Otherwise, the data will be timestamped automatically with <code>log_time</code> and <code>log_tick</code>. Additional timelines set by <code>rerun.set_time_sequence</code>, <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code> will also be included.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If True, raise exceptions on non-loggable data. If False, warn on non-loggable data. if None, use the global default from <code>rerun.strict_mode()</code></p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/logging_functions/#rerun.log_file_from_path","title":"<code>def log_file_from_path(file_path, *, entity_path_prefix=None, timeless=False, recording=None)</code>","text":"<p>Logs the file at the given <code>path</code> using all <code>DataLoader</code>s available.</p> <p>A single <code>path</code> might be handled by more than one loader.</p> <p>This method blocks until either at least one <code>DataLoader</code> starts streaming data in or all of them fail.</p> <p>See https://www.rerun.io/docs/howto/open-any-file for more information.</p> PARAMETER  DESCRIPTION <code>file_path</code> <p>Path to the file to be logged.</p> <p> TYPE: <code>str | Path</code> </p> <code>entity_path_prefix</code> <p>What should the logged entity paths be prefixed with?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>timeless</code> <p>Should the logged data be timeless? (default: False)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/logging_functions/#rerun.log_file_from_contents","title":"<code>def log_file_from_contents(file_path, file_contents, *, entity_path_prefix=None, timeless=None, recording=None)</code>","text":"<p>Logs the given <code>file_contents</code> using all <code>DataLoader</code>s available.</p> <p>A single <code>path</code> might be handled by more than one loader.</p> <p>This method blocks until either at least one <code>DataLoader</code> starts streaming data in or all of them fail.</p> <p>See https://www.rerun.io/docs/howto/open-any-file for more information.</p> PARAMETER  DESCRIPTION <code>file_path</code> <p>Path to the file that the <code>file_contents</code> belong to.</p> <p> TYPE: <code>str | Path</code> </p> <code>file_contents</code> <p>Contents to be logged.</p> <p> TYPE: <code>bytes</code> </p> <code>entity_path_prefix</code> <p>What should the logged entity paths be prefixed with?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>timeless</code> <p>Should the logged data be timeless? (default: False)</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/","title":"Other classes and functions","text":""},{"location":"common/other_classes_and_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/other_classes_and_functions/#rerun.RecordingStream","title":"<code>class RecordingStream</code>","text":"<p>A RecordingStream is used to send data to Rerun.</p> <p>You can instantiate a RecordingStream by calling either <code>rerun.init</code> (to create a global recording) or <code>rerun.new_recording</code> (for more advanced use cases).</p> Multithreading <p>A RecordingStream can safely be copied and sent to other threads. You can also set a recording as the global active one for all threads (<code>rerun.set_global_data_recording</code>) or just for the current thread (<code>rerun.set_thread_local_data_recording</code>).</p> <p>Similarly, the <code>with</code> keyword can be used to temporarily set the active recording for the current thread, e.g.: <pre><code>with rec:\n    rr.log(...)\n</code></pre></p> <p>See also: <code>rerun.get_data_recording</code>, <code>rerun.get_global_data_recording</code>, <code>rerun.get_thread_local_data_recording</code>.</p> Available methods <p>Every function in the Rerun SDK that takes an optional RecordingStream as a parameter can also be called as a method on RecordingStream itself.</p> <p>This includes, but isn't limited to:</p> <ul> <li>Metadata-related functions:     <code>rerun.is_enabled</code>, <code>rerun.get_recording_id</code>, \u2026</li> <li>Sink-related functions:     <code>rerun.connect</code>, <code>rerun.spawn</code>, \u2026</li> <li>Time-related functions:     <code>rerun.set_time_seconds</code>, <code>rerun.set_time_sequence</code>, \u2026</li> <li>Log-related functions:     <code>rerun.log</code>, <code>rerun.log_components</code>, \u2026</li> </ul> <p>For an exhaustive list, see <code>help(rerun.RecordingStream)</code>.</p> Micro-batching <p>Micro-batching using both space and time triggers (whichever comes first) is done automatically in a dedicated background thread.</p> <p>You can configure the frequency of the batches using the following environment variables:</p> <ul> <li><code>RERUN_FLUSH_TICK_SECS</code>:     Flush frequency in seconds (default: <code>0.05</code> (50ms)).</li> <li><code>RERUN_FLUSH_NUM_BYTES</code>:     Flush threshold in bytes (default: <code>1048576</code> (1MiB)).</li> <li><code>RERUN_FLUSH_NUM_ROWS</code>:     Flush threshold in number of rows (default: <code>18446744073709551615</code> (u64::MAX)).</li> </ul>"},{"location":"common/other_classes_and_functions/#rerun.LoggingHandler","title":"<code>class LoggingHandler</code>","text":"<p>         Bases: <code>Handler</code></p> <p>Provides a logging handler that forwards all events to the Rerun SDK.</p> <p>Read more about logging handlers.</p>"},{"location":"common/other_classes_and_functions/#rerun.LoggingHandler.__init__","title":"<code>def __init__(path_prefix=None)</code>","text":"<p>Initializes the logging handler with an optional path prefix.</p> PARAMETER  DESCRIPTION <code>path_prefix</code> <p>A common prefix for all logged entity paths. Defaults to no prefix.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.LoggingHandler.emit","title":"<code>def emit(record)</code>","text":"<p>Emits a record to the Rerun SDK.</p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording","title":"<code>class MemoryRecording</code>","text":"<p>A recording that stores data in memory.</p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording.as_html","title":"<code>def as_html(*, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT, app_url=None, timeout_ms=DEFAULT_TIMEOUT, other=None)</code>","text":"<p>Generate an HTML snippet that displays the recording in an IFrame.</p> <p>For use in contexts such as Jupyter notebooks.</p> <p>\u26a0\ufe0f This will do a blocking flush of the current sink before returning!</p> PARAMETER  DESCRIPTION <code>width</code> <p>The width of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_WIDTH</code> </p> <code>height</code> <p>The height of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_HEIGHT</code> </p> <code>app_url</code> <p>Alternative HTTP url to find the Rerun web viewer. This will default to using https://app.rerun.io or localhost if rerun.start_web_viewer_server has been called.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout_ms</code> <p>The number of milliseconds to wait for the Rerun web viewer to load.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_TIMEOUT</code> </p> <code>other</code> <p>An optional MemoryRecording to merge with this one.</p> <p> TYPE: <code>MemoryRecording | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording.num_msgs","title":"<code>def num_msgs()</code>","text":"<p>The number of pending messages in the MemoryRecording.</p> <p>Note: counting the messages will flush the batcher in order to get a deterministic count.</p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording.show","title":"<code>def show(*, other=None, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT, app_url=None, timeout_ms=DEFAULT_TIMEOUT)</code>","text":"<p>Output the Rerun viewer using IPython IPython.core.display.HTML.</p> PARAMETER  DESCRIPTION <code>width</code> <p>The width of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_WIDTH</code> </p> <code>height</code> <p>The height of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_HEIGHT</code> </p> <code>app_url</code> <p>Alternative HTTP url to find the Rerun web viewer. This will default to using https://app.rerun.io or localhost if rerun.start_web_viewer_server has been called.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout_ms</code> <p>The number of milliseconds to wait for the Rerun web viewer to load.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_TIMEOUT</code> </p> <code>other</code> <p>An optional MemoryRecording to merge with this one.</p> <p> TYPE: <code>MemoryRecording | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.get_data_recording","title":"<code>def get_data_recording(recording=None)</code>","text":"<p>Returns the most appropriate recording to log data to, in the current context, if any.</p> <ul> <li>If <code>recording</code> is specified, returns that one;</li> <li>Otherwise, falls back to the currently active thread-local recording, if there is one;</li> <li>Otherwise, falls back to the currently active global recording, if there is one;</li> <li>Otherwise, returns None.</li> </ul> PARAMETER  DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[RecordingStream]</code> <p>The most appropriate recording to log data to, in the current context, if any.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_global_data_recording","title":"<code>def get_global_data_recording()</code>","text":"<p>Returns the currently active global recording, if any.</p> RETURNS DESCRIPTION <code>Optional[RecordingStream]</code> <p>The currently active global recording, if any.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_recording_id","title":"<code>def get_recording_id(recording=None)</code>","text":"<p>Get the recording ID that this recording is logging to, as a UUIDv4, if any.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> PARAMETER  DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The recording ID that this recording is logging to.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_thread_local_data_recording","title":"<code>def get_thread_local_data_recording()</code>","text":"<p>Returns the currently active thread-local recording, if any.</p> RETURNS DESCRIPTION <code>Optional[RecordingStream]</code> <p>The currently active thread-local recording, if any.</p>"},{"location":"common/other_classes_and_functions/#rerun.is_enabled","title":"<code>def is_enabled(recording=None)</code>","text":"<p>Is this Rerun recording enabled.</p> <p>If false, all calls to the recording are ignored.</p> <p>The default can be set in <code>rerun.init</code>, but is otherwise <code>True</code>.</p> <p>This can be controlled with the environment variable <code>RERUN</code> (e.g. <code>RERUN=on</code> or <code>RERUN=off</code>).</p>"},{"location":"common/other_classes_and_functions/#rerun.log_components","title":"<code>def log_components(entity_path, components, *, num_instances=None, timeless=False, recording=None, strict=None)</code>","text":"<p>Log an entity from a collection of <code>ComponentBatchLike</code> objects.</p> <p>See also: <code>rerun.log</code>.</p> PARAMETER  DESCRIPTION <code>entity_path</code> <p>Path to the entity in the space hierarchy.</p> <p>The entity path can either be a string (with special characters escaped, split on unescaped slashes) or a list of unescaped strings. This means that logging to <code>\"world/my\\ image\\!\"</code> is the same as logging to [\"world\", \"my image!\"].</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> <p> TYPE: <code>str | list[str]</code> </p> <code>components</code> <p>A collection of <code>ComponentBatchLike</code> objects that</p> <p> TYPE: <code>Iterable[ComponentBatchLike]</code> </p> <code>num_instances</code> <p>Optional. The number of instances in each batch. If not provided, the max of all components will be used instead.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>timeless</code> <p>If true, the entity will be timeless (default: False).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If True, raise exceptions on non-loggable data. If False, warn on non-loggable data. if None, use the global default from <code>rerun.strict_mode()</code></p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.new_recording","title":"<code>def new_recording(application_id, *, recording_id=None, make_default=False, make_thread_default=False, spawn=False, default_enabled=True)</code>","text":"<p>Creates a new recording with a user-chosen application id (name) that can be used to log data.</p> <p>If you only need a single global recording, <code>rerun.init</code> might be simpler.</p> <p>Warning</p> <p>If you don't specify a <code>recording_id</code>, it will default to a random value that is generated once at the start of the process. That value will be kept around for the whole lifetime of the process, and even inherited by all its subprocesses, if any.</p> <p>This makes it trivial to log data to the same recording in a multiprocess setup, but it also means that the following code will not create two distinct recordings: <pre><code>rr.init(\"my_app\")\nrr.init(\"my_app\")\n</code></pre></p> <p>To create distinct recordings from the same process, specify distinct recording IDs: <pre><code>from uuid import uuid4\nrec = rr.new_recording(application_id=\"test\", recording_id=uuid4())\nrec = rr.new_recording(application_id=\"test\", recording_id=uuid4())\n</code></pre></p> PARAMETER  DESCRIPTION <code>application_id</code> <p>Your Rerun recordings will be categorized by this application id, so try to pick a unique one for each application that uses the Rerun SDK.</p> <p>For example, if you have one application doing object detection and another doing camera calibration, you could have <code>rerun.init(\"object_detector\")</code> and <code>rerun.init(\"calibrator\")</code>.</p> <p> TYPE: <code>str</code> </p> <code>recording_id</code> <p>Set the recording ID that this process is logging to, as a UUIDv4.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>make_default</code> <p>If true (not the default), the newly initialized recording will replace the current active one (if any) in the global scope.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>make_thread_default</code> <p>If true (not the default), the newly initialized recording will replace the current active one (if any) in the thread-local scope.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>spawn</code> <p>Spawn a Rerun Viewer and stream logging data to it. Short for calling <code>spawn</code> separately. If you don't call this, log events will be buffered indefinitely until you call either <code>connect</code>, <code>show</code>, or <code>save</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>default_enabled</code> <p>Should Rerun logging be on by default? Can be overridden with the RERUN env-var, e.g. <code>RERUN=on</code> or <code>RERUN=off</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>RecordingStream</code> <p>A handle to the <code>rerun.RecordingStream</code>. Use it to log data to Rerun.</p>"},{"location":"common/other_classes_and_functions/#rerun.set_global_data_recording","title":"<code>def set_global_data_recording(recording)</code>","text":"<p>Replaces the currently active global recording with the specified one.</p> PARAMETER  DESCRIPTION <code>recording</code> <p>The newly active global recording.</p> <p> TYPE: <code>RecordingStream</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.set_thread_local_data_recording","title":"<code>def set_thread_local_data_recording(recording)</code>","text":"<p>Replaces the currently active thread-local recording with the specified one.</p> PARAMETER  DESCRIPTION <code>recording</code> <p>The newly active thread-local recording.</p> <p> TYPE: <code>RecordingStream</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.start_web_viewer_server","title":"<code>def start_web_viewer_server(port=0)</code>","text":"<p>Start an HTTP server that hosts the rerun web viewer.</p> <p>This only provides the web-server that makes the viewer available and does not otherwise provide a rerun websocket server or facilitate any routing of data.</p> <p>This is generally only necessary for application such as running a jupyter notebook in a context where app.rerun.io is unavailable, or does not have the matching resources for your build (such as when running from source.)</p> PARAMETER  DESCRIPTION <code>port</code> <p>Port to serve assets on. Defaults to 0 (random port).</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.escape_entity_path_part","title":"<code>def escape_entity_path_part(part)</code>","text":"<p>Escape an individual part of an entity path.</p> <p>For instance, <code>escape_entity_path_path(\"my image!\")</code> will return <code>\"my\\ image\\!\"</code>.</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> PARAMETER  DESCRIPTION <code>part</code> <p>An unescaped string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The escaped entity path.</p> <p> TYPE: <code>str</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.new_entity_path","title":"<code>def new_entity_path(entity_path)</code>","text":"<p>Construct an entity path, defined by a list of (unescaped) parts.</p> <p>If any part if not a string, it will be converted to a string using <code>str()</code>.</p> <p>For instance, <code>new_entity_path([\"world\", 42, \"my image!\"])</code> will return <code>\"world/42/my\\ image\\!\"</code>.</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> PARAMETER  DESCRIPTION <code>entity_path</code> <p>A list of strings to escape and join with slash.</p> <p> TYPE: <code>list[Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The escaped entity path.</p> <p> TYPE: <code>str</code> </p>"},{"location":"common/script_helpers/","title":"Script Helpers","text":""},{"location":"common/script_helpers/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/script_helpers/#rerun.script_add_args","title":"<code>def script_add_args(parser)</code>","text":"<p>Add common Rerun script arguments to <code>parser</code>.</p> PARAMETER  DESCRIPTION <code>parser</code> <p>The parser to add arguments to.</p> <p> TYPE: <code>ArgumentParser</code> </p>"},{"location":"common/script_helpers/#rerun.script_setup","title":"<code>def script_setup(args, application_id, recording_id=None, default_blueprint=None)</code>","text":"<p>Run common Rerun script setup actions. Connect to the viewer if necessary.</p> PARAMETER  DESCRIPTION <code>args</code> <p>The parsed arguments from <code>parser.parse_args()</code>.</p> <p> TYPE: <code>Namespace</code> </p> <code>application_id</code> <p>The application ID to use for the viewer.</p> <p> TYPE: <code>str</code> </p> <code>recording_id</code> <p>Set the recording ID that this process is logging to, as a UUIDv4.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/script_helpers/#rerun.script_teardown","title":"<code>def script_teardown(args)</code>","text":"<p>Run common post-actions. Sleep if serving the web viewer.</p> PARAMETER  DESCRIPTION <code>args</code> <p>The parsed arguments from <code>parser.parse_args()</code>.</p> <p> TYPE: <code>Namespace</code> </p>"},{"location":"common/timeline_functions/","title":"Timeline functions","text":""},{"location":"common/timeline_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/timeline_functions/#rerun.set_time_sequence","title":"<code>def set_time_sequence(timeline, sequence, recording=None)</code>","text":"<p>Set the current time for this thread as an integer sequence.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>set_time_sequence</code>.</p> <p>For example: <code>set_time_sequence(\"frame_nr\", frame_nr)</code>.</p> <p>You can remove a timeline again using <code>disable_timeline(\"frame_nr\")</code>.</p> <p>There is no requirement of monotonicity. You can move the time backwards if you like.</p> PARAMETER  DESCRIPTION <code>timeline</code> <p>The name of the timeline to set the time for.</p> <p> TYPE: <code>str</code> </p> <code>sequence</code> <p>The current time on the timeline in integer units.</p> <p> TYPE: <code>int</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.set_time_seconds","title":"<code>def set_time_seconds(timeline, seconds, recording=None)</code>","text":"<p>Set the current time for this thread in seconds.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code>.</p> <p>For example: <code>set_time_seconds(\"capture_time\", seconds_since_unix_epoch)</code>.</p> <p>You can remove a timeline again using <code>disable_timeline(\"capture_time\")</code>.</p> <p>Very large values will automatically be interpreted as seconds since unix epoch (1970-01-01). Small values (less than a few years) will be interpreted as relative some unknown point in time, and will be shown as e.g. <code>+3.132s</code>.</p> <p>The bindings has a built-in time which is <code>log_time</code>, and is logged as seconds since unix epoch.</p> <p>There is no requirement of monotonicity. You can move the time backwards if you like.</p> PARAMETER  DESCRIPTION <code>timeline</code> <p>The name of the timeline to set the time for.</p> <p> TYPE: <code>str</code> </p> <code>seconds</code> <p>The current time on the timeline in seconds.</p> <p> TYPE: <code>float</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.set_time_nanos","title":"<code>def set_time_nanos(timeline, nanos, recording=None)</code>","text":"<p>Set the current time for this thread.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>rerun.set_time_nanos</code> or <code>rerun.set_time_seconds</code>.</p> <p>For example: <code>set_time_nanos(\"capture_time\", nanos_since_unix_epoch)</code>.</p> <p>You can remove a timeline again using <code>disable_timeline(\"capture_time\")</code>.</p> <p>Very large values will automatically be interpreted as nanoseconds since unix epoch (1970-01-01). Small values (less than a few years) will be interpreted as relative some unknown point in time, and will be shown as e.g. <code>+3.132s</code>.</p> <p>The bindings has a built-in time which is <code>log_time</code>, and is logged as nanos since unix epoch.</p> <p>There is no requirement of monotonicity. You can move the time backwards if you like.</p> PARAMETER  DESCRIPTION <code>timeline</code> <p>The name of the timeline to set the time for.</p> <p> TYPE: <code>str</code> </p> <code>nanos</code> <p>The current time on the timeline in nanoseconds.</p> <p> TYPE: <code>int</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.disable_timeline","title":"<code>def disable_timeline(timeline, recording=None)</code>","text":"<p>Clear time information for the specified timeline on this thread.</p> PARAMETER  DESCRIPTION <code>timeline</code> <p>The name of the timeline to clear the time for.</p> <p> TYPE: <code>str</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.reset_time","title":"<code>def reset_time(recording=None)</code>","text":"<p>Clear all timeline information on this thread.</p> <p>This is the same as calling <code>disable_timeline</code> for all of the active timelines.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>rerun.set_time_nanos</code> or <code>rerun.set_time_seconds</code>.</p> PARAMETER  DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/utilities/","title":"Utilities","text":""},{"location":"common/utilities/#rerun.utilities","title":"<code>rerun.utilities</code>","text":""},{"location":"common/utilities/#rerun.utilities.color_grid","title":"<code>color_grid = build_color_grid()</code>  <code>module-attribute</code>","text":"<p>Default color grid</p>"},{"location":"common/utilities/#rerun.utilities.color_spiral","title":"<code>color_spiral = build_color_spiral()</code>  <code>module-attribute</code>","text":"<p>Default color spiral</p>"},{"location":"common/utilities/#rerun.utilities.rect_pyramid","title":"<code>rect_pyramid = build_rect_pyramid()</code>  <code>module-attribute</code>","text":"<p>Default rect pyramid data</p>"},{"location":"common/utilities/#rerun.utilities.bounce_lerp","title":"<code>def bounce_lerp(a, b, t)</code>","text":"<p>A linear interpolator that bounces between <code>a</code> and <code>b</code> as <code>t</code> goes above <code>1.0</code>.</p> PARAMETER  DESCRIPTION <code>a</code> <p>Start value (t == 0).</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>End value (t == 1).</p> <p> TYPE: <code>float</code> </p> <code>t</code> <p>Interpolation coefficient.</p> <p> TYPE: <code>float | ndarray[Any, dtype[Any]]</code> </p>"},{"location":"common/utilities/#rerun.utilities.build_color_grid","title":"<code>def build_color_grid(x_count=10, y_count=10, z_count=10, twist=0)</code>","text":"<p>Create a cube of points with colors.</p> <p>The total point cloud will have x_count * y_count * z_count points.</p> PARAMETER  DESCRIPTION <code>x_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>y_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>z_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>twist</code> <p>Angle to twist from bottom to top of the cube</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p>"},{"location":"common/utilities/#rerun.utilities.build_color_spiral","title":"<code>def build_color_spiral(num_points=100, radius=2, angular_step=0.02, angular_offset=0, z_step=0.1)</code>","text":"<p>Create a spiral of points with colors along the Z axis.</p> PARAMETER  DESCRIPTION <code>num_points</code> <p>Total number of points.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>radius</code> <p>The radius of the spiral.</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>angular_step</code> <p>The factor applied between each step along the trigonometric circle.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.02</code> </p> <code>angular_offset</code> <p>Offsets the starting position on the trigonometric circle.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>z_step</code> <p>The factor applied between each step along the Z axis.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p>"},{"location":"common/utilities/#rerun.utilities.build_rect_pyramid","title":"<code>def build_rect_pyramid(count=20, width=100, height=100)</code>","text":"<p>Create a stack of N colored rectangles.</p> PARAMETER  DESCRIPTION <code>count</code> <p>Number of rectangles to create.</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>width</code> <p>Width of the base of the pyramid.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>height</code> <p>Height of the pyramid.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p>"},{"location":"common/utilities/#rerun.utilities.interleave","title":"<code>def interleave(arr1, arr2)</code>","text":"<p>Interleaves two numpy arrays.</p> PARAMETER  DESCRIPTION <code>arr1</code> <p>A numpy array of arbitrary shape and length.</p> <p> TYPE: <code>NDArray[float64]</code> </p> <code>arr2</code> <p>A numpy array with the same shape and length as <code>arr1</code>.</p> <p> TYPE: <code>NDArray[float64]</code> </p>"},{"location":"common/utilities/#rerun.utilities.data","title":"<code>data</code>","text":"<p>Simple data to be used for Rerun demos.</p>"},{"location":"common/utilities/#rerun.utilities.data.color_grid","title":"<code>color_grid = build_color_grid()</code>  <code>module-attribute</code>","text":"<p>Default color grid</p>"},{"location":"common/utilities/#rerun.utilities.data.color_spiral","title":"<code>color_spiral = build_color_spiral()</code>  <code>module-attribute</code>","text":"<p>Default color spiral</p>"},{"location":"common/utilities/#rerun.utilities.data.rect_pyramid","title":"<code>rect_pyramid = build_rect_pyramid()</code>  <code>module-attribute</code>","text":"<p>Default rect pyramid data</p>"},{"location":"common/utilities/#rerun.utilities.data.build_color_grid","title":"<code>def build_color_grid(x_count=10, y_count=10, z_count=10, twist=0)</code>","text":"<p>Create a cube of points with colors.</p> <p>The total point cloud will have x_count * y_count * z_count points.</p> PARAMETER  DESCRIPTION <code>x_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>y_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>z_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>twist</code> <p>Angle to twist from bottom to top of the cube</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p>"},{"location":"common/utilities/#rerun.utilities.data.build_color_spiral","title":"<code>def build_color_spiral(num_points=100, radius=2, angular_step=0.02, angular_offset=0, z_step=0.1)</code>","text":"<p>Create a spiral of points with colors along the Z axis.</p> PARAMETER  DESCRIPTION <code>num_points</code> <p>Total number of points.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>radius</code> <p>The radius of the spiral.</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>angular_step</code> <p>The factor applied between each step along the trigonometric circle.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.02</code> </p> <code>angular_offset</code> <p>Offsets the starting position on the trigonometric circle.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>z_step</code> <p>The factor applied between each step along the Z axis.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p>"},{"location":"common/utilities/#rerun.utilities.data.build_rect_pyramid","title":"<code>def build_rect_pyramid(count=20, width=100, height=100)</code>","text":"<p>Create a stack of N colored rectangles.</p> PARAMETER  DESCRIPTION <code>count</code> <p>Number of rectangles to create.</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>width</code> <p>Width of the base of the pyramid.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>height</code> <p>Height of the pyramid.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p>"},{"location":"common/utilities/#rerun.utilities.util","title":"<code>util</code>","text":"<p>Simple utilities to be used for Rerun demos.</p>"},{"location":"common/utilities/#rerun.utilities.util.bounce_lerp","title":"<code>def bounce_lerp(a, b, t)</code>","text":"<p>A linear interpolator that bounces between <code>a</code> and <code>b</code> as <code>t</code> goes above <code>1.0</code>.</p> PARAMETER  DESCRIPTION <code>a</code> <p>Start value (t == 0).</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>End value (t == 1).</p> <p> TYPE: <code>float</code> </p> <code>t</code> <p>Interpolation coefficient.</p> <p> TYPE: <code>float | ndarray[Any, dtype[Any]]</code> </p>"},{"location":"common/utilities/#rerun.utilities.util.interleave","title":"<code>def interleave(arr1, arr2)</code>","text":"<p>Interleaves two numpy arrays.</p> PARAMETER  DESCRIPTION <code>arr1</code> <p>A numpy array of arbitrary shape and length.</p> <p> TYPE: <code>NDArray[float64]</code> </p> <code>arr2</code> <p>A numpy array with the same shape and length as <code>arr1</code>.</p> <p> TYPE: <code>NDArray[float64]</code> </p>"}]}