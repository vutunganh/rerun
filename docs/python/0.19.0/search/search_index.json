{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"writing_docs/","title":"Python docs","text":"<p>A high-level overview of writing and previewing the Rerun Python documentation.</p>"},{"location":"writing_docs/#getting-started-with-docs","title":"Getting started with docs","text":""},{"location":"writing_docs/#dependencies","title":"Dependencies","text":"<p>All of the dependencies for documentation generation are captured in the requirements file: <pre><code>pixi run pip install -r rerun_py/requirements-doc.txt\n</code></pre></p>"},{"location":"writing_docs/#serving-the-docs-locally","title":"Serving the docs locally","text":"<p>This will watch the contents of the <code>rerun_py</code> folder and refresh documentation live as files are changed. <pre><code>pixi run py-docs-serve\n</code></pre></p>"},{"location":"writing_docs/#how-versioned-docs-are-generated-and-served","title":"How versioned docs are generated and served","text":"<p>Our documentation is versioned with releases and generated via mike</p> <p>The documentation exists as a GitHub Pages project which is hosted from the contents of the <code>gh-pages</code> branch.</p> <p><code>mike</code> updates this branch with new content as part of CI</p> <p>Every commit that lands to main will generate bleeding edge documentation as HEAD. Behind the scenes, a GitHub action is just running: <pre><code>pixi run mike deploy -F rerun_py/mkdocs.yml HEAD\n</code></pre></p> <p>On release, when GitHub sees a new tag: <code>X.Y.Z</code>, the GitHub action will instead deploy with a version tag: <pre><code>pixi run mike deploy -F rerun_py/mkdocs.yml X.Y.Z latest\n</code></pre></p> <p>You can also locally preview the publicly hosted site with all versions, using mike: <pre><code>pixi run mike serve -F rerun_py/mkdocs.yml\n</code></pre> though when locally developing docs you are better off using <code>mkdocs serve</code> as described above since it will handle hot-reloading for you as you edit.</p>"},{"location":"common/","title":"index","text":""},{"location":"common/#getting-started","title":"Getting Started","text":"<ul> <li>Quick start</li> <li>Tutorial</li> <li>Examples on GitHub</li> <li>Troubleshooting</li> </ul> <p>There are many different ways of sending data to the Rerun Viewer depending on what you're trying to achieve and whether the viewer is running in the same process as your code, in another process, or even as a separate web application.</p> <p>Checkout SDK Operating Modes for an overview of what's possible and how.</p>"},{"location":"common/#apis","title":"APIs","text":""},{"location":"common/#initialization-functions","title":"Initialization functions","text":"Function Description <code>rerun.init()</code> Initialize the Rerun SDK with a user-chosen application id (name). <code>rerun.connect()</code> Connect to a remote Rerun Viewer on the given ip:port. <code>rerun.disconnect()</code> Closes all TCP connections, servers, and files. <code>rerun.save()</code> Stream all log-data to a file. <code>rerun.send_blueprint()</code> Create a blueprint from a <code>BlueprintLike</code> and send it to the <code>RecordingStream</code>. <code>rerun.serve()</code> Serve log-data over WebSockets and serve a Rerun web viewer over HTTP. <code>rerun.spawn()</code> Spawn a Rerun Viewer, listening on the given port. <code>rerun.memory_recording()</code> Streams all log-data to a memory buffer. <code>rerun.notebook_show()</code> Output the Rerun viewer in a notebook using IPython IPython.core.display.HTML. <code>rerun.legacy_notebook_show()</code> Output the Rerun viewer in a notebook using IPython IPython.core.display.HTML."},{"location":"common/#logging-functions","title":"Logging functions","text":"Function Description <code>rerun.log()</code> Log data to Rerun. <code>rerun.log_file_from_path()</code> Logs the file at the given <code>path</code> using all <code>DataLoader</code>s available. <code>rerun.log_file_from_contents()</code> Logs the given <code>file_contents</code> using all <code>DataLoader</code>s available."},{"location":"common/#timeline-functions","title":"Timeline functions","text":"Function Description <code>rerun.set_time_sequence()</code> Set the current time for this thread as an integer sequence. <code>rerun.set_time_seconds()</code> Set the current time for this thread in seconds. <code>rerun.set_time_nanos()</code> Set the current time for this thread. <code>rerun.disable_timeline()</code> Clear time information for the specified timeline on this thread. <code>rerun.reset_time()</code> Clear all timeline information on this thread."},{"location":"common/#columnar-api","title":"Columnar API","text":"Function Description <code>rerun.send_columns()</code> Send columnar data to Rerun. Class Description <code>rerun.TimeNanosColumn</code> A column of time values that are represented as integer nanoseconds. <code>rerun.TimeSecondsColumn</code> A column of time values that are represented as floating point seconds. <code>rerun.TimeSequenceColumn</code> A column of time values that are represented as an integer sequence."},{"location":"common/#custom-data","title":"Custom Data","text":"Class Description <code>rerun.AnyValues</code> Helper to log arbitrary values as a bundle of components."},{"location":"common/#clearing-entities","title":"Clearing Entities","text":"Class Description <code>rerun.Clear</code> Archetype: Empties all the components of an entity."},{"location":"common/#annotations","title":"Annotations","text":"Class Description <code>rerun.AnnotationContext</code> Archetype: The annotation context provides additional information on how to display entities. <code>rerun.AnnotationInfo</code> Datatype: Annotation info annotating a class id or key-point id. <code>rerun.ClassDescription</code> Datatype: The description of a semantic Class."},{"location":"common/#images","title":"Images","text":"Class Description <code>rerun.DepthImage</code> Archetype: A depth image, i.e. as captured by a depth camera. <code>rerun.Image</code> Archetype: A monochrome or color image. <code>rerun.EncodedImage</code> Archetype: An image encoded as e.g. a JPEG or PNG. <code>rerun.SegmentationImage</code> Archetype: An image made up of integer <code>components.ClassId</code>s."},{"location":"common/#video","title":"Video","text":"Class Description <code>rerun.AssetVideo</code> Archetype: A video binary. <code>rerun.VideoFrameReference</code> Archetype: References a single video frame."},{"location":"common/#plotting","title":"Plotting","text":"Class Description <code>rerun.BarChart</code> Archetype: A bar chart. <code>rerun.Scalar</code> Archetype: A double-precision scalar, e.g. for use for time-series plots. <code>rerun.SeriesLine</code> Archetype: Define the style properties for a line series in a chart. <code>rerun.SeriesPoint</code> Archetype: Define the style properties for a point series in a chart."},{"location":"common/#spatial-archetypes","title":"Spatial Archetypes","text":"Class Description <code>rerun.Arrows3D</code> Archetype: 3D arrows with optional colors, radii, labels, etc. <code>rerun.Arrows2D</code> Archetype: 2D arrows with optional colors, radii, labels, etc. <code>rerun.Asset3D</code> Archetype: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, etc.). <code>rerun.Boxes2D</code> Archetype: 2D boxes with half-extents and optional center, colors etc. <code>rerun.Boxes3D</code> Archetype: 3D boxes with half-extents and optional center, rotations, colors etc. <code>rerun.Ellipsoids3D</code> Archetype: 3D ellipsoids or spheres. <code>rerun.LineStrips2D</code> Archetype: 2D line strips with positions and optional colors, radii, labels, etc. <code>rerun.LineStrips3D</code> Archetype: 3D line strips with positions and optional colors, radii, labels, etc. <code>rerun.Mesh3D</code> Archetype: A 3D triangle mesh as specified by its per-mesh and per-vertex properties. <code>rerun.Points2D</code> Archetype: A 2D point cloud with positions and optional colors, radii, labels, etc. <code>rerun.Points3D</code> Archetype: A 3D point cloud with positions and optional colors, radii, labels, etc."},{"location":"common/#tensors","title":"Tensors","text":"Class Description <code>rerun.Tensor</code> Archetype: An N-dimensional array of numbers."},{"location":"common/#text","title":"Text","text":"Class Description <code>rerun.LoggingHandler</code> Provides a logging handler that forwards all events to the Rerun SDK. <code>rerun.TextDocument</code> Archetype: A text element intended to be displayed in its own text box. <code>rerun.TextLog</code> Archetype: A log entry in a text log, comprised of a text body and its log level."},{"location":"common/#transforms-and-coordinate-systems","title":"Transforms and Coordinate Systems","text":"Class Description <code>rerun.DisconnectedSpace</code> Archetype: Spatially disconnect this entity from its parent. <code>rerun.Pinhole</code> Archetype: Camera perspective projection (a.k.a. intrinsics). <code>rerun.Transform3D</code> Archetype: A transform between two 3D spaces, i.e. a pose. <code>rerun.InstancePoses3D</code> Archetype: One or more transforms between the current entity and its parent. Unlike <code>archetypes.Transform3D</code>, it is not propagated in the transform hierarchy. <code>rerun.ViewCoordinates</code> Archetype: How we interpret the coordinate system of an entity/space. <code>rerun.Scale3D</code> Component: A 3D scale factor. <code>rerun.Quaternion</code> Datatype: A Quaternion represented by 4 real numbers. <code>rerun.RotationAxisAngle</code> Datatype: 3D rotation represented by a rotation around a given axis."},{"location":"common/#interfaces","title":"Interfaces","text":"Class Description <code>rerun.AsComponents</code> Describes interface for interpreting an object as a bundle of Components. <code>rerun.ComponentBatchLike</code> Describes interface for objects that can be converted to batch of rerun Components. <code>rerun.ComponentColumn</code> A column of components that can be sent using <code>send_columns</code>."},{"location":"common/#blueprint","title":"Blueprint","text":"Class Description <code>rerun.blueprint.Blueprint</code> The top-level description of the viewer blueprint. <code>rerun.blueprint.BlueprintPart</code> The types that make up a blueprint. <code>rerun.blueprint.Container</code> Base class for all container types. <code>rerun.blueprint.ContainerLike</code> A type that can be converted to a container. <code>rerun.blueprint.Horizontal</code> A horizontal container. <code>rerun.blueprint.Vertical</code> A vertical container. <code>rerun.blueprint.Grid</code> A grid container. <code>rerun.blueprint.Tabs</code> A tab container. <code>rerun.blueprint.SpaceView</code> Base class for all space view types. <code>rerun.blueprint.BarChartView</code> View: A bar chart view. <code>rerun.blueprint.Spatial2DView</code> View: For viewing spatial 2D data. <code>rerun.blueprint.Spatial3DView</code> View: For viewing spatial 3D data. <code>rerun.blueprint.TensorView</code> View: A view on a tensor of any dimensionality. <code>rerun.blueprint.TextDocumentView</code> View: A view of a single text document, for use with <code>archetypes.TextDocument</code>. <code>rerun.blueprint.TextLogView</code> View: A view of a text log, for use with <code>archetypes.TextLog</code>. <code>rerun.blueprint.TimeSeriesView</code> View: A time series view for scalars over time, for use with <code>archetypes.Scalar</code>. <code>rerun.blueprint.BlueprintPanel</code> The state of the blueprint panel. <code>rerun.blueprint.SelectionPanel</code> The state of the selection panel. <code>rerun.blueprint.TimePanel</code> The state of the time panel."},{"location":"common/#dataframe","title":"Dataframe","text":"Function Description <code>rerun.dataframe.load_archive()</code> Load a rerun archive from an RRD file. <code>rerun.dataframe.load_recording()</code> Load a single recording from an RRD file. Class Description <code>rerun.dataframe.ComponentColumnDescriptor</code> The descriptor of a component column. <code>rerun.dataframe.ComponentColumnSelector</code> A selector for a component column. <code>rerun.dataframe.IndexColumnDescriptor</code> The descriptor of an index column. <code>rerun.dataframe.IndexColumnSelector</code> A selector for an index column. <code>rerun.dataframe.Recording</code> A single Rerun recording. <code>rerun.dataframe.RecordingView</code> A view of a recording restricted to a given index, containing a specific set of entities and components. <code>rerun.dataframe.RRDArchive</code> An archive loaded from an RRD. <code>rerun.dataframe.Schema</code> The schema representing a set of available columns. <code>rerun.dataframe.AnyColumn</code> A type alias for any column-like object. <code>rerun.dataframe.AnyComponentColumn</code> A type alias for any component-column-like object. <code>rerun.dataframe.ComponentLike</code> A type alias for a component-like object used for content-expressions and column selectors. <code>rerun.dataframe.ViewContentsLike</code> A type alias for specifying the contents of a view."},{"location":"common/#script-helpers","title":"Script Helpers","text":"Function Description <code>rerun.script_add_args()</code> Add common Rerun script arguments to <code>parser</code>. <code>rerun.script_setup()</code> Run common Rerun script setup actions. Connect to the viewer if necessary. <code>rerun.script_teardown()</code> Run common post-actions. Sleep if serving the web viewer."},{"location":"common/#troubleshooting","title":"Troubleshooting","text":"<p>You can set <code>RUST_LOG=debug</code> before running your Python script and/or <code>rerun</code> process to get some verbose logging output.</p> <p>If you run into any issues don't hesitate to open a ticket or join our Discord.</p>"},{"location":"common/archetypes/","title":"Archetypes","text":""},{"location":"common/archetypes/#rerun.archetypes","title":"<code>rerun.archetypes</code>","text":""},{"location":"common/archetypes/#rerun.archetypes.AnnotationContext","title":"<code>class AnnotationContext</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The annotation context provides additional information on how to display entities.</p> <p>Entities can use <code>components.ClassId</code>s and <code>components.KeypointId</code>s to provide annotations, and the labels and colors will be looked up in the appropriate annotation context. We use the first annotation context we find in the path-hierarchy when searching up through the ancestors of a given entity path.</p> <p>See also <code>datatypes.ClassDescription</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.AnnotationContext--segmentation","title":"Segmentation:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_annotation_context_segmentation\", spawn=True)\n\n# Create a simple segmentation image\nimage = np.zeros((200, 300), dtype=np.uint8)\nimage[50:100, 50:120] = 1\nimage[100:180, 130:280] = 2\n\n# Log an annotation context to assign a label and color to each class\nrr.log(\"segmentation\", rr.AnnotationContext([(1, \"red\", (255, 0, 0)), (2, \"green\", (0, 255, 0))]), static=True)\n\nrr.log(\"segmentation/image\", rr.SegmentationImage(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.AnnotationContext.__init__","title":"<code>def __init__(context)</code>","text":"<p>Create a new instance of the AnnotationContext archetype.</p> PARAMETER DESCRIPTION <code>context</code> <p>List of class descriptions, mapping class indices to class names, colors etc.</p> <p> TYPE: <code>AnnotationContextLike</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows2D","title":"<code>class Arrows2D</code>","text":"<p>         Bases: <code>Arrows2DExt</code>, <code>Archetype</code></p> <p>Archetype: 2D arrows with optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Arrows2D--simple-batch-of-2d-arrows","title":"Simple batch of 2D arrows:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_arrow2d\", spawn=True)\n\nrr.log(\n    \"arrows\",\n    rr.Arrows2D(\n        origins=[[0.25, 0.0], [0.25, 0.0], [-0.1, -0.1]],\n        vectors=[[1.0, 0.0], [0.0, -1.0], [-0.7, 0.7]],\n        colors=[[255, 0, 0], [0, 255, 0], [127, 0, 255]],\n        labels=[\"right\", \"up\", \"left-down\"],\n        radii=0.025,\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows2D.__init__","title":"<code>def __init__(*, vectors, origins=None, radii=None, colors=None, labels=None, show_labels=None, draw_order=None, class_ids=None)</code>","text":"<p>Create a new instance of the Arrows2D archetype.</p> PARAMETER DESCRIPTION <code>vectors</code> <p>All the vectors for each arrow in the batch.</p> <p> TYPE: <code>Vec2DArrayLike</code> </p> <code>origins</code> <p>All the origin points for each arrow in the batch.</p> <p>If no origins are set, (0, 0, 0) is used as the origin for each arrow.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the arrows.</p> <p>The shaft is rendered as a line with <code>radius = 0.5 * radius</code>. The tip is rendered with <code>height = 2.0 * radius</code> and <code>radius = 1.0 * radius</code>.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the arrows.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order of the arrows.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows3D","title":"<code>class Arrows3D</code>","text":"<p>         Bases: <code>Arrows3DExt</code>, <code>Archetype</code></p> <p>Archetype: 3D arrows with optional colors, radii, labels, etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Arrows3D--simple-batch-of-3d-arrows","title":"Simple batch of 3D arrows:","text":"<p><pre><code>from math import tau\n\nimport numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_arrow3d\", spawn=True)\n\nlengths = np.log2(np.arange(0, 100) + 1)\nangles = np.arange(start=0, stop=tau, step=tau * 0.01)\norigins = np.zeros((100, 3))\nvectors = np.column_stack([np.sin(angles) * lengths, np.zeros(100), np.cos(angles) * lengths])\ncolors = [[1.0 - c, c, 0.5, 0.5] for c in angles / tau]\n\nrr.log(\"arrows\", rr.Arrows3D(origins=origins, vectors=vectors, colors=colors))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Arrows3D.__init__","title":"<code>def __init__(*, vectors, origins=None, radii=None, colors=None, labels=None, show_labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the Arrows3D archetype.</p> PARAMETER DESCRIPTION <code>vectors</code> <p>All the vectors for each arrow in the batch.</p> <p> TYPE: <code>Vec3DArrayLike</code> </p> <code>origins</code> <p>All the origin points for each arrow in the batch.</p> <p>If no origins are set, (0, 0, 0) is used as the origin for each arrow.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the arrows.</p> <p>The shaft is rendered as a line with <code>radius = 0.5 * radius</code>. The tip is rendered with <code>height = 2.0 * radius</code> and <code>radius = 1.0 * radius</code>.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the arrows.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Asset3D","title":"<code>class Asset3D</code>","text":"<p>         Bases: <code>Asset3DExt</code>, <code>Archetype</code></p> <p>Archetype: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, etc.).</p> <p>See also <code>archetypes.Mesh3D</code>.</p> <p>If there are multiple <code>archetypes.InstancePoses3D</code> instances logged to the same entity as a mesh, an instance of the mesh will be drawn for each transform.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Asset3D--simple-3d-asset","title":"Simple 3D asset:","text":"<p><pre><code>import sys\n\nimport rerun as rr\n\nif len(sys.argv) &lt; 2:\n    print(f\"Usage: {sys.argv[0]} &lt;path_to_asset.[gltf|glb|obj|stl]&gt;\")\n    sys.exit(1)\n\nrr.init(\"rerun_example_asset3d\", spawn=True)\n\nrr.log(\"world\", rr.ViewCoordinates.RIGHT_HAND_Z_UP, static=True)  # Set an up-axis\nrr.log(\"world/asset\", rr.Asset3D(path=sys.argv[1]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Asset3D.__init__","title":"<code>def __init__(*, path=None, contents=None, media_type=None)</code>","text":"<p>Create a new instance of the Asset3D archetype.</p> PARAMETER DESCRIPTION <code>path</code> <p>A path to an file stored on the local filesystem. Mutually exclusive with <code>contents</code>.</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p>The contents of the file. Can be a BufferedReader, BytesIO, or bytes. Mutually exclusive with <code>path</code>.</p> <p> TYPE: <code>BlobLike | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The Media Type of the asset.</p> <p>For instance:  * <code>model/gltf-binary</code>  * <code>model/gltf+json</code>  * <code>model/obj</code>  * <code>model/stl</code></p> <p>If omitted, it will be guessed from the <code>path</code> (if any), or the viewer will try to guess from the contents (magic header). If the media type cannot be guessed, the viewer won't be able to render the asset.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.AssetVideo","title":"<code>class AssetVideo</code>","text":"<p>         Bases: <code>AssetVideoExt</code>, <code>Archetype</code></p> <p>Archetype: A video binary.</p> <p>Only MP4 containers with AV1 are generally supported, though the web viewer supports more video codecs, depending on browser.</p> <p>See https://rerun.io/docs/reference/video for details of what is and isn't supported.</p> <p>In order to display a video, you also need to log a <code>archetypes.VideoFrameReference</code> for each frame.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.AssetVideo--video-with-automatically-determined-frames","title":"Video with automatically determined frames:","text":"<p><pre><code># TODO(#7298): \u26a0\ufe0f Video is currently only supported in the Rerun web viewer.\n\nimport sys\n\nimport rerun as rr\n\nif len(sys.argv) &lt; 2:\n    # TODO(#7354): Only mp4 is supported for now.\n    print(f\"Usage: {sys.argv[0]} &lt;path_to_video.[mp4]&gt;\")\n    sys.exit(1)\n\nrr.init(\"rerun_example_asset_video_auto_frames\", spawn=True)\n\n# Log video asset which is referred to by frame references.\nvideo_asset = rr.AssetVideo(path=sys.argv[1])\nrr.log(\"video\", video_asset, static=True)\n\n# Send automatically determined video frame timestamps.\nframe_timestamps_ns = video_asset.read_frame_timestamps_ns()\nrr.send_columns(\n    \"video\",\n    # Note timeline values don't have to be the same as the video timestamps.\n    times=[rr.TimeNanosColumn(\"video_time\", frame_timestamps_ns)],\n    components=[rr.VideoFrameReference.indicator(), rr.components.VideoTimestamp.nanoseconds(frame_timestamps_ns)],\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.AssetVideo--demonstrates-manual-use-of-video-frame-references","title":"Demonstrates manual use of video frame references:","text":"<p><pre><code># TODO(#7298): \u26a0\ufe0f Video is currently only supported in the Rerun web viewer.\n\nimport sys\n\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nif len(sys.argv) &lt; 2:\n    # TODO(#7354): Only mp4 is supported for now.\n    print(f\"Usage: {sys.argv[0]} &lt;path_to_video.[mp4]&gt;\")\n    sys.exit(1)\n\nrr.init(\"rerun_example_asset_video_manual_frames\", spawn=True)\n\n# Log video asset which is referred to by frame references.\nrr.log(\"video_asset\", rr.AssetVideo(path=sys.argv[1]), static=True)\n\n# Create two entities, showing the same video frozen at different times.\nrr.log(\n    \"frame_1s\",\n    rr.VideoFrameReference(\n        timestamp=rr.components.VideoTimestamp(seconds=1.0),\n        video_reference=\"video_asset\",\n    ),\n)\nrr.log(\n    \"frame_2s\",\n    rr.VideoFrameReference(\n        timestamp=rr.components.VideoTimestamp(seconds=2.0),\n        video_reference=\"video_asset\",\n    ),\n)\n\n# Send blueprint that shows two 2D views next to each other.\nrr.send_blueprint(rrb.Horizontal(rrb.Spatial2DView(origin=\"frame_1s\"), rrb.Spatial2DView(origin=\"frame_2s\")))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.AssetVideo.__init__","title":"<code>def __init__(*, path=None, contents=None, media_type=None)</code>","text":"<p>Create a new instance of the AssetVideo archetype.</p> PARAMETER DESCRIPTION <code>path</code> <p>A path to an file stored on the local filesystem. Mutually exclusive with <code>contents</code>.</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p>The contents of the file. Can be a BufferedReader, BytesIO, or bytes. Mutually exclusive with <code>path</code>.</p> <p> TYPE: <code>BlobLike | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The Media Type of the asset.</p> <p>For instance:  * <code>video/mp4</code></p> <p>If omitted, it will be guessed from the <code>path</code> (if any), or the viewer will try to guess from the contents (magic header). If the media type cannot be guessed, the viewer won't be able to render the asset.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.AssetVideo.read_frame_timestamps_ns","title":"<code>def read_frame_timestamps_ns()</code>","text":"<p>Determines the presentation timestamps of all frames inside the video.</p> <p>Throws a runtime exception if the video cannot be read.</p>"},{"location":"common/archetypes/#rerun.archetypes.BarChart","title":"<code>class BarChart</code>","text":"<p>         Bases: <code>BarChartExt</code>, <code>Archetype</code></p> <p>Archetype: A bar chart.</p> <p>The x values will be the indices of the array, and the bar heights will be the provided values.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.BarChart--simple-bar-chart","title":"Simple bar chart:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_bar_chart\", spawn=True)\nrr.log(\"bar_chart\", rr.BarChart([8, 4, 0, 9, 1, 4, 1, 6, 9, 0]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.BarChart.__init__","title":"<code>def __init__(values, *, color=None)</code>","text":"<p>Create a new instance of the BarChart archetype.</p> PARAMETER DESCRIPTION <code>values</code> <p>The values. Should always be a 1-dimensional tensor (i.e. a vector).</p> <p> TYPE: <code>TensorDataLike</code> </p> <code>color</code> <p>The color of the bar chart</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes2D","title":"<code>class Boxes2D</code>","text":"<p>         Bases: <code>Boxes2DExt</code>, <code>Archetype</code></p> <p>Archetype: 2D boxes with half-extents and optional center, colors etc.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Boxes2D--simple-2d-boxes","title":"Simple 2D boxes:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_box2d\", spawn=True)\n\nrr.log(\"simple\", rr.Boxes2D(mins=[-1, -1], sizes=[2, 2]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes2D.__init__","title":"<code>def __init__(*, sizes=None, mins=None, half_sizes=None, centers=None, array=None, array_format=None, radii=None, colors=None, labels=None, show_labels=None, draw_order=None, class_ids=None)</code>","text":"<p>Create a new instance of the Boxes2D archetype.</p> PARAMETER DESCRIPTION <code>sizes</code> <p>Full extents in x/y. Incompatible with <code>array</code> and <code>half_sizes</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>half_sizes</code> <p>All half-extents that make up the batch of boxes. Specify this instead of <code>sizes</code> Incompatible with <code>array</code> and <code>sizes</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mins</code> <p>Minimum coordinates of the boxes. Specify this instead of <code>centers</code>. Incompatible with <code>array</code>. Only valid when used together with either <code>sizes</code> or <code>half_sizes</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>array</code> <p>An array of boxes in the format specified by <code>array_format</code>. Requires specifying <code>array_format</code>. Incompatible with <code>sizes</code>, <code>half_sizes</code>, <code>mins</code> and <code>centers</code>.</p> <p> TYPE: <code>ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>array_format</code> <p>How to interpret the data in <code>array</code>.</p> <p> TYPE: <code>Box2DFormat | None</code> DEFAULT: <code>None</code> </p> <code>centers</code> <p>Optional center positions of the boxes.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the boxes.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the lines that make up the boxes.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the boxes.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order. Objects with higher values are drawn on top of those with lower values.</p> <p>The default for 2D boxes is 10.0.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the boxes.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes3D","title":"<code>class Boxes3D</code>","text":"<p>         Bases: <code>Boxes3DExt</code>, <code>Archetype</code></p> <p>Archetype: 3D boxes with half-extents and optional center, rotations, colors etc.</p> <p>Note that orienting and placing the box is handled via <code>[archetypes.InstancePoses3D]</code>. Some of its component are repeated here for convenience. If there's more instance poses than half sizes, the last half size will be repeated for the remaining poses.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Boxes3D--batch-of-3d-boxes","title":"Batch of 3D boxes:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_box3d_batch\", spawn=True)\n\nrr.log(\n    \"batch\",\n    rr.Boxes3D(\n        centers=[[2, 0, 0], [-2, 0, 0], [0, 0, 2]],\n        half_sizes=[[2.0, 2.0, 1.0], [1.0, 1.0, 0.5], [2.0, 0.5, 1.0]],\n        quaternions=[\n            rr.Quaternion.identity(),\n            rr.Quaternion(xyzw=[0.0, 0.0, 0.382683, 0.923880]),  # 45 degrees around Z\n        ],\n        radii=0.025,\n        colors=[(255, 0, 0), (0, 255, 0), (0, 0, 255)],\n        fill_mode=\"solid\",\n        labels=[\"red\", \"green\", \"blue\"],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Boxes3D.__init__","title":"<code>def __init__(*, sizes=None, mins=None, half_sizes=None, centers=None, rotation_axis_angles=None, quaternions=None, rotations=None, colors=None, radii=None, fill_mode=None, labels=None, show_labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the Boxes3D archetype.</p> PARAMETER DESCRIPTION <code>sizes</code> <p>Full extents in x/y/z. Specify this instead of <code>half_sizes</code></p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>half_sizes</code> <p>All half-extents that make up the batch of boxes. Specify this instead of <code>sizes</code></p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mins</code> <p>Minimum coordinates of the boxes. Specify this instead of <code>centers</code>.</p> <p>Only valid when used together with either <code>sizes</code> or <code>half_sizes</code>.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>centers</code> <p>Optional center positions of the boxes.</p> <p>If not specified, the centers will be at (0, 0, 0). Note that this uses a <code>components.PoseTranslation3D</code> which is also used by <code>archetypes.InstancePoses3D</code>.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>rotation_axis_angles</code> <p>Rotations via axis + angle.</p> <p>If no rotation is specified, the axes of the boxes align with the axes of the local coordinate system. Note that this uses a <code>components.PoseRotationAxisAngle</code> which is also used by <code>archetypes.InstancePoses3D</code>.</p> <p> TYPE: <code>RotationAxisAngleArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>quaternions</code> <p>Rotations via quaternion.</p> <p>If no rotation is specified, the axes of the boxes align with the axes of the local coordinate system. Note that this uses a <code>components.PoseRotationQuat</code> which is also used by <code>archetypes.InstancePoses3D</code>.</p> <p> TYPE: <code>QuaternionArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>rotations</code> <p>Backwards compatible parameter for specifying rotations. Tries to infer the type of rotation from the input. Prefer using <code>quaternions</code> or <code>rotation_axis_angles</code>.</p> <p> TYPE: <code>RotationAxisAngleArrayLike | QuaternionArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the boxes.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>Optional radii for the lines that make up the boxes.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>fill_mode</code> <p>Optionally choose whether the boxes are drawn with lines or solid.</p> <p> TYPE: <code>FillMode | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the boxes.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the boxes.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Clear","title":"<code>class Clear</code>","text":"<p>         Bases: <code>ClearExt</code>, <code>Archetype</code></p> <p>Archetype: Empties all the components of an entity.</p> <p>The presence of a clear means that a latest-at query of components at a given path(s) will not return any components that were logged at those paths before the clear. Any logged components after the clear are unaffected by the clear.</p> <p>This implies that a range query that includes time points that are before the clear, still returns all components at the given path(s). Meaning that in practice clears are ineffective when making use of visible time ranges. Scalar plots are an exception: they track clears and use them to represent holes in the data (i.e. discontinuous lines).</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Clear--flat","title":"Flat:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_clear\", spawn=True)\n\nvectors = [(1.0, 0.0, 0.0), (0.0, -1.0, 0.0), (-1.0, 0.0, 0.0), (0.0, 1.0, 0.0)]\norigins = [(-0.5, 0.5, 0.0), (0.5, 0.5, 0.0), (0.5, -0.5, 0.0), (-0.5, -0.5, 0.0)]\ncolors = [(200, 0, 0), (0, 200, 0), (0, 0, 200), (200, 0, 200)]\n\n# Log a handful of arrows.\nfor i, (vector, origin, color) in enumerate(zip(vectors, origins, colors)):\n    rr.log(f\"arrows/{i}\", rr.Arrows3D(vectors=vector, origins=origin, colors=color))\n\n# Now clear them, one by one on each tick.\nfor i in range(len(vectors)):\n    rr.log(f\"arrows/{i}\", rr.Clear(recursive=False))  # or `rr.Clear.flat()`\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Clear.__init__","title":"<code>def __init__(*, recursive)</code>","text":"<p>Create a new instance of the Clear archetype.</p> PARAMETER DESCRIPTION <code>recursive</code> <p>Whether to recursively clear all children.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Clear.flat","title":"<code>def flat()</code>  <code>staticmethod</code>","text":"<p>Returns a non-recursive clear archetype.</p> <p>This will empty all components of the associated entity at the logged timepoint. Children will be left untouched.</p>"},{"location":"common/archetypes/#rerun.archetypes.Clear.recursive","title":"<code>def recursive()</code>  <code>staticmethod</code>","text":"<p>Returns a recursive clear archetype.</p> <p>This will empty all components of the associated entity at the logged timepoint, as well as all components of all its recursive children.</p>"},{"location":"common/archetypes/#rerun.archetypes.DepthImage","title":"<code>class DepthImage</code>","text":"<p>         Bases: <code>DepthImageExt</code>, <code>Archetype</code></p> <p>Archetype: A depth image, i.e. as captured by a depth camera.</p> <p>Each pixel corresponds to a depth value in units specified by <code>components.DepthMeter</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.DepthImage--depth-to-3d-example","title":"Depth to 3D example:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\ndepth_image = 65535 * np.ones((200, 300), dtype=np.uint16)\ndepth_image[50:150, 50:150] = 20000\ndepth_image[130:180, 100:280] = 45000\n\nrr.init(\"rerun_example_depth_image_3d\", spawn=True)\n\n# If we log a pinhole camera model, the depth gets automatically back-projected to 3D\nrr.log(\n    \"world/camera\",\n    rr.Pinhole(\n        width=depth_image.shape[1],\n        height=depth_image.shape[0],\n        focal_length=200,\n    ),\n)\n\n# Log the tensor.\nrr.log(\"world/camera/depth\", rr.DepthImage(depth_image, meter=10_000.0, colormap=\"viridis\"))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.DepthImage.__init__","title":"<code>def __init__(image, *, meter=None, colormap=None, depth_range=None, point_fill_ratio=None, draw_order=None)</code>","text":"<p>Create a new instance of the DepthImage archetype.</p> PARAMETER DESCRIPTION <code>image</code> <p>A numpy array or tensor with the depth image data. Leading and trailing unit-dimensions are ignored, so that <code>1x480x640x1</code> is treated as a <code>480x640</code>.</p> <p> TYPE: <code>ImageLike</code> </p> <code>meter</code> <p>An optional floating point value that specifies how long a meter is in the native depth units.</p> <p>For instance: with uint16, perhaps meter=1000 which would mean you have millimeter precision and a range of up to ~65 meters (2^16 / 1000).</p> <p>Note that the only effect on 2D views is the physical depth values shown when hovering the image. In 3D views on the other hand, this affects where the points of the point cloud are placed.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>colormap</code> <p>Colormap to use for rendering the depth image.</p> <p>If not set, the depth image will be rendered using the Turbo colormap.</p> <p> TYPE: <code>Colormap | None</code> DEFAULT: <code>None</code> </p> <code>depth_range</code> <p>The expected range of depth values.</p> <p>This is typically the expected range of valid values. Everything outside of the range is clamped to the range for the purpose of colormpaping. Note that point clouds generated from this image will still display all points, regardless of this range.</p> <p>If not specified, the range will be automatically be estimated from the data. Note that the Viewer may try to guess a wider range than the minimum/maximum of values in the contents of the depth image. E.g. if all values are positive, some bigger than 1.0 and all smaller than 255.0, the Viewer will guess that the data likely came from an 8bit image, thus assuming a range of 0-255.</p> <p> TYPE: <code>Range1DLike | None</code> DEFAULT: <code>None</code> </p> <code>point_fill_ratio</code> <p>Scale the radii of the points in the point cloud generated from this image.</p> <p>A fill ratio of 1.0 (the default) means that each point is as big as to touch the center of its neighbor if it is at the same depth, leaving no gaps. A fill ratio of 0.5 means that each point touches the edge of its neighbor if it has the same depth.</p> <p>TODO(#6744): This applies only to 3D views!</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order, used only if the depth image is shown as a 2D image.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.DisconnectedSpace","title":"<code>class DisconnectedSpace</code>","text":"<p>         Bases: <code>DisconnectedSpaceExt</code>, <code>Archetype</code></p> <p>Archetype: Spatially disconnect this entity from its parent.</p> <p>Specifies that the entity path at which this is logged is spatially disconnected from its parent, making it impossible to transform the entity path into its parent's space and vice versa. It only applies to space views that work with spatial transformations, i.e. 2D &amp; 3D space views. This is useful for specifying that a subgraph is independent of the rest of the scene.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.DisconnectedSpace--disconnected-space","title":"Disconnected space:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_disconnected_space\", spawn=True)\n\n# These two points can be projected into the same space..\nrr.log(\"world/room1/point\", rr.Points3D([[0, 0, 0]]))\nrr.log(\"world/room2/point\", rr.Points3D([[1, 1, 1]]))\n\n# ..but this one lives in a completely separate space!\nrr.log(\"world/wormhole\", rr.DisconnectedSpace())\nrr.log(\"world/wormhole/point\", rr.Points3D([[2, 2, 2]]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.DisconnectedSpace.__init__","title":"<code>def __init__(is_disconnected=True)</code>","text":"<p>Disconnect an entity from its parent.</p> PARAMETER DESCRIPTION <code>is_disconnected</code> <p>Whether or not the entity should be disconnected from the rest of the scene. Set to <code>True</code> to disconnect the entity from its parent. Set to <code>False</code> to disable the effects of this archetype, (re-)connecting the entity to its parent again.</p> <p> TYPE: <code>BoolLike</code> DEFAULT: <code>True</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Ellipsoids3D","title":"<code>class Ellipsoids3D</code>","text":"<p>         Bases: <code>Ellipsoids3DExt</code>, <code>Archetype</code></p> <p>Archetype: 3D ellipsoids or spheres.</p> <p>This archetype is for ellipsoids or spheres whose size is a key part of the data (e.g. a bounding sphere). For points whose radii are for the sake of visualization, use <code>archetypes.Points3D</code> instead.</p> <p>Note that orienting and placing the ellipsoids/spheres is handled via <code>[archetypes.InstancePoses3D]</code>. Some of its component are repeated here for convenience. If there's more instance poses than half sizes, the last half size will be repeated for the remaining poses.</p>"},{"location":"common/archetypes/#rerun.archetypes.Ellipsoids3D.__init__","title":"<code>def __init__(*, half_sizes=None, radii=None, centers=None, rotation_axis_angles=None, quaternions=None, colors=None, line_radii=None, fill_mode=None, labels=None, show_labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the Ellipsoids3D archetype.</p> PARAMETER DESCRIPTION <code>half_sizes</code> <p>All half-extents that make up the batch of ellipsoids. Specify this instead of <code>radii</code></p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>radii</code> <p>All radii that make up this batch of spheres. Specify this instead of <code>half_sizes</code></p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>centers</code> <p>Optional center positions of the ellipsoids.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>rotation_axis_angles</code> <p>Rotations via axis + angle.</p> <p>If no rotation is specified, the axes of the boxes align with the axes of the local coordinate system. Note that this uses a <code>components.PoseRotationAxisAngle</code> which is also used by <code>archetypes.InstancePoses3D</code>.</p> <p> TYPE: <code>RotationAxisAngleArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>quaternions</code> <p>Rotations via quaternion.</p> <p>If no rotation is specified, the axes of the boxes align with the axes of the local coordinate system. Note that this uses a <code>components.PoseRotationQuat</code> which is also used by <code>archetypes.InstancePoses3D</code>.</p> <p> TYPE: <code>QuaternionArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the ellipsoids.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>line_radii</code> <p>Optional radii for the lines that make up the ellipsoids.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>fill_mode</code> <p>Optionally choose whether the ellipsoids are drawn with lines or solid.</p> <p> TYPE: <code>FillMode | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the ellipsoids.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>ClassId</code>s for the ellipsoids.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.EncodedImage","title":"<code>class EncodedImage</code>","text":"<p>         Bases: <code>EncodedImageExt</code>, <code>Archetype</code></p> <p>Archetype: An image encoded as e.g. a JPEG or PNG.</p> <p>Rerun also supports uncompressed images with the <code>archetypes.Image</code>. For images that refer to video frames see <code>archetypes.VideoFrameReference</code>.</p> <p>To compress an image, use <code>rerun.Image.compress</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.EncodedImage--encoded_image","title":"<code>encoded_image</code>:","text":"<pre><code>from pathlib import Path\n\nimport rerun as rr\n\nimage_file_path = Path(__file__).parent / \"ferris.png\"\n\nrr.init(\"rerun_example_encoded_image\", spawn=True)\n\nrr.log(\"image\", rr.EncodedImage(path=image_file_path))\n</code></pre>"},{"location":"common/archetypes/#rerun.archetypes.EncodedImage.__init__","title":"<code>def __init__(*, path=None, contents=None, media_type=None, opacity=None, draw_order=None)</code>","text":"<p>Create a new instance of the EncodedImage archetype.</p> PARAMETER DESCRIPTION <code>path</code> <p>A path to an file stored on the local filesystem. Mutually exclusive with <code>contents</code>.</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p>The contents of the file. Can be a BufferedReader, BytesIO, or bytes. Mutually exclusive with <code>path</code>.</p> <p> TYPE: <code>bytes | IO[bytes] | BlobLike | None</code> DEFAULT: <code>None</code> </p> <code>media_type</code> <p>The Media Type of the asset.</p> <p>For instance:  * <code>image/jpeg</code>  * <code>image/png</code></p> <p>If omitted, it will be guessed from the <code>path</code> (if any), or the viewer will try to guess from the contents (magic header). If the media type cannot be guessed, the viewer won't be able to render the asset.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>opacity</code> <p>Opacity of the image, useful for layering several images. Defaults to 1.0 (fully opaque).</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order. Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image","title":"<code>class Image</code>","text":"<p>         Bases: <code>ImageExt</code>, <code>Archetype</code></p> <p>Archetype: A monochrome or color image.</p> <p>See also <code>archetypes.DepthImage</code> and <code>archetypes.SegmentationImage</code>.</p> <p>Rerun also supports compressed images (JPEG, PNG, \u2026), using <code>archetypes.EncodedImage</code>. For images that refer to video frames see <code>archetypes.VideoFrameReference</code>. Compressing images or using video data instead can save a lot of bandwidth and memory.</p> <p>The raw image data is stored as a single buffer of bytes in a <code>components.Blob</code>. The meaning of these bytes is determined by the <code>components.ImageFormat</code> which specifies the resolution and the pixel format (e.g. RGB, RGBA, \u2026).</p> <p>The order of dimensions in the underlying <code>components.Blob</code> follows the typical row-major, interleaved-pixel image format.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Image--image_simple","title":"<code>image_simple</code>:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\n# Create an image with numpy\nimage = np.zeros((200, 300, 3), dtype=np.uint8)\nimage[:, :, 0] = 255\nimage[50:150, 50:150] = (0, 255, 0)\n\nrr.init(\"rerun_example_image\", spawn=True)\n\nrr.log(\"image\", rr.Image(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image--logging-images-with-various-formats","title":"Logging images with various formats:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_image_formats\", spawn=True)\n\n# Simple gradient image, logged in different formats.\nimage = np.array([[[x, min(255, x + y), y] for x in range(0, 256)] for y in range(0, 256)], dtype=np.uint8)\nrr.log(\"image_rgb\", rr.Image(image))\nrr.log(\"image_green_only\", rr.Image(image[:, :, 1], color_model=\"l\"))  # Luminance only\nrr.log(\"image_bgr\", rr.Image(image[:, :, ::-1], color_model=\"bgr\"))  # BGR\n\n# New image with Separate Y/U/V planes with 4:2:2 chroma downsampling\ny = bytes([128 for y in range(0, 256) for x in range(0, 256)])\nu = bytes([x * 2 for y in range(0, 256) for x in range(0, 128)])  # Half horizontal resolution for chroma.\nv = bytes([y for y in range(0, 256) for x in range(0, 128)])\nrr.log(\"image_yuv422\", rr.Image(bytes=y + u + v, width=256, height=256, pixel_format=rr.PixelFormat.Y_U_V16_FullRange))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image.__init__","title":"<code>def __init__(image=None, color_model=None, *, pixel_format=None, datatype=None, bytes=None, width=None, height=None, opacity=None, draw_order=None)</code>","text":"<p>Create a new image with a given format.</p> <p>There are three ways to create an image: * By specifying an <code>image</code> as an appropriately shaped ndarray with an appropriate <code>color_model</code>. * By specifying <code>bytes</code> of an image with a <code>pixel_format</code>, together with <code>width</code>, <code>height</code>. * By specifying <code>bytes</code> of an image with a <code>datatype</code> and <code>color_model</code>, together with <code>width</code>, <code>height</code>.</p> PARAMETER DESCRIPTION <code>image</code> <p>A numpy array or tensor with the image data. Leading and trailing unit-dimensions are ignored, so that <code>1x480x640x3x1</code> is treated as a <code>480x640x3</code>. You also need to specify the <code>color_model</code> of it (e.g. \"RGB\").</p> <p> TYPE: <code>ImageLike | None</code> DEFAULT: <code>None</code> </p> <code>color_model</code> <p>L, RGB, RGBA, BGR, BGRA, etc, specifying how to interpret <code>image</code>.</p> <p> TYPE: <code>ColorModelLike | None</code> DEFAULT: <code>None</code> </p> <code>pixel_format</code> <p>NV12, YUV420, etc. For chroma-downsampling. Requires <code>width</code>, <code>height</code>, and <code>bytes</code>.</p> <p> TYPE: <code>PixelFormatLike | None</code> DEFAULT: <code>None</code> </p> <code>datatype</code> <p>The datatype of the image data. If not specified, it is inferred from the <code>image</code>.</p> <p> TYPE: <code>ChannelDatatypeLike | type | None</code> DEFAULT: <code>None</code> </p> <code>bytes</code> <p>The raw bytes of an image specified by <code>pixel_format</code>.</p> <p> TYPE: <code>bytes | None</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>The width of the image. Only requires for <code>pixel_format</code>.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>height</code> <p>The height of the image. Only requires for <code>pixel_format</code>.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>opacity</code> <p>Optional opacity of the image, in 0-1. Set to 0.5 for a translucent image.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order. Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Image.compress","title":"<code>def compress(jpeg_quality=95)</code>","text":"<p>Compress the given image as a JPEG.</p> <p>JPEG compression works best for photographs. Only U8 RGB and grayscale images are supported, not RGBA. Note that compressing to JPEG costs a bit of CPU time, both when logging and later when viewing them.</p> PARAMETER DESCRIPTION <code>jpeg_quality</code> <p>Higher quality = larger file size. A quality of 95 saves a lot of space, but is still visually very similar.</p> <p> TYPE: <code>int</code> DEFAULT: <code>95</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.InstancePoses3D","title":"<code>class InstancePoses3D</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: One or more transforms between the current entity and its parent. Unlike <code>archetypes.Transform3D</code>, it is not propagated in the transform hierarchy.</p> <p>If both <code>archetypes.InstancePoses3D</code> and <code>archetypes.Transform3D</code> are present, first the tree propagating <code>archetypes.Transform3D</code> is applied, then <code>archetypes.InstancePoses3D</code>.</p> <p>From the point of view of the entity's coordinate system, all components are applied in the inverse order they are listed here. E.g. if both a translation and a max3x3 transform are present, the 3x3 matrix is applied first, followed by the translation.</p> <p>Currently, many visualizers support only a single instance transform per entity. Check archetype documentations for details - if not otherwise specified, only the first instance transform is applied. Some visualizers like the mesh visualizer used for [<code>archetype.Mesh3D</code>], will draw an object for every pose, a behavior also known as \"instancing\".</p> Example"},{"location":"common/archetypes/#rerun.archetypes.InstancePoses3D--regular-instance-transforms-in-tandem","title":"Regular &amp; instance transforms in tandem:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_instance_pose3d_combined\", spawn=True)\n\nrr.set_time_sequence(\"frame\", 0)\n\n# Log a box and points further down in the hierarchy.\nrr.log(\"world/box\", rr.Boxes3D(half_sizes=[[1.0, 1.0, 1.0]]))\nrr.log(\"world/box/points\", rr.Points3D(np.vstack([xyz.ravel() for xyz in np.mgrid[3 * [slice(-10, 10, 10j)]]]).T))\n\nfor i in range(0, 180):\n    rr.set_time_sequence(\"frame\", i)\n\n    # Log a regular transform which affects both the box and the points.\n    rr.log(\"world/box\", rr.Transform3D(rotation_axis_angle=rr.RotationAxisAngle([0, 0, 1], angle=rr.Angle(deg=i * 2))))\n\n    # Log an instance pose which affects only the box.\n    rr.log(\"world/box\", rr.InstancePoses3D(translations=[0, 0, abs(i * 0.1 - 5.0) - 5.0]))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.InstancePoses3D.__init__","title":"<code>def __init__(*, translations=None, rotation_axis_angles=None, quaternions=None, scales=None, mat3x3=None)</code>","text":"<p>Create a new instance of the InstancePoses3D archetype.</p> PARAMETER DESCRIPTION <code>translations</code> <p>Translation vectors.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>rotation_axis_angles</code> <p>Rotations via axis + angle.</p> <p> TYPE: <code>RotationAxisAngleArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>quaternions</code> <p>Rotations via quaternion.</p> <p> TYPE: <code>QuaternionArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>scales</code> <p>Scaling factors.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>mat3x3</code> <p>3x3 transformation matrices.</p> <p> TYPE: <code>Mat3x3ArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D","title":"<code>class LineStrips2D</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: 2D line strips with positions and optional colors, radii, labels, etc.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D--line_strip2d_batch","title":"<code>line_strip2d_batch</code>:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_line_strip2d_batch\", spawn=True)\n\nrr.log(\n    \"strips\",\n    rr.LineStrips2D(\n        [\n            [[0, 0], [2, 1], [4, -1], [6, 0]],\n            [[0, 3], [1, 4], [2, 2], [3, 4], [4, 2], [5, 4], [6, 3]],\n        ],\n        colors=[[255, 0, 0], [0, 255, 0]],\n        radii=[0.025, 0.005],\n        labels=[\"one strip here\", \"and one strip there\"],\n    ),\n)\n\n# Set view bounds:\nrr.send_blueprint(rrb.Spatial2DView(visual_bounds=rrb.VisualBounds2D(x_range=[-1, 7], y_range=[-3, 6])))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D--lines-with-scene-ui-radius-each","title":"Lines with scene &amp; UI radius each:","text":"<pre><code>import rerun as rr\n\nrr.init(\"rerun_example_line_strip3d_ui_radius\", spawn=True)\n\n# A blue line with a scene unit radii of 0.01.\npoints = [[0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 1]]\nrr.log(\n    \"scene_unit_line\",\n    rr.LineStrips3D(\n        [points],\n        # By default, radii are interpreted as world-space units.\n        radii=0.01,\n        colors=[0, 0, 255],\n    ),\n)\n\n# A red line with a ui point radii of 5.\n# UI points are independent of zooming in Views, but are sensitive to the application UI scaling.\n# For 100% ui scaling, UI points are equal to pixels.\npoints = [[3, 0, 0], [3, 0, 1], [4, 0, 0], [4, 0, 1]]\nrr.log(\n    \"ui_points_line\",\n    rr.LineStrips3D(\n        [points],\n        # rr.Radius.ui_points produces radii that the viewer interprets as given in ui points.\n        radii=rr.Radius.ui_points(5.0),\n        colors=[255, 0, 0],\n    ),\n)\n</code></pre>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips2D.__init__","title":"<code>def __init__(strips, *, radii=None, colors=None, labels=None, show_labels=None, draw_order=None, class_ids=None)</code>","text":"<p>Create a new instance of the LineStrips2D archetype.</p> PARAMETER DESCRIPTION <code>strips</code> <p>All the actual 2D line strips that make up the batch.</p> <p> TYPE: <code>LineStrip2DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the line strips.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the line strips.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the line strips.</p> <p>If there's a single label present, it will be placed at the center of the entity. Otherwise, each instance will have its own label.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order of each line strip.</p> <p>Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>components.ClassId</code>s for the lines.</p> <p>The <code>components.ClassId</code> provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D","title":"<code>class LineStrips3D</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: 3D line strips with positions and optional colors, radii, labels, etc.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D--many-strips","title":"Many strips:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_line_strip3d_batch\", spawn=True)\n\nrr.log(\n    \"strips\",\n    rr.LineStrips3D(\n        [\n            [\n                [0, 0, 2],\n                [1, 0, 2],\n                [1, 1, 2],\n                [0, 1, 2],\n            ],\n            [\n                [0, 0, 0],\n                [0, 0, 1],\n                [1, 0, 0],\n                [1, 0, 1],\n                [1, 1, 0],\n                [1, 1, 1],\n                [0, 1, 0],\n                [0, 1, 1],\n            ],\n        ],\n        colors=[[255, 0, 0], [0, 255, 0]],\n        radii=[0.025, 0.005],\n        labels=[\"one strip here\", \"and one strip there\"],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D--lines-with-scene-ui-radius-each","title":"Lines with scene &amp; UI radius each:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_line_strip3d_ui_radius\", spawn=True)\n\n# A blue line with a scene unit radii of 0.01.\npoints = [[0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 1]]\nrr.log(\n    \"scene_unit_line\",\n    rr.LineStrips3D(\n        [points],\n        # By default, radii are interpreted as world-space units.\n        radii=0.01,\n        colors=[0, 0, 255],\n    ),\n)\n\n# A red line with a ui point radii of 5.\n# UI points are independent of zooming in Views, but are sensitive to the application UI scaling.\n# For 100% ui scaling, UI points are equal to pixels.\npoints = [[3, 0, 0], [3, 0, 1], [4, 0, 0], [4, 0, 1]]\nrr.log(\n    \"ui_points_line\",\n    rr.LineStrips3D(\n        [points],\n        # rr.Radius.ui_points produces radii that the viewer interprets as given in ui points.\n        radii=rr.Radius.ui_points(5.0),\n        colors=[255, 0, 0],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.LineStrips3D.__init__","title":"<code>def __init__(strips, *, radii=None, colors=None, labels=None, show_labels=None, class_ids=None)</code>","text":"<p>Create a new instance of the LineStrips3D archetype.</p> PARAMETER DESCRIPTION <code>strips</code> <p>All the actual 3D line strips that make up the batch.</p> <p> TYPE: <code>LineStrip3DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the line strips.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the line strips.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the line strips.</p> <p>If there's a single label present, it will be placed at the center of the entity. Otherwise, each instance will have its own label.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional <code>components.ClassId</code>s for the lines.</p> <p>The <code>components.ClassId</code> provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D","title":"<code>class Mesh3D</code>","text":"<p>         Bases: <code>Mesh3DExt</code>, <code>Archetype</code></p> <p>Archetype: A 3D triangle mesh as specified by its per-mesh and per-vertex properties.</p> <p>See also <code>archetypes.Asset3D</code>.</p> <p>If there are multiple <code>archetypes.InstancePoses3D</code> instances logged to the same entity as a mesh, an instance of the mesh will be drawn for each transform.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D--simple-indexed-3d-mesh","title":"Simple indexed 3D mesh:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_mesh3d_indexed\", spawn=True)\n\nrr.log(\n    \"triangle\",\n    rr.Mesh3D(\n        vertex_positions=[[0.0, 1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n        vertex_normals=[0.0, 0.0, 1.0],\n        vertex_colors=[[0, 0, 255], [0, 255, 0], [255, 0, 0]],\n        triangle_indices=[2, 1, 0],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D--3d-mesh-with-instancing","title":"3D mesh with instancing:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_mesh3d_instancing\", spawn=True)\nrr.set_time_sequence(\"frame\", 0)\n\nrr.log(\n    \"shape\",\n    rr.Mesh3D(\n        vertex_positions=[[1, 1, 1], [-1, -1, 1], [-1, 1, -1], [1, -1, -1]],\n        triangle_indices=[[0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3]],\n        vertex_colors=[[255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 255, 0]],\n    ),\n)\n# This box will not be affected by its parent's instance poses!\nrr.log(\n    \"shape/box\",\n    rr.Boxes3D(half_sizes=[[5.0, 5.0, 5.0]]),\n)\n\nfor i in range(0, 100):\n    rr.set_time_sequence(\"frame\", i)\n    rr.log(\n        \"shape\",\n        rr.InstancePoses3D(\n            translations=[[2, 0, 0], [0, 2, 0], [0, -2, 0], [-2, 0, 0]],\n            rotation_axis_angles=rr.RotationAxisAngle([0, 0, 1], rr.Angle(deg=i * 2)),\n        ),\n    )\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Mesh3D.__init__","title":"<code>def __init__(*, vertex_positions, triangle_indices=None, vertex_normals=None, vertex_colors=None, vertex_texcoords=None, albedo_texture=None, albedo_factor=None, class_ids=None)</code>","text":"<p>Create a new instance of the Mesh3D archetype.</p> PARAMETER DESCRIPTION <code>vertex_positions</code> <p>The positions of each vertex. If no <code>indices</code> are specified, then each triplet of positions is interpreted as a triangle.</p> <p> TYPE: <code>Vec3DArrayLike</code> </p> <code>triangle_indices</code> <p>Optional indices for the triangles that make up the mesh.</p> <p> TYPE: <code>UVec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>vertex_normals</code> <p>An optional normal for each vertex. If specified, this must have as many elements as <code>vertex_positions</code>.</p> <p> TYPE: <code>Vec3DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>vertex_texcoords</code> <p>An optional texture coordinate for each vertex. If specified, this must have as many elements as <code>vertex_positions</code>.</p> <p> TYPE: <code>Vec2DArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>vertex_colors</code> <p>An optional color for each vertex.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>albedo_factor</code> <p>Optional color multiplier for the whole mesh</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p> <code>albedo_texture</code> <p>Optional albedo texture. Used with <code>vertex_texcoords</code> on <code>Mesh3D</code>. Currently supports only sRGB(A) textures, ignoring alpha. (meaning that the texture must have 3 or 4 channels)</p> <p> TYPE: <code>ImageLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the vertices. The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole","title":"<code>class Pinhole</code>","text":"<p>         Bases: <code>PinholeExt</code>, <code>Archetype</code></p> <p>Archetype: Camera perspective projection (a.k.a. intrinsics).</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole--simple-pinhole-camera","title":"Simple pinhole camera:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_pinhole\", spawn=True)\nrng = np.random.default_rng(12345)\n\nimage = rng.uniform(0, 255, size=[3, 3, 3])\nrr.log(\"world/image\", rr.Pinhole(focal_length=3, width=3, height=3))\nrr.log(\"world/image\", rr.Image(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole--perspective-pinhole-camera","title":"Perspective pinhole camera:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_pinhole_perspective\", spawn=True)\n\nrr.log(\n    \"world/cam\",\n    rr.Pinhole(fov_y=0.7853982, aspect_ratio=1.7777778, camera_xyz=rr.ViewCoordinates.RUB, image_plane_distance=0.1),\n)\n\nrr.log(\"world/points\", rr.Points3D([(0.0, 0.0, -0.5), (0.1, 0.1, -0.5), (-0.1, -0.1, -0.5)], radii=0.025))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Pinhole.__init__","title":"<code>def __init__(*, image_from_camera=None, resolution=None, camera_xyz=None, width=None, height=None, focal_length=None, principal_point=None, fov_y=None, aspect_ratio=None, image_plane_distance=None)</code>","text":"<p>Create a new instance of the Pinhole archetype.</p> PARAMETER DESCRIPTION <code>image_from_camera</code> <p>Row-major intrinsics matrix for projecting from camera space to image space. The first two axes are X=Right and Y=Down, respectively. Projection is done along the positive third (Z=Forward) axis. This can be specified instead of <code>focal_length</code> and <code>principal_point</code>.</p> <p> TYPE: <code>Mat3x3Like | None</code> DEFAULT: <code>None</code> </p> <code>resolution</code> <p>Pixel resolution (usually integers) of child image space. Width and height. <code>image_from_camera</code> projects onto the space spanned by <code>(0,0)</code> and <code>resolution - 1</code>.</p> <p> TYPE: <code>Vec2DLike | None</code> DEFAULT: <code>None</code> </p> <code>camera_xyz</code> <p>Sets the view coordinates for the camera.</p> <p>All common values are available as constants on the <code>components.ViewCoordinates</code> class.</p> <p>The default is <code>ViewCoordinates.RDF</code>, i.e. X=Right, Y=Down, Z=Forward, and this is also the recommended setting. This means that the camera frustum will point along the positive Z axis of the parent space, and the cameras \"up\" direction will be along the negative Y axis of the parent space.</p> <p>The camera frustum will point whichever axis is set to <code>F</code> (or the opposite of <code>B</code>). When logging a depth image under this entity, this is the direction the point cloud will be projected. With <code>RDF</code>, the default forward is +Z.</p> <p>The frustum's \"up\" direction will be whichever axis is set to <code>U</code> (or the opposite of <code>D</code>). This will match the negative Y direction of pixel space (all images are assumed to have xyz=RDF). With <code>RDF</code>, the default is up is -Y.</p> <p>The frustum's \"right\" direction will be whichever axis is set to <code>R</code> (or the opposite of <code>L</code>). This will match the positive X direction of pixel space (all images are assumed to have xyz=RDF). With <code>RDF</code>, the default right is +x.</p> <p>Other common formats are <code>RUB</code> (X=Right, Y=Up, Z=Back) and <code>FLU</code> (X=Forward, Y=Left, Z=Up).</p> <p>NOTE: setting this to something else than <code>RDF</code> (the default) will change the orientation of the camera frustum, and make the pinhole matrix not match up with the coordinate system of the pinhole entity.</p> <p>The pinhole matrix (the <code>image_from_camera</code> argument) always project along the third (Z) axis, but will be re-oriented to project along the forward axis of the <code>camera_xyz</code> argument.</p> <p> TYPE: <code>ViewCoordinatesLike | None</code> DEFAULT: <code>None</code> </p> <code>focal_length</code> <p>The focal length of the camera in pixels. This is the diagonal of the projection matrix. Set one value for symmetric cameras, or two values (X=Right, Y=Down) for anamorphic cameras.</p> <p> TYPE: <code>float | ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>principal_point</code> <p>The center of the camera in pixels. The default is half the width and height. This is the last column of the projection matrix. Expects two values along the dimensions Right and Down</p> <p> TYPE: <code>ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>Width of the image in pixels.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p> <code>height</code> <p>Height of the image in pixels.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p> <code>fov_y</code> <p>Vertical field of view in radians.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>aspect_ratio</code> <p>Aspect ratio (width/height).</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>image_plane_distance</code> <p>The distance from the camera origin to the image plane when the projection is shown in a 3D viewer. This is only used for visualization purposes, and does not affect the projection itself.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points2D","title":"<code>class Points2D</code>","text":"<p>         Bases: <code>Points2DExt</code>, <code>Archetype</code></p> <p>Archetype: A 2D point cloud with positions and optional colors, radii, labels, etc.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Points2D--randomly-distributed-2d-points-with-varying-color-and-radius","title":"Randomly distributed 2D points with varying color and radius:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\nfrom numpy.random import default_rng\n\nrr.init(\"rerun_example_points2d_random\", spawn=True)\nrng = default_rng(12345)\n\npositions = rng.uniform(-3, 3, size=[10, 2])\ncolors = rng.uniform(0, 255, size=[10, 4])\nradii = rng.uniform(0, 1, size=[10])\n\nrr.log(\"random\", rr.Points2D(positions, colors=colors, radii=radii))\n\n# Set view bounds:\nrr.send_blueprint(rrb.Spatial2DView(visual_bounds=rrb.VisualBounds2D(x_range=[-4, 4], y_range=[-4, 4])))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points2D--log-points-with-radii-given-in-ui-points","title":"Log points with radii given in UI points:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_points2d_ui_radius\", spawn=True)\n\n# Two blue points with scene unit radii of 0.1 and 0.3.\nrr.log(\n    \"scene_units\",\n    rr.Points2D(\n        [[0, 0], [0, 1]],\n        # By default, radii are interpreted as world-space units.\n        radii=[0.1, 0.3],\n        colors=[0, 0, 255],\n    ),\n)\n\n# Two red points with ui point radii of 40 and 60.\n# UI points are independent of zooming in Views, but are sensitive to the application UI scaling.\n# For 100% ui scaling, UI points are equal to pixels.\nrr.log(\n    \"ui_points\",\n    rr.Points2D(\n        [[1, 0], [1, 1]],\n        # rr.Radius.ui_points produces radii that the viewer interprets as given in ui points.\n        radii=rr.Radius.ui_points([40.0, 60.0]),\n        colors=[255, 0, 0],\n    ),\n)\n\n# Set view bounds:\nrr.send_blueprint(rrb.Spatial2DView(visual_bounds=rrb.VisualBounds2D(x_range=[-1, 2], y_range=[-1, 2])))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points2D.__init__","title":"<code>def __init__(positions, *, radii=None, colors=None, labels=None, show_labels=None, draw_order=None, class_ids=None, keypoint_ids=None)</code>","text":"<p>Create a new instance of the Points2D archetype.</p> PARAMETER DESCRIPTION <code>positions</code> <p>All the 2D positions at which the point cloud shows points.</p> <p> TYPE: <code>Vec2DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the points, effectively turning them into circles.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p>The colors are interpreted as RGB or RGBA in sRGB gamma-space,  As either 0-1 floats or 0-255 integers, with separate alpha.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the points.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>draw_order</code> <p>An optional floating point value that specifies the 2D drawing order.  Objects with higher values are drawn on top of those with lower values.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>keypoint_ids</code> <p>Optional keypoint IDs for the points, identifying them within a class.</p> <p>If keypoint IDs are passed in but no class IDs were specified, the class ID will  default to 0.  This is useful to identify points within a single classification (which is identified  with <code>class_id</code>).  E.g. the classification might be 'Person' and the keypoints refer to joints on a  detected skeleton.</p> <p> TYPE: <code>KeypointIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D","title":"<code>class Points3D</code>","text":"<p>         Bases: <code>Points3DExt</code>, <code>Archetype</code></p> <p>Archetype: A 3D point cloud with positions and optional colors, radii, labels, etc.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D--randomly-distributed-3d-points-with-varying-color-and-radius","title":"Randomly distributed 3D points with varying color and radius:","text":"<p><pre><code>import rerun as rr\nfrom numpy.random import default_rng\n\nrr.init(\"rerun_example_points3d_random\", spawn=True)\nrng = default_rng(12345)\n\npositions = rng.uniform(-5, 5, size=[10, 3])\ncolors = rng.uniform(0, 255, size=[10, 3])\nradii = rng.uniform(0, 1, size=[10])\n\nrr.log(\"random\", rr.Points3D(positions, colors=colors, radii=radii))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D--log-points-with-radii-given-in-ui-points","title":"Log points with radii given in UI points:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_points3d_ui_radius\", spawn=True)\n\n# Two blue points with scene unit radii of 0.1 and 0.3.\nrr.log(\n    \"scene_units\",\n    rr.Points3D(\n        [[0, 1, 0], [1, 1, 1]],\n        # By default, radii are interpreted as world-space units.\n        radii=[0.1, 0.3],\n        colors=[0, 0, 255],\n    ),\n)\n\n# Two red points with ui point radii of 40 and 60.\n# UI points are independent of zooming in Views, but are sensitive to the application UI scaling.\n# For 100% ui scaling, UI points are equal to pixels.\nrr.log(\n    \"ui_points\",\n    rr.Points3D(\n        [[0, 0, 0], [1, 0, 1]],\n        # rr.Radius.ui_points produces radii that the viewer interprets as given in ui points.\n        radii=rr.Radius.ui_points([40.0, 60.0]),\n        colors=[255, 0, 0],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D--send-several-point-clouds-with-varying-point-count-over-time-in-a-single-call","title":"Send several point clouds with varying point count over time in a single call:","text":"<p><pre><code>from __future__ import annotations\n\nimport numpy as np\nimport rerun as rr\n\nrr.init(\"rerun_example_send_columns_arrays\", spawn=True)\n\n# Prepare a point cloud that evolves over time 5 timesteps, changing the number of points in the process.\ntimes = np.arange(10, 15, 1.0)\npositions = [\n    [[1.0, 0.0, 1.0], [0.5, 0.5, 2.0]],\n    [[1.5, -0.5, 1.5], [1.0, 1.0, 2.5], [-0.5, 1.5, 1.0], [-1.5, 0.0, 2.0]],\n    [[2.0, 0.0, 2.0], [1.5, -1.5, 3.0], [0.0, -2.0, 2.5], [1.0, -1.0, 3.5]],\n    [[-2.0, 0.0, 2.0], [-1.5, 1.5, 3.0], [-1.0, 1.0, 3.5]],\n    [[1.0, -1.0, 1.0], [2.0, -2.0, 2.0], [3.0, -1.0, 3.0], [2.0, 0.0, 4.0]],\n]\npositions_arr = np.concatenate(positions)\n\n# At each time stamp, all points in the cloud share the same but changing color.\ncolors = [0xFF0000FF, 0x00FF00FF, 0x0000FFFF, 0xFFFF00FF, 0x00FFFFFF]\n\nrr.send_columns(\n    \"points\",\n    times=[rr.TimeSecondsColumn(\"time\", times)],\n    components=[\n        rr.Points3D.indicator(),\n        rr.components.Position3DBatch(positions_arr).partition([len(row) for row in positions]),\n        rr.components.ColorBatch(colors),\n    ],\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Points3D.__init__","title":"<code>def __init__(positions, *, radii=None, colors=None, labels=None, show_labels=None, class_ids=None, keypoint_ids=None)</code>","text":"<p>Create a new instance of the Points3D archetype.</p> PARAMETER DESCRIPTION <code>positions</code> <p>All the 3D positions at which the point cloud shows points.</p> <p> TYPE: <code>Vec3DArrayLike</code> </p> <code>radii</code> <p>Optional radii for the points, effectively turning them into circles.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>colors</code> <p>Optional colors for the points.</p> <p>The colors are interpreted as RGB or RGBA in sRGB gamma-space,  As either 0-1 floats or 0-255 integers, with separate alpha.</p> <p> TYPE: <code>Rgba32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Optional text labels for the points.</p> <p> TYPE: <code>Utf8ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>show_labels</code> <p>Optional choice of whether the text labels should be shown by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>class_ids</code> <p>Optional class Ids for the points.</p> <p>The class ID provides colors and labels if not specified explicitly.</p> <p> TYPE: <code>ClassIdArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>keypoint_ids</code> <p>Optional keypoint IDs for the points, identifying them within a class.</p> <p>If keypoint IDs are passed in but no class IDs were specified, the class ID will  default to 0.  This is useful to identify points within a single classification (which is identified  with <code>class_id</code>).  E.g. the classification might be 'Person' and the keypoints refer to joints on a  detected skeleton.</p> <p> TYPE: <code>KeypointIdArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Scalar","title":"<code>class Scalar</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: A double-precision scalar, e.g. for use for time-series plots.</p> <p>The current timeline value will be used for the time/X-axis, hence scalars cannot be static.</p> <p>When used to produce a plot, this archetype is used to provide the data that is referenced by <code>archetypes.SeriesLine</code> or <code>archetypes.SeriesPoint</code>. You can do this by logging both archetypes to the same path, or alternatively configuring the plot-specific archetypes through the blueprint.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Scalar--simple-line-plot","title":"Simple line plot:","text":"<p><pre><code>import math\n\nimport rerun as rr\n\nrr.init(\"rerun_example_scalar\", spawn=True)\n\n# Log the data on a timeline called \"step\".\nfor step in range(0, 64):\n    rr.set_time_sequence(\"step\", step)\n    rr.log(\"scalar\", rr.Scalar(math.sin(step / 10.0)))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Scalar.__init__","title":"<code>def __init__(scalar)</code>","text":"<p>Create a new instance of the Scalar archetype.</p> PARAMETER DESCRIPTION <code>scalar</code> <p>The scalar value to log.</p> <p> TYPE: <code>Float64Like</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.SegmentationImage","title":"<code>class SegmentationImage</code>","text":"<p>         Bases: <code>SegmentationImageExt</code>, <code>Archetype</code></p> <p>Archetype: An image made up of integer <code>components.ClassId</code>s.</p> <p>Each pixel corresponds to a <code>components.ClassId</code> that will be mapped to a color based on annotation context.</p> <p>In the case of floating point images, the label will be looked up based on rounding to the nearest integer value.</p> <p>See also <code>archetypes.AnnotationContext</code> to associate each class with a color and a label.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.SegmentationImage--simple-segmentation-image","title":"Simple segmentation image:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\n# Create a segmentation image\nimage = np.zeros((8, 12), dtype=np.uint8)\nimage[0:4, 0:6] = 1\nimage[4:8, 6:12] = 2\n\nrr.init(\"rerun_example_segmentation_image\", spawn=True)\n\n# Assign a label and color to each class\nrr.log(\"/\", rr.AnnotationContext([(1, \"red\", (255, 0, 0)), (2, \"green\", (0, 255, 0))]), static=True)\n\nrr.log(\"image\", rr.SegmentationImage(image))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesLine","title":"<code>class SeriesLine</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Define the style properties for a line series in a chart.</p> <p>This archetype only provides styling information and should be logged as static when possible. The underlying data needs to be logged to the same entity-path using <code>archetypes.Scalar</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.SeriesLine--line-series","title":"Line series:","text":"<p><pre><code>from math import cos, sin, tau\n\nimport rerun as rr\n\nrr.init(\"rerun_example_series_line_style\", spawn=True)\n\n# Set up plot styling:\n# They are logged as static as they don't change over time and apply to all timelines.\n# Log two lines series under a shared root so that they show in the same plot by default.\nrr.log(\"trig/sin\", rr.SeriesLine(color=[255, 0, 0], name=\"sin(0.01t)\", width=2), static=True)\nrr.log(\"trig/cos\", rr.SeriesLine(color=[0, 255, 0], name=\"cos(0.01t)\", width=4), static=True)\n\n# Log the data on a timeline called \"step\".\nfor t in range(0, int(tau * 2 * 100.0)):\n    rr.set_time_sequence(\"step\", t)\n\n    rr.log(\"trig/sin\", rr.Scalar(sin(float(t) / 100.0)))\n    rr.log(\"trig/cos\", rr.Scalar(cos(float(t) / 100.0)))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesLine.__init__","title":"<code>def __init__(*, color=None, width=None, name=None, aggregation_policy=None)</code>","text":"<p>Create a new instance of the SeriesLine archetype.</p> PARAMETER DESCRIPTION <code>color</code> <p>Color for the corresponding series.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p> <code>width</code> <p>Stroke width for the corresponding series.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Display name of the series.</p> <p>Used in the legend.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>aggregation_policy</code> <p>Configures the zoom-dependent scalar aggregation.</p> <p>This is done only if steps on the X axis go below a single pixel, i.e. a single pixel covers more than one tick worth of data. It can greatly improve performance (and readability) in such situations as it prevents overdraw.</p> <p> TYPE: <code>AggregationPolicyLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesPoint","title":"<code>class SeriesPoint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Define the style properties for a point series in a chart.</p> <p>This archetype only provides styling information and should be logged as static when possible. The underlying data needs to be logged to the same entity-path using <code>archetypes.Scalar</code>.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.SeriesPoint--point-series","title":"Point series:","text":"<p><pre><code>from math import cos, sin, tau\n\nimport rerun as rr\n\nrr.init(\"rerun_example_series_point_style\", spawn=True)\n\n# Set up plot styling:\n# They are logged as static as they don't change over time and apply to all timelines.\n# Log two point series under a shared root so that they show in the same plot by default.\nrr.log(\n    \"trig/sin\",\n    rr.SeriesPoint(\n        color=[255, 0, 0],\n        name=\"sin(0.01t)\",\n        marker=\"circle\",\n        marker_size=4,\n    ),\n    static=True,\n)\nrr.log(\n    \"trig/cos\",\n    rr.SeriesPoint(\n        color=[0, 255, 0],\n        name=\"cos(0.01t)\",\n        marker=\"cross\",\n        marker_size=2,\n    ),\n    static=True,\n)\n\n# Log the data on a timeline called \"step\".\nfor t in range(0, int(tau * 2 * 10.0)):\n    rr.set_time_sequence(\"step\", t)\n\n    rr.log(\"trig/sin\", rr.Scalar(sin(float(t) / 10.0)))\n    rr.log(\"trig/cos\", rr.Scalar(cos(float(t) / 10.0)))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.SeriesPoint.__init__","title":"<code>def __init__(*, color=None, marker=None, name=None, marker_size=None)</code>","text":"<p>Create a new instance of the SeriesPoint archetype.</p> PARAMETER DESCRIPTION <code>color</code> <p>Color for the corresponding series.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p> <code>marker</code> <p>What shape to use to represent the point</p> <p> TYPE: <code>MarkerShapeLike | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Display name of the series.</p> <p>Used in the legend.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>marker_size</code> <p>Size of the marker.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Tensor","title":"<code>class Tensor</code>","text":"<p>         Bases: <code>TensorExt</code>, <code>Archetype</code></p> <p>Archetype: An N-dimensional array of numbers.</p> <p>It's not currently possible to use <code>send_columns</code> with tensors since construction of <code>rerun.components.TensorDataBatch</code> does not support more than a single element. This will be addressed as part of https://github.com/rerun-io/rerun/issues/6832.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.Tensor--simple-tensor","title":"Simple tensor:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\n\ntensor = np.random.randint(0, 256, (8, 6, 3, 5), dtype=np.uint8)  # 4-dimensional tensor\n\nrr.init(\"rerun_example_tensor\", spawn=True)\n\n# Log the tensor, assigning names to each dimension\nrr.log(\"tensor\", rr.Tensor(tensor, dim_names=(\"width\", \"height\", \"channel\", \"batch\")))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Tensor.__init__","title":"<code>def __init__(data=None, *, dim_names=None, value_range=None)</code>","text":"<p>Construct a <code>Tensor</code> archetype.</p> <p>The <code>Tensor</code> archetype internally contains a single component: <code>TensorData</code>.</p> <p>See the <code>TensorData</code> constructor for more advanced options to interpret buffers as <code>TensorData</code> of varying shapes.</p> <p>For simple cases, you can pass array objects and optionally specify the names of the dimensions. The shape of the <code>TensorData</code> will be inferred from the array.</p> PARAMETER DESCRIPTION <code>self</code> <p>The TensorData object to construct.</p> <p> TYPE: <code>Any</code> </p> <code>data</code> <p>A TensorData object, or type that can be converted to a numpy array.</p> <p> TYPE: <code>TensorDataLike | TensorLike | None</code> DEFAULT: <code>None</code> </p> <code>dim_names</code> <p>The names of the tensor dimensions when generating the shape from an array.</p> <p> TYPE: <code>Sequence[str | None] | None</code> DEFAULT: <code>None</code> </p> <code>value_range</code> <p>The range of values to use for colormapping.</p> <p>If not specified, the range will be estimated from the data.</p> <p> TYPE: <code>Range1DLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextDocument","title":"<code>class TextDocument</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: A text element intended to be displayed in its own text box.</p> <p>Supports raw text and markdown.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.TextDocument--markdown-text-document","title":"Markdown text document:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_text_document\", spawn=True)\n\nrr.log(\"text_document\", rr.TextDocument(\"Hello, TextDocument!\"))\n\nrr.log(\n    \"markdown\",\n    rr.TextDocument(\n        '''\n# Hello Markdown!\n[Click here to see the raw text](recording://markdown:Text).\n\nBasic formatting:\n\n| **Feature**       | **Alternative** |\n| ----------------- | --------------- |\n| Plain             |                 |\n| *italics*         | _italics_       |\n| **bold**          | __bold__        |\n| ~~strikethrough~~ |                 |\n| `inline code`     |                 |\n\n----------------------------------\n\n## Support\n- [x] [Commonmark](https://commonmark.org/help/) support\n- [x] GitHub-style strikethrough, tables, and checkboxes\n- Basic syntax highlighting for:\n  - [x] C and C++\n  - [x] Python\n  - [x] Rust\n  - [ ] Other languages\n\n## Links\nYou can link to [an entity](recording://markdown),\na [specific instance of an entity](recording://markdown[#0]),\nor a [specific component](recording://markdown:Text).\n\nOf course you can also have [normal https links](https://github.com/rerun-io/rerun), e.g. &lt;https://rerun.io&gt;.\n\n## Image\n![A random image](https://picsum.photos/640/480)\n'''.strip(),\n        media_type=rr.MediaType.MARKDOWN,\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextDocument.__init__","title":"<code>def __init__(text, *, media_type=None)</code>","text":"<p>Create a new instance of the TextDocument archetype.</p> PARAMETER DESCRIPTION <code>text</code> <p>Contents of the text document.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>media_type</code> <p>The Media Type of the text.</p> <p>For instance: * <code>text/plain</code> * <code>text/markdown</code></p> <p>If omitted, <code>text/plain</code> is assumed.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextLog","title":"<code>class TextLog</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: A log entry in a text log, comprised of a text body and its log level.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.TextLog--text_log_integration","title":"<code>text_log_integration</code>:","text":"<p><pre><code>import logging\n\nimport rerun as rr\n\nrr.init(\"rerun_example_text_log_integration\", spawn=True)\n\n# Log a text entry directly\nrr.log(\"logs\", rr.TextLog(\"this entry has loglevel TRACE\", level=rr.TextLogLevel.TRACE))\n\n# Or log via a logging handler\nlogging.getLogger().addHandler(rr.LoggingHandler(\"logs/handler\"))\nlogging.getLogger().setLevel(-1)\nlogging.info(\"This INFO log got added through the standard logging interface\")\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.TextLog.__init__","title":"<code>def __init__(text, *, level=None, color=None)</code>","text":"<p>Create a new instance of the TextLog archetype.</p> PARAMETER DESCRIPTION <code>text</code> <p>The body of the message.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>level</code> <p>The verbosity level of the message.</p> <p>This can be used to filter the log messages in the Rerun Viewer.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Optional color to use for the log line in the Rerun Viewer.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.Transform3D","title":"<code>class Transform3D</code>","text":"<p>         Bases: <code>Transform3DExt</code>, <code>Archetype</code></p> <p>Archetype: A transform between two 3D spaces, i.e. a pose.</p> <p>From the point of view of the entity's coordinate system, all components are applied in the inverse order they are listed here. E.g. if both a translation and a max3x3 transform are present, the 3x3 matrix is applied first, followed by the translation.</p> <p>Whenever you log this archetype, it will write all components, even if you do not explicitly set them. This means that if you first log a transform with only a translation, and then log one with only a rotation, it will be resolved to a transform with only a rotation.</p> <p>For transforms that affect only a single entity and do not propagate along the entity tree refer to <code>archetypes.InstancePoses3D</code>.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.Transform3D--variety-of-3d-transforms","title":"Variety of 3D transforms:","text":"<p><pre><code>from math import pi\n\nimport rerun as rr\nfrom rerun.datatypes import Angle, RotationAxisAngle\n\nrr.init(\"rerun_example_transform3d\", spawn=True)\n\narrow = rr.Arrows3D(origins=[0, 0, 0], vectors=[0, 1, 0])\n\nrr.log(\"base\", arrow)\n\nrr.log(\"base/translated\", rr.Transform3D(translation=[1, 0, 0]))\nrr.log(\"base/translated\", arrow)\n\nrr.log(\n    \"base/rotated_scaled\",\n    rr.Transform3D(\n        rotation=RotationAxisAngle(axis=[0, 0, 1], angle=Angle(rad=pi / 4)),\n        scale=2,\n    ),\n)\nrr.log(\"base/rotated_scaled\", arrow)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Transform3D--transform-hierarchy","title":"Transform hierarchy:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_transform3d_hierarchy\", spawn=True)\n\n# One space with the sun in the center, and another one with the planet.\nrr.send_blueprint(\n    rrb.Horizontal(rrb.Spatial3DView(origin=\"sun\"), rrb.Spatial3DView(origin=\"sun/planet\", contents=\"sun/**\"))\n)\n\nrr.set_time_seconds(\"sim_time\", 0)\n\n# Planetary motion is typically in the XY plane.\nrr.log(\"/\", rr.ViewCoordinates.RIGHT_HAND_Z_UP, static=True)\n\n# Setup points, all are in the center of their own space:\n# TODO(#1361): Should use spheres instead of points.\nrr.log(\"sun\", rr.Points3D([0.0, 0.0, 0.0], radii=1.0, colors=[255, 200, 10]))\nrr.log(\"sun/planet\", rr.Points3D([0.0, 0.0, 0.0], radii=0.4, colors=[40, 80, 200]))\nrr.log(\"sun/planet/moon\", rr.Points3D([0.0, 0.0, 0.0], radii=0.15, colors=[180, 180, 180]))\n\n# Draw fixed paths where the planet &amp; moon move.\nd_planet = 6.0\nd_moon = 3.0\nangles = np.arange(0.0, 1.01, 0.01) * np.pi * 2\ncircle = np.array([np.sin(angles), np.cos(angles), angles * 0.0]).transpose()\nrr.log(\"sun/planet_path\", rr.LineStrips3D(circle * d_planet))\nrr.log(\"sun/planet/moon_path\", rr.LineStrips3D(circle * d_moon))\n\n# Movement via transforms.\nfor i in range(0, 6 * 120):\n    time = i / 120.0\n    rr.set_time_seconds(\"sim_time\", time)\n    r_moon = time * 5.0\n    r_planet = time * 2.0\n\n    rr.log(\n        \"sun/planet\",\n        rr.Transform3D(\n            translation=[np.sin(r_planet) * d_planet, np.cos(r_planet) * d_planet, 0.0],\n            rotation=rr.RotationAxisAngle(axis=(1, 0, 0), degrees=20),\n        ),\n    )\n    rr.log(\n        \"sun/planet/moon\",\n        rr.Transform3D(\n            translation=[np.cos(r_moon) * d_moon, np.sin(r_moon) * d_moon, 0.0],\n            from_parent=True,\n        ),\n    )\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.Transform3D.__init__","title":"<code>def __init__(*, translation=None, rotation=None, rotation_axis_angle=None, quaternion=None, scale=None, mat3x3=None, from_parent=None, relation=None, axis_length=None)</code>","text":"<p>Create a new instance of the Transform3D archetype.</p> PARAMETER DESCRIPTION <code>translation</code> <p>3D translation vector.</p> <p> TYPE: <code>Vec3DLike | None</code> DEFAULT: <code>None</code> </p> <code>rotation</code> <p>3D rotation, either a quaternion or an axis-angle. Mutually exclusive with <code>quaternion</code> and <code>rotation_axis_angle</code>.</p> <p> TYPE: <code>QuaternionLike | RotationAxisAngleLike | None</code> DEFAULT: <code>None</code> </p> <code>rotation_axis_angle</code> <p>Axis-angle representing rotation.</p> <p>Mutually exclusive with <code>rotation</code> parameter.</p> <p> TYPE: <code>RotationAxisAngleLike | None</code> DEFAULT: <code>None</code> </p> <code>quaternion</code> <p>Quaternion representing rotation.</p> <p>Mutually exclusive with <code>rotation</code> parameter.</p> <p> TYPE: <code>QuaternionLike | None</code> DEFAULT: <code>None</code> </p> <code>scale</code> <p>3D scale.</p> <p> TYPE: <code>Vec3DLike | Float32Like | None</code> DEFAULT: <code>None</code> </p> <code>mat3x3</code> <p>3x3 matrix representing scale and rotation, applied after translation. Not compatible with <code>rotation</code> and <code>scale</code> parameters. TODO(#3559): Support 4x4 and 4x3 matrices.</p> <p> TYPE: <code>Mat3x3Like | None</code> DEFAULT: <code>None</code> </p> <code>from_parent</code> <p>If true, the transform maps from the parent space to the space where the transform was logged. Otherwise, the transform maps from the space to its parent. Deprecated in favor of <code>relation=rerun.TransformRelation.ChildFromParent</code>.</p> <p>Mutually exclusive with <code>relation</code>.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>relation</code> <p>Allows to explicitly specify the transform's relationship with the parent entity. Otherwise, the transform maps from the space to its parent.</p> <p>Mutually exclusive with <code>from_parent</code>.</p> <p> TYPE: <code>TransformRelationLike | None</code> DEFAULT: <code>None</code> </p> <code>axis_length</code> <p>Visual length of the 3 axes.</p> <p>The length is interpreted in the local coordinate system of the transform. If the transform is scaled, the axes will be scaled accordingly.</p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.VideoFrameReference","title":"<code>class VideoFrameReference</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: References a single video frame.</p> <p>Used to display individual video frames from a <code>archetypes.AssetVideo</code>. To show an entire video, a video frame reference for each frame of the video should be logged.</p> <p>See https://rerun.io/docs/reference/video for details of what is and isn't supported.</p> <p>Examples:</p>"},{"location":"common/archetypes/#rerun.archetypes.VideoFrameReference--video-with-automatically-determined-frames","title":"Video with automatically determined frames:","text":"<p><pre><code># TODO(#7298): \u26a0\ufe0f Video is currently only supported in the Rerun web viewer.\n\nimport sys\n\nimport rerun as rr\n\nif len(sys.argv) &lt; 2:\n    # TODO(#7354): Only mp4 is supported for now.\n    print(f\"Usage: {sys.argv[0]} &lt;path_to_video.[mp4]&gt;\")\n    sys.exit(1)\n\nrr.init(\"rerun_example_asset_video_auto_frames\", spawn=True)\n\n# Log video asset which is referred to by frame references.\nvideo_asset = rr.AssetVideo(path=sys.argv[1])\nrr.log(\"video\", video_asset, static=True)\n\n# Send automatically determined video frame timestamps.\nframe_timestamps_ns = video_asset.read_frame_timestamps_ns()\nrr.send_columns(\n    \"video\",\n    # Note timeline values don't have to be the same as the video timestamps.\n    times=[rr.TimeNanosColumn(\"video_time\", frame_timestamps_ns)],\n    components=[rr.VideoFrameReference.indicator(), rr.components.VideoTimestamp.nanoseconds(frame_timestamps_ns)],\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.VideoFrameReference--demonstrates-manual-use-of-video-frame-references","title":"Demonstrates manual use of video frame references:","text":"<p><pre><code># TODO(#7298): \u26a0\ufe0f Video is currently only supported in the Rerun web viewer.\n\nimport sys\n\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nif len(sys.argv) &lt; 2:\n    # TODO(#7354): Only mp4 is supported for now.\n    print(f\"Usage: {sys.argv[0]} &lt;path_to_video.[mp4]&gt;\")\n    sys.exit(1)\n\nrr.init(\"rerun_example_asset_video_manual_frames\", spawn=True)\n\n# Log video asset which is referred to by frame references.\nrr.log(\"video_asset\", rr.AssetVideo(path=sys.argv[1]), static=True)\n\n# Create two entities, showing the same video frozen at different times.\nrr.log(\n    \"frame_1s\",\n    rr.VideoFrameReference(\n        timestamp=rr.components.VideoTimestamp(seconds=1.0),\n        video_reference=\"video_asset\",\n    ),\n)\nrr.log(\n    \"frame_2s\",\n    rr.VideoFrameReference(\n        timestamp=rr.components.VideoTimestamp(seconds=2.0),\n        video_reference=\"video_asset\",\n    ),\n)\n\n# Send blueprint that shows two 2D views next to each other.\nrr.send_blueprint(rrb.Horizontal(rrb.Spatial2DView(origin=\"frame_1s\"), rrb.Spatial2DView(origin=\"frame_2s\")))\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.VideoFrameReference.__init__","title":"<code>def __init__(timestamp, *, video_reference=None)</code>","text":"<p>Create a new instance of the VideoFrameReference archetype.</p> PARAMETER DESCRIPTION <code>timestamp</code> <p>References the closest video frame to this timestamp.</p> <p>Note that this uses the closest video frame instead of the latest at this timestamp in order to be more forgiving of rounding errors for inprecise timestamp types.</p> <p> TYPE: <code>VideoTimestampLike</code> </p> <code>video_reference</code> <p>Optional reference to an entity with a <code>archetypes.AssetVideo</code>.</p> <p>If none is specified, the video is assumed to be at the same entity. Note that blueprint overrides on the referenced video will be ignored regardless, as this is always interpreted as a reference to the data store.</p> <p>For a series of video frame references, it is recommended to specify this path only once at the beginning of the series and then rely on latest-at query semantics to keep the video reference active.</p> <p> TYPE: <code>EntityPathLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/archetypes/#rerun.archetypes.ViewCoordinates","title":"<code>class ViewCoordinates</code>","text":"<p>         Bases: <code>ViewCoordinatesExt</code>, <code>Archetype</code></p> <p>Archetype: How we interpret the coordinate system of an entity/space.</p> <p>For instance: What is \"up\"? What does the Z axis mean?</p> <p>The three coordinates are always ordered as [x, y, z].</p> <p>For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points down, and the Z axis points forward.</p> <p>Make sure that this archetype is logged at or above the origin entity path of your 3D views.</p> <p>\u26a0 Rerun does not yet support left-handed coordinate systems.</p> Example"},{"location":"common/archetypes/#rerun.archetypes.ViewCoordinates--view-coordinates-for-adjusting-the-eye-camera","title":"View coordinates for adjusting the eye camera:","text":"<p><pre><code>import rerun as rr\n\nrr.init(\"rerun_example_view_coordinates\", spawn=True)\n\nrr.log(\"world\", rr.ViewCoordinates.RIGHT_HAND_Z_UP, static=True)  # Set an up-axis\nrr.log(\n    \"world/xyz\",\n    rr.Arrows3D(\n        vectors=[[1, 0, 0], [0, 1, 0], [0, 0, 1]],\n        colors=[[255, 0, 0], [0, 255, 0], [0, 0, 255]],\n    ),\n)\n</code></pre> </p>"},{"location":"common/archetypes/#rerun.archetypes.ViewCoordinates.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the ViewCoordinates archetype.</p> PARAMETER DESCRIPTION <code>xyz</code> <p>The directions of the [x, y, z] axes.</p> <p> TYPE: <code>ViewCoordinatesLike</code> </p>"},{"location":"common/blueprint_apis/","title":"APIs","text":""},{"location":"common/blueprint_apis/#rerun.blueprint","title":"<code>rerun.blueprint</code>","text":""},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPart","title":"<code>BlueprintPart = Union[ContainerLike, TopPanel, BlueprintPanel, SelectionPanel, TimePanel]</code>  <code>module-attribute</code>","text":"<p>The types that make up a blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.ContainerLike","title":"<code>ContainerLike = Union[Container, SpaceView]</code>  <code>module-attribute</code>","text":"<p>A type that can be converted to a container.</p> <p>These types all implement a <code>to_container()</code> method that wraps them in the necessary helper classes.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint","title":"<code>class Blueprint</code>","text":"<p>The top-level description of the viewer blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.__init__","title":"<code>def __init__(*parts, auto_layout=None, auto_space_views=None, collapse_panels=False)</code>","text":"<p>Construct a new blueprint from the given parts.</p> <p>Each BlueprintPart can be one of the following:</p> <ul> <li>ContainerLike</li> <li>BlueprintPanel</li> <li>SelectionPanel</li> <li>TimePanel</li> </ul> <p>It is an error to provide more than one of instance of any of the panel types.</p> <p>Blueprints only have a single top-level \"root\" container that defines the viewport. If you provide multiple <code>ContainerLike</code> instances, they will be combined under a single root <code>Tab</code> container.</p> PARAMETER DESCRIPTION <code>*parts</code> <p>The parts of the blueprint.</p> <p> TYPE: <code>BlueprintPart</code> DEFAULT: <code>()</code> </p> <code>auto_layout</code> <p>Whether to automatically layout the viewport. If <code>True</code>, the container layout will be reset whenever a new space view is added to the viewport. Defaults to <code>False</code>. Defaults to <code>False</code> unless no Containers or SpaceViews are provided, in which case it defaults to <code>True</code>. If you want to create a completely empty Blueprint, you must explicitly set this to <code>False</code>.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>auto_space_views</code> <p>Whether to automatically add space views to the viewport. If <code>True</code>, the viewport will automatically add space views based on content in the data store. Defaults to <code>False</code> unless no Containers or SpaceViews are provided, in which case it defaults to <code>True</code>. If you want to create a completely empty Blueprint, you must explicitly set this to <code>False</code>.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>collapse_panels</code> <p>Whether to collapse panels in the viewer. Defaults to <code>False</code>.</p> <p>This fully hides the blueprint/selection panels, and shows the simplified time panel.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.connect","title":"<code>def connect(application_id, *, addr=None, make_active=True, make_default=True)</code>","text":"<p>Connect to a remote Rerun Viewer on the given ip:port and send this blueprint.</p> PARAMETER DESCRIPTION <code>application_id</code> <p>The application ID to use for this blueprint. This must match the application ID used when initiating rerun for any data logging you wish to associate with this blueprint.</p> <p> TYPE: <code>str</code> </p> <code>addr</code> <p>The ip:port to connect to</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>make_active</code> <p>Immediately make this the active blueprint for the associated <code>app_id</code>. Note that setting this to <code>false</code> does not mean the blueprint may not still end up becoming active. In particular, if <code>make_default</code> is true and there is no other currently active blueprint.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>make_default</code> <p>Make this the default blueprint for the <code>app_id</code>. The default blueprint will be used as the template when the user resets the blueprint for the app. It will also become the active blueprint if no other blueprint is currently active.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.save","title":"<code>def save(application_id, path=None)</code>","text":"<p>Save this blueprint to a file. Rerun recommends the <code>.rbl</code> suffix.</p> PARAMETER DESCRIPTION <code>application_id</code> <p>The application ID to use for this blueprint. This must match the application ID used when initiating rerun for any data logging you wish to associate with this blueprint.</p> <p> TYPE: <code>str</code> </p> <code>path</code> <p>The path to save the blueprint to. Defaults to <code>&lt;application_id&gt;.rbl</code>.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.spawn","title":"<code>def spawn(application_id, port=9876, memory_limit='75%', hide_welcome_screen=False)</code>","text":"<p>Spawn a Rerun viewer with this blueprint.</p> PARAMETER DESCRIPTION <code>application_id</code> <p>The application ID to use for this blueprint. This must match the application ID used when initiating rerun for any data logging you wish to associate with this blueprint.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The port to listen on.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9876</code> </p> <code>memory_limit</code> <p>An upper limit on how much memory the Rerun Viewer should use. When this limit is reached, Rerun will drop the oldest data. Example: <code>16GB</code> or <code>50%</code> (of system total).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'75%'</code> </p> <code>hide_welcome_screen</code> <p>Hide the normal Rerun welcome screen.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Blueprint.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Conform with the <code>BlueprintLike</code> interface.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container","title":"<code>class Container</code>","text":"<p>Base class for all container types.</p> <p>Consider using one of the subclasses instead of this class directly:</p> <ul> <li>rerun.blueprint.Horizontal</li> <li>rerun.blueprint.Vertical</li> <li>rerun.blueprint.Grid</li> <li>rerun.blueprint.Tabs</li> </ul> <p>These are ergonomic helpers on top of rerun.blueprint.archetypes.ContainerBlueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.__init__","title":"<code>def __init__(*args, contents=None, kind, column_shares=None, row_shares=None, grid_columns=None, active_tab=None, name)</code>","text":"<p>Construct a new container.</p> PARAMETER DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>kind</code> <p>The kind of the container. This must correspond to a known container kind. Prefer to use one of the subclasses of <code>Container</code> which will populate this for you.</p> <p> TYPE: <code>ContainerKindLike</code> </p> <code>column_shares</code> <p>The layout shares of the columns in the container. The share is used to determine what fraction of the total width each column should take up. The column with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>. This is only applicable to <code>Horizontal</code> or <code>Grid</code> containers.</p> <p> TYPE: <code>Optional[Float32ArrayLike]</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of the rows in the container. The share is used to determine what fraction of the total height each row should take up. The row with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>. This is only applicable to <code>Vertical</code> or <code>Grid</code> containers.</p> <p> TYPE: <code>Optional[Float32ArrayLike]</code> DEFAULT: <code>None</code> </p> <code>grid_columns</code> <p>The number of columns in the grid. This is only applicable to <code>Grid</code> containers.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>active_tab</code> <p>The active tab in the container. This is only applicable to <code>Tabs</code> containers.</p> <p> TYPE: <code>Optional[int | str]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Container.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal","title":"<code>class Horizontal</code>","text":"<p>         Bases: <code>Container</code></p> <p>A horizontal container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.__init__","title":"<code>def __init__(*args, contents=None, column_shares=None, name=None)</code>","text":"<p>Construct a new horizontal container.</p> PARAMETER DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>column_shares</code> <p>The layout shares of the columns in the container. The share is used to determine what fraction of the total width each column should take up. The column with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[Float32ArrayLike]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Horizontal.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical","title":"<code>class Vertical</code>","text":"<p>         Bases: <code>Container</code></p> <p>A vertical container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.__init__","title":"<code>def __init__(*args, contents=None, row_shares=None, name=None)</code>","text":"<p>Construct a new vertical container.</p> PARAMETER DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of the rows in the container. The share is used to determine what fraction of the total height each row should take up. The row with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[Float32ArrayLike]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Vertical.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid","title":"<code>class Grid</code>","text":"<p>         Bases: <code>Container</code></p> <p>A grid container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.__init__","title":"<code>def __init__(*args, contents=None, column_shares=None, row_shares=None, grid_columns=None, name=None)</code>","text":"<p>Construct a new grid container.</p> PARAMETER DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>column_shares</code> <p>The layout shares of the columns in the container. The share is used to determine what fraction of the total width each column should take up. The column with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[Float32ArrayLike]</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of the rows in the container. The share is used to determine what fraction of the total height each row should take up. The row with index <code>i</code> will take up the fraction <code>shares[i] / total_shares</code>.</p> <p> TYPE: <code>Optional[Float32ArrayLike]</code> DEFAULT: <code>None</code> </p> <code>grid_columns</code> <p>The number of columns in the grid.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Grid.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs","title":"<code>class Tabs</code>","text":"<p>         Bases: <code>Container</code></p> <p>A tab container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.__init__","title":"<code>def __init__(*args, contents=None, active_tab=None, name=None)</code>","text":"<p>Construct a new tab container.</p> PARAMETER DESCRIPTION <code>*args</code> <p>All positional arguments are forwarded to the <code>contents</code> parameter for convenience.</p> <p> TYPE: <code>Container | SpaceView</code> DEFAULT: <code>()</code> </p> <code>contents</code> <p>The contents of the container. Each item in the iterable must be a <code>SpaceView</code> or a <code>Container</code>. This can only be used if no positional arguments are provided.</p> <p> TYPE: <code>Optional[Iterable[Container | SpaceView]]</code> DEFAULT: <code>None</code> </p> <code>active_tab</code> <p>The index or name of the active tab.</p> <p> TYPE: <code>Optional[int | str]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the container</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this container to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Tabs.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView","title":"<code>class SpaceView</code>","text":"<p>Base class for all space view types.</p> <p>Consider using one of the subclasses instead of this class directly:</p> <ul> <li>rerun.blueprint.BarChartView</li> <li>rerun.blueprint.Spatial2DView</li> <li>rerun.blueprint.Spatial3DView</li> <li>rerun.blueprint.TensorView</li> <li>rerun.blueprint.TextDocumentView</li> <li>rerun.blueprint.TextLogView</li> <li>rerun.blueprint.TimeSeriesView</li> </ul> <p>These are ergonomic helpers on top of rerun.blueprint.archetypes.SpaceViewBlueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.__init__","title":"<code>def __init__(*, class_identifier, origin, contents, name, visible=None, properties={}, defaults=[], overrides={})</code>","text":"<p>Construct a blueprint for a new space view.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the space view.</p> <p> TYPE: <code>Utf8Like | None</code> </p> <code>class_identifier</code> <p>The class of the space view to add. This must correspond to a known space view class. Prefer to use one of the subclasses of <code>SpaceView</code> which will populate this for you.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this space view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> </p> <code>contents</code> <p>The contents of the space view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> </p> <code>visible</code> <p>Whether this space view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>properties</code> <p>Dictionary of property archetypes to add to space view's internal hierarchy.</p> <p> TYPE: <code>dict[str, AsComponents]</code> DEFAULT: <code>{}</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SpaceView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView","title":"<code>class BarChartView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A bar chart view.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView--use-a-blueprint-to-create-a-barchartview","title":"Use a blueprint to create a BarChartView.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_bar_chart\", spawn=True)\n# It's recommended to log bar charts with the `rr.BarChart` archetype,\n# but single dimensional tensors can also be used if a `BarChartView` is created explicitly.\nrr.log(\"tensor\", rr.Tensor([8, 4, 0, 9, 1, 4, 1, 6, 9, 0]))\n\n# Create a bar chart view to display the chart.\nblueprint = rrb.Blueprint(rrb.BarChartView(origin=\"tensor\", name=\"Bar Chart\"), collapse_panels=True)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, plot_legend=None)</code>","text":"<p>Construct a blueprint for a new BarChartView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>plot_legend</code> <p>Configures the legend of the plot.</p> <p> TYPE: <code>PlotLegend | Corner2D | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BarChartView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView","title":"<code>class Spatial2DView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: For viewing spatial 2D data.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView--use-a-blueprint-to-customize-a-spatial2dview","title":"Use a blueprint to customize a Spatial2DView.:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_spatial_2d\", spawn=True)\n\n# Create a spiral of points:\nn = 150\nangle = np.linspace(0, 10 * np.pi, n)\nspiral_radius = np.linspace(0.0, 3.0, n) ** 2\npositions = np.column_stack((np.cos(angle) * spiral_radius, np.sin(angle) * spiral_radius))\ncolors = np.dstack((np.linspace(255, 255, n), np.linspace(255, 0, n), np.linspace(0, 255, n)))[0].astype(int)\nradii = np.linspace(0.01, 0.7, n)\n\nrr.log(\"points\", rr.Points2D(positions, colors=colors, radii=radii))\n\n# Create a Spatial2D view to display the points.\nblueprint = rrb.Blueprint(\n    rrb.Spatial2DView(\n        origin=\"/\",\n        name=\"2D Scene\",\n        # Set the background color\n        background=[105, 20, 105],\n        # Note that this range is smaller than the range of the points,\n        # so some points will not be visible.\n        visual_bounds=rrb.VisualBounds2D(x_range=[-5, 5], y_range=[-5, 5]),\n    ),\n    collapse_panels=True,\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, background=None, visual_bounds=None, time_ranges=None)</code>","text":"<p>Construct a blueprint for a new Spatial2DView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>background</code> <p>Configuration for the background of the view.</p> <p> TYPE: <code>Background | Rgba32Like | BackgroundKindLike | None</code> DEFAULT: <code>None</code> </p> <code>visual_bounds</code> <p>The visible parts of the scene, in the coordinate space of the scene.</p> <p>Everything within these bounds are guaranteed to be visible. Somethings outside of these bounds may also be visible due to letterboxing.</p> <p> TYPE: <code>VisualBounds2D | None</code> DEFAULT: <code>None</code> </p> <code>time_ranges</code> <p>Configures which range on each timeline is shown by this view (unless specified differently per entity).</p> <p>If not specified, the default is to show the latest state of each component. If a timeline is specified more than once, the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRanges | VisibleTimeRangeLike | Sequence[VisibleTimeRangeLike] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial2DView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView","title":"<code>class Spatial3DView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: For viewing spatial 3D data.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView--use-a-blueprint-to-customize-a-spatial3dview","title":"Use a blueprint to customize a Spatial3DView.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\nfrom numpy.random import default_rng\n\nrr.init(\"rerun_example_spatial_3d\", spawn=True)\n\n# Create some random points.\nrng = default_rng(12345)\npositions = rng.uniform(-5, 5, size=[50, 3])\ncolors = rng.uniform(0, 255, size=[50, 3])\nradii = rng.uniform(0.1, 0.5, size=[50])\n\nrr.log(\"points\", rr.Points3D(positions, colors=colors, radii=radii))\nrr.log(\"box\", rr.Boxes3D(half_sizes=[5, 5, 5], colors=0))\n\n# Create a Spatial3D view to display the points.\nblueprint = rrb.Blueprint(\n    rrb.Spatial3DView(\n        origin=\"/\",\n        name=\"3D Scene\",\n        # Set the background color to light blue.\n        background=[100, 149, 237],\n    ),\n    collapse_panels=True,\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, background=None, time_ranges=None)</code>","text":"<p>Construct a blueprint for a new Spatial3DView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>background</code> <p>Configuration for the background of the view.</p> <p> TYPE: <code>Background | Rgba32Like | BackgroundKindLike | None</code> DEFAULT: <code>None</code> </p> <code>time_ranges</code> <p>Configures which range on each timeline is shown by this view (unless specified differently per entity).</p> <p>If not specified, the default is to show the latest state of each component. If a timeline is specified more than once, the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRanges | VisibleTimeRangeLike | Sequence[VisibleTimeRangeLike] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.Spatial3DView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView","title":"<code>class TensorView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view on a tensor of any dimensionality.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView--use-a-blueprint-to-create-a-tensorview","title":"Use a blueprint to create a TensorView.:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_tensor\", spawn=True)\n\ntensor = np.random.randint(0, 256, (32, 240, 320, 3), dtype=np.uint8)\nrr.log(\"tensor\", rr.Tensor(tensor, dim_names=(\"batch\", \"x\", \"y\", \"channel\")))\n\nblueprint = rrb.Blueprint(\n    rrb.TensorView(\n        origin=\"tensor\",\n        name=\"Tensor\",\n        # Explicitly pick which dimensions to show.\n        slice_selection=rrb.TensorSliceSelection(\n            # Use the first dimension as width.\n            width=1,\n            # Use the second dimension as height and invert it.\n            height=rr.TensorDimensionSelection(dimension=2, invert=True),\n            # Set which indices to show for the other dimensions.\n            indices=[\n                rr.TensorDimensionIndexSelection(dimension=2, index=4),\n                rr.TensorDimensionIndexSelection(dimension=3, index=5),\n            ],\n            # Show a slider for dimension 2 only. If not specified, all dimensions in `indices` will have sliders.\n            slider=[2],\n        ),\n        # Set a scalar mapping with a custom colormap, gamma and magnification filter.\n        scalar_mapping=rrb.TensorScalarMapping(colormap=\"turbo\", gamma=1.5, mag_filter=\"linear\"),\n        # Fill the view, ignoring aspect ratio.\n        view_fit=\"fill\",\n    ),\n    collapse_panels=True,\n)\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, slice_selection=None, scalar_mapping=None, view_fit=None)</code>","text":"<p>Construct a blueprint for a new TensorView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>slice_selection</code> <p>How to select the slice of the tensor to show.</p> <p> TYPE: <code>TensorSliceSelection | None</code> DEFAULT: <code>None</code> </p> <code>scalar_mapping</code> <p>Configures how scalars are mapped to color.</p> <p> TYPE: <code>TensorScalarMapping | None</code> DEFAULT: <code>None</code> </p> <code>view_fit</code> <p>Configures how the selected slice should fit into the view.</p> <p> TYPE: <code>TensorViewFit | ViewFitLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TensorView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView","title":"<code>class TextDocumentView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view of a single text document, for use with <code>archetypes.TextDocument</code>.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView--use-a-blueprint-to-show-a-text-document","title":"Use a blueprint to show a text document.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_text_document\", spawn=True)\n\nrr.log(\n    \"markdown\",\n    rr.TextDocument(\n        '''\n# Hello Markdown!\n[Click here to see the raw text](recording://markdown:Text).\n\nBasic formatting:\n\n| **Feature**       | **Alternative** |\n| ----------------- | --------------- |\n| Plain             |                 |\n| *italics*         | _italics_       |\n| **bold**          | __bold__        |\n| ~~strikethrough~~ |                 |\n| `inline code`     |                 |\n\n----------------------------------\n\n## Support\n- [x] [Commonmark](https://commonmark.org/help/) support\n- [x] GitHub-style strikethrough, tables, and checkboxes\n- Basic syntax highlighting for:\n  - [x] C and C++\n  - [x] Python\n  - [x] Rust\n  - [ ] Other languages\n\n## Links\nYou can link to [an entity](recording://markdown),\na [specific instance of an entity](recording://markdown[#0]),\nor a [specific component](recording://markdown:Text).\n\nOf course you can also have [normal https links](https://github.com/rerun-io/rerun), e.g. &lt;https://rerun.io&gt;.\n\n## Image\n![A random image](https://picsum.photos/640/480)\n'''.strip(),\n        media_type=rr.MediaType.MARKDOWN,\n    ),\n)\n\n# Create a text view that displays the markdown.\nblueprint = rrb.Blueprint(rrb.TextDocumentView(origin=\"markdown\", name=\"Markdown example\"), collapse_panels=True)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={})</code>","text":"<p>Construct a blueprint for a new TextDocumentView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextDocumentView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView","title":"<code>class TextLogView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view of a text log, for use with <code>archetypes.TextLog</code>.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView--use-a-blueprint-to-show-a-textlogview","title":"Use a blueprint to show a TextLogView.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_text_log\", spawn=True)\n\nrr.set_time_sequence(\"time\", 0)\nrr.log(\"log/status\", rr.TextLog(\"Application started.\", level=rr.TextLogLevel.INFO))\nrr.set_time_sequence(\"time\", 5)\nrr.log(\"log/other\", rr.TextLog(\"A warning.\", level=rr.TextLogLevel.WARN))\nfor i in range(10):\n    rr.set_time_sequence(\"time\", i)\n    rr.log(\"log/status\", rr.TextLog(f\"Processing item {i}.\", level=rr.TextLogLevel.INFO))\n\n# Create a text view that displays all logs.\nblueprint = rrb.Blueprint(rrb.TextLogView(origin=\"/log\", name=\"Text Logs\"), collapse_panels=True)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={})</code>","text":"<p>Construct a blueprint for a new TextLogView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TextLogView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView","title":"<code>class TimeSeriesView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A time series view for scalars over time, for use with <code>archetypes.Scalar</code>.</p> Example"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView--use-a-blueprint-to-customize-a-timeseriesview","title":"Use a blueprint to customize a TimeSeriesView.:","text":"<p><pre><code>import math\n\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_timeseries\", spawn=True)\n\n# Log some trigonometric functions\nrr.log(\"trig/sin\", rr.SeriesLine(color=[255, 0, 0], name=\"sin(0.01t)\"), static=True)\nrr.log(\"trig/cos\", rr.SeriesLine(color=[0, 255, 0], name=\"cos(0.01t)\"), static=True)\nrr.log(\"trig/cos\", rr.SeriesLine(color=[0, 0, 255], name=\"cos(0.01t) scaled\"), static=True)\nfor t in range(0, int(math.pi * 4 * 100.0)):\n    rr.set_time_sequence(\"timeline0\", t)\n    rr.set_time_seconds(\"timeline1\", t)\n    rr.log(\"trig/sin\", rr.Scalar(math.sin(float(t) / 100.0)))\n    rr.log(\"trig/cos\", rr.Scalar(math.cos(float(t) / 100.0)))\n    rr.log(\"trig/cos_scaled\", rr.Scalar(math.cos(float(t) / 100.0) * 2.0))\n\n# Create a TimeSeries View\nblueprint = rrb.Blueprint(\n    rrb.TimeSeriesView(\n        origin=\"/trig\",\n        # Set a custom Y axis.\n        axis_y=rrb.ScalarAxis(range=(-1.0, 1.0), zoom_lock=True),\n        # Configure the legend.\n        plot_legend=rrb.PlotLegend(visible=False),\n        # Set time different time ranges for different timelines.\n        time_ranges=[\n            # Sliding window depending on the time cursor for the first timeline.\n            rrb.VisibleTimeRange(\n                \"timeline0\",\n                start=rrb.TimeRangeBoundary.cursor_relative(seq=-100),\n                end=rrb.TimeRangeBoundary.cursor_relative(),\n            ),\n            # Time range from some point to the end of the timeline for the second timeline.\n            rrb.VisibleTimeRange(\n                \"timeline1\",\n                start=rrb.TimeRangeBoundary.absolute(seconds=300.0),\n                end=rrb.TimeRangeBoundary.infinite(),\n            ),\n        ],\n    ),\n    collapse_panels=True,\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, axis_y=None, plot_legend=None, time_ranges=None)</code>","text":"<p>Construct a blueprint for a new TimeSeriesView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>axis_y</code> <p>Configures the vertical axis of the plot.</p> <p> TYPE: <code>ScalarAxis | None</code> DEFAULT: <code>None</code> </p> <code>plot_legend</code> <p>Configures the legend of the plot.</p> <p> TYPE: <code>PlotLegend | Corner2D | None</code> DEFAULT: <code>None</code> </p> <code>time_ranges</code> <p>Configures which range on each timeline is shown by this view (unless specified differently per entity).</p> <p>If not specified, the default is to show the entire timeline. If a timeline is specified more than once, the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRanges | VisibleTimeRangeLike | Sequence[VisibleTimeRangeLike] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimeSeriesView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPanel","title":"<code>class BlueprintPanel</code>","text":"<p>         Bases: <code>Panel</code></p> <p>The state of the blueprint panel.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPanel.__init__","title":"<code>def __init__(*, expanded=None, state=None)</code>","text":"<p>Construct a new blueprint panel.</p> PARAMETER DESCRIPTION <code>expanded</code> <p>Deprecated. Use <code>state</code> instead.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>state</code> <p>Whether the panel is expanded, collapsed, or hidden.</p> <p>Collapsed and hidden both fully hide the blueprint panel.</p> <p> TYPE: <code>PanelStateLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.BlueprintPanel.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SelectionPanel","title":"<code>class SelectionPanel</code>","text":"<p>         Bases: <code>Panel</code></p> <p>The state of the selection panel.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SelectionPanel.__init__","title":"<code>def __init__(*, expanded=None, state=None)</code>","text":"<p>Construct a new selection panel.</p> PARAMETER DESCRIPTION <code>expanded</code> <p>Deprecated. Use <code>state</code> instead.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>state</code> <p>Whether the panel is expanded, collapsed, or hidden.</p> <p>Collapsed and hidden both fully hide the selection panel.</p> <p> TYPE: <code>PanelStateLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.SelectionPanel.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimePanel","title":"<code>class TimePanel</code>","text":"<p>         Bases: <code>Panel</code></p> <p>The state of the time panel.</p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimePanel.__init__","title":"<code>def __init__(*, expanded=None, state=None)</code>","text":"<p>Construct a new time panel.</p> PARAMETER DESCRIPTION <code>expanded</code> <p>Deprecated. Use <code>state</code> instead.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>state</code> <p>Whether the panel is expanded, collapsed, or hidden.</p> <p>Expanded fully shows the panel, collapsed shows a simplified panel, hidden fully hides the panel.</p> <p> TYPE: <code>PanelStateLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_apis/#rerun.blueprint.TimePanel.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_archetypes/","title":"Archetypes","text":""},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes","title":"<code>rerun.blueprint.archetypes</code>","text":""},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.Background","title":"<code>class Background</code>","text":"<p>         Bases: <code>BackgroundExt</code>, <code>Archetype</code></p> <p>Archetype: Configuration for the background of a view.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.Background.__init__","title":"<code>def __init__(color_or_kind=None, *, color=None, kind=None)</code>","text":"<p>Create a new instance of the Background archetype.</p> PARAMETER DESCRIPTION <code>color_or_kind</code> <p>Either a color for solid background color or kind of the background (see <code>BackgroundKind</code>). If set, <code>color</code> and <code>kind</code> must not be set.</p> <p> TYPE: <code>Rgba32Like | BackgroundKindLike | None</code> DEFAULT: <code>None</code> </p> <code>kind</code> <p>The type of the background. Defaults to BackgroundKind.GradientDark.</p> <p> TYPE: <code>BackgroundKindLike | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>Color used for BackgroundKind.SolidColor.</p> <p>Defaults to White.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ContainerBlueprint","title":"<code>class ContainerBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The description of a container.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ContainerBlueprint.__init__","title":"<code>def __init__(container_kind, *, display_name=None, contents=None, col_shares=None, row_shares=None, active_tab=None, visible=None, grid_columns=None)</code>","text":"<p>Create a new instance of the ContainerBlueprint archetype.</p> PARAMETER DESCRIPTION <code>container_kind</code> <p>The class of the view.</p> <p> TYPE: <code>ContainerKindLike</code> </p> <code>display_name</code> <p>The name of the container.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>contents</code> <p><code>ContainerId</code>s or <code>SpaceViewId</code>s that are children of this container.</p> <p> TYPE: <code>EntityPathArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>col_shares</code> <p>The layout shares of each column in the container.</p> <p>For <code>Horizontal</code> containers, the length of this list should always match the number of contents.</p> <p>Ignored for <code>Vertical</code> containers.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>row_shares</code> <p>The layout shares of each row of the container.</p> <p>For <code>Vertical</code> containers, the length of this list should always match the number of contents.</p> <p>Ignored for <code>Horizontal</code> containers.</p> <p> TYPE: <code>Float32ArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>active_tab</code> <p>Which tab is active.</p> <p>Only applies to <code>Tabs</code> containers.</p> <p> TYPE: <code>EntityPathLike | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this container is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>grid_columns</code> <p>How many columns this grid should have.</p> <p>If unset, the grid layout will be auto.</p> <p>Ignored for <code>Horizontal</code>/<code>Vertical</code> containers.</p> <p> TYPE: <code>UInt32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.DataframeQuery","title":"<code>class DataframeQuery</code>","text":"<p>         Bases: <code>DataframeQueryExt</code>, <code>Archetype</code></p> <p>Archetype: The query for the dataframe view.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.DataframeQuery.__init__","title":"<code>def __init__(*, timeline=None, filter_by_range=None, filter_is_not_null=None, apply_latest_at=False, select=None)</code>","text":"<p>Create a new instance of the DataframeQuery archetype.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The timeline for this query.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>filter_by_range</code> <p>If set, a range filter is applied.</p> <p> TYPE: <code>tuple[TimeInt, TimeInt] | FilterByRangeLike | None</code> DEFAULT: <code>None</code> </p> <code>filter_is_not_null</code> <p>If provided, the dataframe will only contain rows corresponding to timestamps at which an event was logged for the provided column.</p> <p> TYPE: <code>ComponentColumnSelectorLike | None</code> DEFAULT: <code>None</code> </p> <code>apply_latest_at</code> <p>Should empty cells be filled with latest-at queries?</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>select</code> <p>Selected columns. If unset, all columns are selected.</p> <p> TYPE: <code>list[ComponentColumnSelectorLike | Utf8Like | str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PanelBlueprint","title":"<code>class PanelBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Shared state for the 3 collapsible panels.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PanelBlueprint.__init__","title":"<code>def __init__(*, state=None)</code>","text":"<p>Create a new instance of the PanelBlueprint archetype.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PlotLegend","title":"<code>class PlotLegend</code>","text":"<p>         Bases: <code>PlotLegendExt</code>, <code>Archetype</code></p> <p>Archetype: Configuration for the legend of a plot.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.PlotLegend.__init__","title":"<code>def __init__(corner=None, *, visible=None)</code>","text":"<p>Create a new instance of the PlotLegend archetype.</p> PARAMETER DESCRIPTION <code>corner</code> <p>To what corner the legend is aligned.</p> <p>Defaults to the right bottom corner.</p> <p> TYPE: <code>Corner2DLike | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether the legend is shown at all.</p> <p>True by default.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ScalarAxis","title":"<code>class ScalarAxis</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Configuration for the scalar axis of a plot.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ScalarAxis.__init__","title":"<code>def __init__(*, range=None, zoom_lock=None)</code>","text":"<p>Create a new instance of the ScalarAxis archetype.</p> PARAMETER DESCRIPTION <code>range</code> <p>The range of the axis.</p> <p>If unset, the range well be automatically determined based on the queried data.</p> <p> TYPE: <code>Range1DLike | None</code> DEFAULT: <code>None</code> </p> <code>zoom_lock</code> <p>If enabled, the Y axis range will remain locked to the specified range when zooming.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewBlueprint","title":"<code>class SpaceViewBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The description of a single view.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewBlueprint.__init__","title":"<code>def __init__(class_identifier, *, display_name=None, space_origin=None, visible=None)</code>","text":"<p>Create a new instance of the SpaceViewBlueprint archetype.</p> PARAMETER DESCRIPTION <code>class_identifier</code> <p>The class of the view.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>display_name</code> <p>The name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>space_origin</code> <p>The \"anchor point\" of this space view.</p> <p>Defaults to the root path '/' if not specified.</p> <p>The transform at this path forms the reference point for all scene-&gt;world transforms in this space view. I.e. the position of this entity path in space forms the origin of the coordinate system in this space view. Furthermore, this is the primary indicator for heuristics on what entities we show in this space view.</p> <p> TYPE: <code>EntityPathLike | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this space view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewContents","title":"<code>class SpaceViewContents</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The contents of a <code>SpaceView</code>.</p> <p>The contents are found by combining a collection of <code>QueryExpression</code>s.</p> <pre><code>+ /world/**           # add everything\u2026\n- /world/roads/**     # \u2026but remove all roads\u2026\n+ /world/roads/main   # \u2026but show main road\n</code></pre> <p>If there is multiple matching rules, the most specific rule wins. If there are multiple rules of the same specificity, the last one wins. If no rules match, the path is excluded.</p> <p>Specifying a path without a <code>+</code> or <code>-</code> prefix is equivalent to <code>+</code>: <pre><code>/world/**           # add everything\u2026\n- /world/roads/**   # \u2026but remove all roads\u2026\n/world/roads/main   # \u2026but show main road\n</code></pre></p> <p>The <code>/**</code> suffix matches the whole subtree, i.e. self and any child, recursively (<code>/world/**</code> matches both <code>/world</code> and <code>/world/car/driver</code>). Other uses of <code>*</code> are not (yet) supported.</p> <p>Internally, <code>EntityPathFilter</code> sorts the rule by entity path, with recursive coming before non-recursive. This means the last matching rule is also the most specific one. For instance: <pre><code>+ /world/**\n- /world\n- /world/car/**\n+ /world/car/driver\n</code></pre></p> <p>The last rule matching <code>/world/car/driver</code> is <code>+ /world/car/driver</code>, so it is included. The last rule matching <code>/world/car/hood</code> is <code>- /world/car/**</code>, so it is excluded. The last rule matching <code>/world</code> is <code>- /world</code>, so it is excluded. The last rule matching <code>/world/house</code> is <code>+ /world/**</code>, so it is included.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.SpaceViewContents.__init__","title":"<code>def __init__(query)</code>","text":"<p>Create a new instance of the SpaceViewContents archetype.</p> PARAMETER DESCRIPTION <code>query</code> <p>The <code>QueryExpression</code> that populates the contents for the <code>SpaceView</code>.</p> <p>They determine which entities are part of the spaceview.</p> <p> TYPE: <code>Utf8ArrayLike</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.TensorScalarMapping","title":"<code>class TensorScalarMapping</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Configures how tensor scalars are mapped to color.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.TensorScalarMapping.__init__","title":"<code>def __init__(*, mag_filter=None, colormap=None, gamma=None)</code>","text":"<p>Create a new instance of the TensorScalarMapping archetype.</p> PARAMETER DESCRIPTION <code>mag_filter</code> <p>Filter used when zooming in on the tensor.</p> <p>Note that the filter is applied to the scalar values before they are mapped to color.</p> <p> TYPE: <code>MagnificationFilterLike | None</code> DEFAULT: <code>None</code> </p> <code>colormap</code> <p>How scalar values map to colors.</p> <p> TYPE: <code>ColormapLike | None</code> DEFAULT: <code>None</code> </p> <code>gamma</code> <p>Gamma exponent applied to normalized values before mapping to color.</p> <p>Raises the normalized values to the power of this value before mapping to color. Acts like an inverse brightness. Defaults to 1.0.</p> <p>The final value for display is set as: <code>colormap( ((value - data_display_range.min) / (data_display_range.max - data_display_range.min)) ** gamma )</code></p> <p> TYPE: <code>Float32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.TensorSliceSelection","title":"<code>class TensorSliceSelection</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: Specifies a 2D slice of a tensor.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.TensorSliceSelection.__init__","title":"<code>def __init__(*, width=None, height=None, indices=None, slider=None)</code>","text":"<p>Create a new instance of the TensorSliceSelection archetype.</p> PARAMETER DESCRIPTION <code>width</code> <p>Which dimension to map to width.</p> <p>If not specified, the height will be determined automatically based on the name and index of the dimension.</p> <p> TYPE: <code>TensorDimensionSelectionLike | None</code> DEFAULT: <code>None</code> </p> <code>height</code> <p>Which dimension to map to height.</p> <p>If not specified, the height will be determined automatically based on the name and index of the dimension.</p> <p> TYPE: <code>TensorDimensionSelectionLike | None</code> DEFAULT: <code>None</code> </p> <code>indices</code> <p>Selected indices for all other dimensions.</p> <p>If any of the here listed dimensions is equal to <code>width</code> or <code>height</code>, it will be ignored.</p> <p> TYPE: <code>TensorDimensionIndexSelectionArrayLike | None</code> DEFAULT: <code>None</code> </p> <code>slider</code> <p>Any dimension listed here will have a slider for the index.</p> <p>Edits to the sliders will directly manipulate dimensions on the <code>indices</code> list. If any of the here listed dimensions is equal to <code>width</code> or <code>height</code>, it will be ignored. If not specified, adds slides for any dimension in <code>indices</code>.</p> <p> TYPE: <code>TensorDimensionIndexSliderArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.TensorViewFit","title":"<code>class TensorViewFit</code>","text":"<p>         Bases: <code>TensorViewFitExt</code>, <code>Archetype</code></p> <p>Archetype: Configures how a selected tensor slice is shown on screen.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.TensorViewFit.__init__","title":"<code>def __init__(scaling=None)</code>","text":"<p>Create a new instance of the TensorViewFit archetype.</p> PARAMETER DESCRIPTION <code>scaling</code> <p>How the image is scaled to fit the view.</p> <p> TYPE: <code>ViewFitLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ViewportBlueprint","title":"<code>class ViewportBlueprint</code>","text":"<p>         Bases: <code>Archetype</code></p> <p>Archetype: The top-level description of the viewport.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.ViewportBlueprint.__init__","title":"<code>def __init__(*, root_container=None, maximized=None, auto_layout=None, auto_space_views=None, past_viewer_recommendations=None)</code>","text":"<p>Create a new instance of the ViewportBlueprint archetype.</p> PARAMETER DESCRIPTION <code>root_container</code> <p>The layout of the space-views</p> <p> TYPE: <code>UuidLike | None</code> DEFAULT: <code>None</code> </p> <code>maximized</code> <p>Show one tab as maximized?</p> <p> TYPE: <code>UuidLike | None</code> DEFAULT: <code>None</code> </p> <code>auto_layout</code> <p>Whether the viewport layout is determined automatically.</p> <p>If <code>true</code>, the container layout will be reset whenever a new space view is added or removed. This defaults to <code>false</code> and is automatically set to <code>false</code> when there is user determined layout.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>auto_space_views</code> <p>Whether or not space views should be created automatically.</p> <p>If <code>true</code>, the viewer will only add space views that it hasn't considered previously (as identified by <code>past_viewer_recommendations</code>) and which aren't deemed redundant to existing space views. This defaults to <code>false</code> and is automatically set to <code>false</code> when the user adds space views manually in the viewer.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>past_viewer_recommendations</code> <p>Hashes of all recommended space views the viewer has already added and that should not be added again.</p> <p>This is an internal field and should not be set usually. If you want the viewer from stopping to add space views, you should set <code>auto_space_views</code> to <code>false</code>.</p> <p>The viewer uses this to determine whether it should keep adding space views.</p> <p> TYPE: <code>UInt64ArrayLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.VisibleTimeRanges","title":"<code>class VisibleTimeRanges</code>","text":"<p>         Bases: <code>VisibleTimeRangesExt</code>, <code>Archetype</code></p> <p>Archetype: Configures what range of each timeline is shown on a view.</p> <p>Whenever no visual time range applies, queries are done with \"latest-at\" semantics. This means that the view will, starting from the time cursor position, query the latest data available for each component type.</p> <p>The default visual time range depends on the type of view this property applies to: - For time series views, the default is to show the entire timeline. - For any other view, the default is to apply latest-at semantics.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.VisibleTimeRanges.__init__","title":"<code>def __init__(ranges)</code>","text":"<p>Create a new instance of the VisibleTimeRanges archetype.</p> PARAMETER DESCRIPTION <code>ranges</code> <p>The time ranges to show for each timeline unless specified otherwise on a per-entity basis.</p> <p>If a timeline is listed twice, a warning will be issued and the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRangeArrayLike</code> </p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.VisualBounds2D","title":"<code>class VisualBounds2D</code>","text":"<p>         Bases: <code>VisualBounds2DExt</code>, <code>Archetype</code></p> <p>Archetype: Controls the visual bounds of a 2D view.</p> <p>Everything within these bounds are guaranteed to be visible. Somethings outside of these bounds may also be visible due to letterboxing.</p> <p>If no visual bounds are set, it will be determined automatically, based on the bounding-box of the data or other camera information present in the view.</p>"},{"location":"common/blueprint_archetypes/#rerun.blueprint.archetypes.VisualBounds2D.__init__","title":"<code>def __init__(*, x_range, y_range)</code>","text":"<p>Create a new instance of the VisualBounds2D archetype.</p> PARAMETER DESCRIPTION <code>x_range</code> <p>The minimum visible range of the X-axis (usually left and right bounds).</p> <p> TYPE: <code>Range1DLike</code> </p> <code>y_range</code> <p>The minimum visible range of the Y-axis (usually left and right bounds).</p> <p> TYPE: <code>Range1DLike</code> </p>"},{"location":"common/blueprint_components/","title":"Components","text":""},{"location":"common/blueprint_components/#rerun.blueprint.components","title":"<code>rerun.blueprint.components</code>","text":""},{"location":"common/blueprint_components/#rerun.blueprint.components.ActiveTab","title":"<code>class ActiveTab</code>","text":"<p>         Bases: <code>EntityPath</code>, <code>ComponentMixin</code></p> <p>Component: The active tab in a tabbed container.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ActiveTab.__init__","title":"<code>def __init__(path)</code>","text":"<p>Create a new instance of the EntityPath datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ActiveTab.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ActiveTab.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ActiveTab.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ApplyLatestAt","title":"<code>class ApplyLatestAt</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Whether empty cells in a dataframe should be filled with a latest-at query.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ApplyLatestAt.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ApplyLatestAt.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ApplyLatestAt.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ApplyLatestAt.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoLayout","title":"<code>class AutoLayout</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Whether the viewport layout is determined automatically.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoLayout.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoLayout.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoLayout.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoLayout.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoSpaceViews","title":"<code>class AutoSpaceViews</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Whether or not space views should be created automatically.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoSpaceViews.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoSpaceViews.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoSpaceViews.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.AutoSpaceViews.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.BackgroundKind","title":"<code>class BackgroundKind</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: The type of the background in a view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.BackgroundKind.GradientBright","title":"<code>GradientBright = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A bright gradient.</p> <p>In 3D views it changes depending on the direction of the view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.BackgroundKind.GradientDark","title":"<code>GradientDark = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A dark gradient.</p> <p>In 3D views it changes depending on the direction of the view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.BackgroundKind.SolidColor","title":"<code>SolidColor = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Simple uniform color.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.BackgroundKind.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.BackgroundKind.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ColumnShare","title":"<code>class ColumnShare</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The layout share of a column in the container.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ColumnShare.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ColumnShare.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ColumnShare.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ColumnShare.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ComponentColumnSelector","title":"<code>class ComponentColumnSelector</code>","text":"<p>         Bases: <code>ComponentColumnSelector</code>, <code>ComponentMixin</code></p> <p>Component: Describe a component column to be selected in the dataframe view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ComponentColumnSelector.__init__","title":"<code>def __init__(spec=None, *, entity_path=None, component=None)</code>","text":"<p>Create a new instance of the ComponentColumnSelector datatype.</p> PARAMETER DESCRIPTION <code>spec</code> <p>A string in the format \"/entity/path:ComponentName\". If used, <code>entity_path</code> and <code>component</code> must be <code>None</code>.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>entity_path</code> <p>The column's entity path. If used, <code>spec</code> must be <code>None</code> and <code>component</code> must be provided.</p> <p> TYPE: <code>EntityPathLike | None</code> DEFAULT: <code>None</code> </p> <code>component</code> <p>The column's component name. If used, <code>spec</code> must be <code>None</code> and <code>entity_path</code> must be provided.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ComponentColumnSelector.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ComponentColumnSelector.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ComponentColumnSelector.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind","title":"<code>class ContainerKind</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: The kind of a blueprint container (tabs, grid, \u2026).</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind.Grid","title":"<code>Grid = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Organize children in a grid layout</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind.Horizontal","title":"<code>Horizontal = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order the children left to right</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind.Tabs","title":"<code>Tabs = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Put children in separate tabs</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind.Vertical","title":"<code>Vertical = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Order the children top to bottom</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ContainerKind.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D","title":"<code>class Corner2D</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: One of four 2D corners, typically used to align objects.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D.LeftBottom","title":"<code>LeftBottom = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left bottom corner.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D.LeftTop","title":"<code>LeftTop = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left top corner.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D.RightBottom","title":"<code>RightBottom = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right bottom corner.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D.RightTop","title":"<code>RightTop = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right top corner.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Corner2D.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterByRange","title":"<code>class FilterByRange</code>","text":"<p>         Bases: <code>FilterByRange</code>, <code>ComponentMixin</code></p> <p>Component: Configuration for a filter-by-range feature of the dataframe view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterByRange.__init__","title":"<code>def __init__(start, end)</code>","text":"<p>Create a new instance of the FilterByRange datatype.</p> PARAMETER DESCRIPTION <code>start</code> <p>Beginning of the time range.</p> <p> TYPE: <code>TimeIntLike</code> </p> <code>end</code> <p>End of the time range (inclusive).</p> <p> TYPE: <code>TimeIntLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterByRange.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterByRange.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterByRange.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterIsNotNull","title":"<code>class FilterIsNotNull</code>","text":"<p>         Bases: <code>FilterIsNotNull</code>, <code>ComponentMixin</code></p> <p>Component: Configuration for the filter is not null feature of the dataframe view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterIsNotNull.__init__","title":"<code>def __init__(active, column)</code>","text":"<p>Create a new instance of the FilterIsNotNull datatype.</p> PARAMETER DESCRIPTION <code>active</code> <p>Whether the filter by event feature is active.</p> <p> TYPE: <code>BoolLike</code> </p> <code>column</code> <p>The column used when the filter by event feature is used.</p> <p> TYPE: <code>ComponentColumnSelectorLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterIsNotNull.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterIsNotNull.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.FilterIsNotNull.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.GridColumns","title":"<code>class GridColumns</code>","text":"<p>         Bases: <code>UInt32</code>, <code>ComponentMixin</code></p> <p>Component: How many columns a grid container should have.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.GridColumns.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt32 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.GridColumns.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.GridColumns.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.GridColumns.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedContent","title":"<code>class IncludedContent</code>","text":"<p>         Bases: <code>EntityPath</code>, <code>ComponentMixin</code></p> <p>Component: All the contents in the container.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedContent.__init__","title":"<code>def __init__(path)</code>","text":"<p>Create a new instance of the EntityPath datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedContent.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedContent.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedContent.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedSpaceView","title":"<code>class IncludedSpaceView</code>","text":"<p>         Bases: <code>Uuid</code>, <code>ComponentMixin</code></p> <p>Component: The unique id of a space view, used to refer to views in containers.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedSpaceView.__init__","title":"<code>def __init__(bytes)</code>","text":"<p>Create a new instance of the Uuid datatype.</p> PARAMETER DESCRIPTION <code>bytes</code> <p>The raw bytes representing the UUID.</p> <p> TYPE: <code>UuidLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedSpaceView.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedSpaceView.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.IncludedSpaceView.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Interactive","title":"<code>class Interactive</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Whether the entity can be interacted with.</p> <p>Non interactive components are still visible, but mouse interactions in the view are disabled.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Interactive.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Interactive.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Interactive.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Interactive.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.LockRangeDuringZoom","title":"<code>class LockRangeDuringZoom</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Indicate whether the range should be locked when zooming in on the data.</p> <p>Default is <code>false</code>, i.e. zoom will change the visualized range.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.LockRangeDuringZoom.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.LockRangeDuringZoom.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.LockRangeDuringZoom.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.LockRangeDuringZoom.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.PanelState","title":"<code>class PanelState</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Tri-state for panel controls.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.PanelState.Collapsed","title":"<code>Collapsed = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Visible, but as small as possible on its shorter axis.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.PanelState.Expanded","title":"<code>Expanded = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Fully expanded.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.PanelState.Hidden","title":"<code>Hidden = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Completely hidden.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.PanelState.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.PanelState.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.QueryExpression","title":"<code>class QueryExpression</code>","text":"<p>         Bases: <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: An individual query expression used to filter a set of <code>datatypes.EntityPath</code>s.</p> <p>Each expression is either an inclusion or an exclusion expression. Inclusions start with an optional <code>+</code> and exclusions must start with a <code>-</code>.</p> <p>Multiple expressions are combined together as part of <code>SpaceViewContents</code>.</p> <p>The <code>/**</code> suffix matches the whole subtree, i.e. self and any child, recursively (<code>/world/**</code> matches both <code>/world</code> and <code>/world/car/driver</code>). Other uses of <code>*</code> are not (yet) supported.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.QueryExpression.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.QueryExpression.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.QueryExpression.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.QueryExpression.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RootContainer","title":"<code>class RootContainer</code>","text":"<p>         Bases: <code>Uuid</code>, <code>ComponentMixin</code></p> <p>Component: The container that sits at the root of a viewport.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RootContainer.__init__","title":"<code>def __init__(bytes)</code>","text":"<p>Create a new instance of the Uuid datatype.</p> PARAMETER DESCRIPTION <code>bytes</code> <p>The raw bytes representing the UUID.</p> <p> TYPE: <code>UuidLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RootContainer.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RootContainer.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RootContainer.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RowShare","title":"<code>class RowShare</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The layout share of a row in the container.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RowShare.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RowShare.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RowShare.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.RowShare.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SelectedColumns","title":"<code>class SelectedColumns</code>","text":"<p>         Bases: <code>SelectedColumns</code>, <code>ComponentMixin</code></p> <p>Component: Describe a component column to be selected in the dataframe view.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SelectedColumns.__init__","title":"<code>def __init__(columns)</code>","text":"<p>Create a new instance of the <code>SelectedColumns</code> datatype.</p> <p>Example: <pre><code>SelectedColumns([\"timeline\", \"/entity/path:ComponentName\"])\n</code></pre></p> PARAMETER DESCRIPTION <code>columns</code> <p>The columns to include.</p> <p>The column must be either of the timeline, or component kind. Timeline columns can be specified using a <code>str</code> without any <code>:</code>, or an <code>Utf8</code>. Component columns can be specified using either a <code>str</code> in the form of <code>\"/entity/path:ComponentName\"</code>, or a <code>ComponentColumnSelector</code>.</p> <p> TYPE: <code>Sequence[ComponentColumnSelectorLike | Utf8Like]</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SelectedColumns.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SelectedColumns.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SelectedColumns.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewClass","title":"<code>class SpaceViewClass</code>","text":"<p>         Bases: <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: The class identifier of view, e.g. <code>\"2D\"</code>, <code>\"TextLog\"</code>, \u2026.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewClass.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewClass.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewClass.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewClass.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewMaximized","title":"<code>class SpaceViewMaximized</code>","text":"<p>         Bases: <code>Uuid</code>, <code>ComponentMixin</code></p> <p>Component: Whether a space view is maximized.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewMaximized.__init__","title":"<code>def __init__(bytes)</code>","text":"<p>Create a new instance of the Uuid datatype.</p> PARAMETER DESCRIPTION <code>bytes</code> <p>The raw bytes representing the UUID.</p> <p> TYPE: <code>UuidLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewMaximized.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewMaximized.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewMaximized.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewOrigin","title":"<code>class SpaceViewOrigin</code>","text":"<p>         Bases: <code>EntityPath</code>, <code>ComponentMixin</code></p> <p>Component: The origin of a <code>SpaceView</code>.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewOrigin.__init__","title":"<code>def __init__(path)</code>","text":"<p>Create a new instance of the EntityPath datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewOrigin.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewOrigin.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.SpaceViewOrigin.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TensorDimensionIndexSlider","title":"<code>class TensorDimensionIndexSlider</code>","text":"<p>         Bases: <code>TensorDimensionIndexSlider</code>, <code>ComponentMixin</code></p> <p>Component: Show a slider for the index of some dimension of a slider.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TensorDimensionIndexSlider.__init__","title":"<code>def __init__(dimension)</code>","text":"<p>Create a new instance of the TensorDimensionIndexSlider datatype.</p> PARAMETER DESCRIPTION <code>dimension</code> <p>The dimension number.</p> <p> TYPE: <code>TensorDimensionIndexSliderLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TensorDimensionIndexSlider.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TensorDimensionIndexSlider.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TensorDimensionIndexSlider.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TimelineName","title":"<code>class TimelineName</code>","text":"<p>         Bases: <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: A timeline identified by its name.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TimelineName.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TimelineName.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TimelineName.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.TimelineName.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewFit","title":"<code>class ViewFit</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Determines whether an image or texture should be scaled to fit the viewport.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewFit.Fill","title":"<code>Fill = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Scale the image for the largest possible fit in the view's container.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewFit.FillKeepAspectRatio","title":"<code>FillKeepAspectRatio = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Scale the image for the largest possible fit in the view's container, but keep the original aspect ratio.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewFit.Original","title":"<code>Original = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>No scaling, pixel size will match the image's width/height dimensions in pixels.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewFit.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewFit.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewerRecommendationHash","title":"<code>class ViewerRecommendationHash</code>","text":"<p>         Bases: <code>UInt64</code>, <code>ComponentMixin</code></p> <p>Component: Hash of a viewer recommendation.</p> <p>The formation of this hash is considered an internal implementation detail of the viewer.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewerRecommendationHash.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt64 datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewerRecommendationHash.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewerRecommendationHash.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.ViewerRecommendationHash.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Visible","title":"<code>class Visible</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Whether the container, view, entity or instance is currently visible.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Visible.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Visible.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Visible.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.Visible.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisibleTimeRange","title":"<code>class VisibleTimeRange</code>","text":"<p>         Bases: <code>VisibleTimeRange</code>, <code>ComponentMixin</code></p> <p>Component: The range of values on a given timeline that will be included in a view's query.</p> <p>Refer to <code>VisibleTimeRanges</code> archetype for more information.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisibleTimeRange.__init__","title":"<code>def __init__(timeline, range=None, *, start=None, end=None)</code>","text":"<p>Create a new instance of the VisibleTimeRange datatype.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>Name of the timeline this applies to.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>range</code> <p>Time range to use for this timeline.</p> <p> TYPE: <code>TimeRangeLike | None</code> DEFAULT: <code>None</code> </p> <code>start</code> <p>Low time boundary for sequence timeline. Specify this instead of <code>range</code>.</p> <p> TYPE: <code>TimeRangeBoundary | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>High time boundary for sequence timeline. Specify this instead of <code>range</code>.</p> <p> TYPE: <code>TimeRangeBoundary | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisibleTimeRange.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisibleTimeRange.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisibleTimeRange.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualBounds2D","title":"<code>class VisualBounds2D</code>","text":"<p>         Bases: <code>VisualBounds2DExt</code>, <code>Range2D</code>, <code>ComponentMixin</code></p> <p>Component: Visual bounds in 2D space used for <code>Spatial2DView</code>.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualBounds2D.__init__","title":"<code>def __init__(*, x_range, y_range)</code>","text":"<p>Create a new instance of the VisualBounds2D component.</p> PARAMETER DESCRIPTION <code>x_range</code> <p>The minimum visible range of the X-axis (usually left and right bounds).</p> <p> TYPE: <code>Range1DLike</code> </p> <code>y_range</code> <p>The minimum visible range of the Y-axis (usually left and right bounds).</p> <p> TYPE: <code>Range1DLike</code> </p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualBounds2D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualBounds2D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualBounds2D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualizerOverrides","title":"<code>class VisualizerOverrides</code>","text":"<p>         Bases: <code>Utf8List</code>, <code>ComponentMixin</code></p> <p>Component: Override the visualizers for an entity.</p> <p>This component is a stop-gap mechanism based on the current implementation details of the visualizer system. It is not intended to be a long-term solution, but provides enough utility to be useful in the short term.</p> <p>The long-term solution is likely to be based off: https://github.com/rerun-io/rerun/issues/6626</p> <p>This can only be used as part of blueprints. It will have no effect if used in a regular entity.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualizerOverrides.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8List datatype.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualizerOverrides.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualizerOverrides.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_components/#rerun.blueprint.components.VisualizerOverrides.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/blueprint_views/","title":"Views","text":""},{"location":"common/blueprint_views/#rerun.blueprint.views","title":"<code>rerun.blueprint.views</code>","text":""},{"location":"common/blueprint_views/#rerun.blueprint.views.BarChartView","title":"<code>class BarChartView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A bar chart view.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.BarChartView--use-a-blueprint-to-create-a-barchartview","title":"Use a blueprint to create a BarChartView.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_bar_chart\", spawn=True)\n# It's recommended to log bar charts with the `rr.BarChart` archetype,\n# but single dimensional tensors can also be used if a `BarChartView` is created explicitly.\nrr.log(\"tensor\", rr.Tensor([8, 4, 0, 9, 1, 4, 1, 6, 9, 0]))\n\n# Create a bar chart view to display the chart.\nblueprint = rrb.Blueprint(rrb.BarChartView(origin=\"tensor\", name=\"Bar Chart\"), collapse_panels=True)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.BarChartView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, plot_legend=None)</code>","text":"<p>Construct a blueprint for a new BarChartView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>plot_legend</code> <p>Configures the legend of the plot.</p> <p> TYPE: <code>PlotLegend | Corner2D | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.BarChartView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.BarChartView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.BarChartView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.DataframeView","title":"<code>class DataframeView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view to display any data in a tabular form.</p> <p>Any data from the store can be shown, using a flexibly, user-configurable query.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.DataframeView--use-a-blueprint-to-customize-a-dataframeview","title":"Use a blueprint to customize a DataframeView.:","text":"<p><pre><code>import math\n\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_dataframe\", spawn=True)\n\n# Log some data.\nfor t in range(0, int(math.pi * 4 * 100.0)):\n    rr.set_time_seconds(\"t\", t)\n    rr.log(\"trig/sin\", rr.Scalar(math.sin(float(t) / 100.0)))\n    rr.log(\"trig/cos\", rr.Scalar(math.cos(float(t) / 100.0)))\n\n    # some sparse data\n    if t % 5 == 0:\n        rr.log(\"trig/tan_sparse\", rr.Scalar(math.tan(float(t) / 100.0)))\n\n# Create a Dataframe View\nblueprint = rrb.Blueprint(\n    rrb.DataframeView(\n        origin=\"/trig\",\n        query=rrb.archetypes.DataframeQuery(\n            timeline=\"t\",\n            filter_by_range=(rr.TimeInt(seconds=0), rr.TimeInt(seconds=20)),\n            filter_is_not_null=\"/trig/tan_sparse:Scalar\",\n            select=[\"t\", \"log_tick\", \"/trig/sin:Scalar\", \"/trig/cos:Scalar\", \"/trig/tan_sparse:Scalar\"],\n        ),\n    ),\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.DataframeView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, query=None)</code>","text":"<p>Construct a blueprint for a new DataframeView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>query</code> <p>Query of the dataframe.</p> <p> TYPE: <code>DataframeQuery | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.DataframeView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.DataframeView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.DataframeView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial2DView","title":"<code>class Spatial2DView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: For viewing spatial 2D data.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial2DView--use-a-blueprint-to-customize-a-spatial2dview","title":"Use a blueprint to customize a Spatial2DView.:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_spatial_2d\", spawn=True)\n\n# Create a spiral of points:\nn = 150\nangle = np.linspace(0, 10 * np.pi, n)\nspiral_radius = np.linspace(0.0, 3.0, n) ** 2\npositions = np.column_stack((np.cos(angle) * spiral_radius, np.sin(angle) * spiral_radius))\ncolors = np.dstack((np.linspace(255, 255, n), np.linspace(255, 0, n), np.linspace(0, 255, n)))[0].astype(int)\nradii = np.linspace(0.01, 0.7, n)\n\nrr.log(\"points\", rr.Points2D(positions, colors=colors, radii=radii))\n\n# Create a Spatial2D view to display the points.\nblueprint = rrb.Blueprint(\n    rrb.Spatial2DView(\n        origin=\"/\",\n        name=\"2D Scene\",\n        # Set the background color\n        background=[105, 20, 105],\n        # Note that this range is smaller than the range of the points,\n        # so some points will not be visible.\n        visual_bounds=rrb.VisualBounds2D(x_range=[-5, 5], y_range=[-5, 5]),\n    ),\n    collapse_panels=True,\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial2DView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, background=None, visual_bounds=None, time_ranges=None)</code>","text":"<p>Construct a blueprint for a new Spatial2DView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>background</code> <p>Configuration for the background of the view.</p> <p> TYPE: <code>Background | Rgba32Like | BackgroundKindLike | None</code> DEFAULT: <code>None</code> </p> <code>visual_bounds</code> <p>The visible parts of the scene, in the coordinate space of the scene.</p> <p>Everything within these bounds are guaranteed to be visible. Somethings outside of these bounds may also be visible due to letterboxing.</p> <p> TYPE: <code>VisualBounds2D | None</code> DEFAULT: <code>None</code> </p> <code>time_ranges</code> <p>Configures which range on each timeline is shown by this view (unless specified differently per entity).</p> <p>If not specified, the default is to show the latest state of each component. If a timeline is specified more than once, the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRanges | VisibleTimeRangeLike | Sequence[VisibleTimeRangeLike] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial2DView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial2DView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial2DView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial3DView","title":"<code>class Spatial3DView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: For viewing spatial 3D data.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial3DView--use-a-blueprint-to-customize-a-spatial3dview","title":"Use a blueprint to customize a Spatial3DView.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\nfrom numpy.random import default_rng\n\nrr.init(\"rerun_example_spatial_3d\", spawn=True)\n\n# Create some random points.\nrng = default_rng(12345)\npositions = rng.uniform(-5, 5, size=[50, 3])\ncolors = rng.uniform(0, 255, size=[50, 3])\nradii = rng.uniform(0.1, 0.5, size=[50])\n\nrr.log(\"points\", rr.Points3D(positions, colors=colors, radii=radii))\nrr.log(\"box\", rr.Boxes3D(half_sizes=[5, 5, 5], colors=0))\n\n# Create a Spatial3D view to display the points.\nblueprint = rrb.Blueprint(\n    rrb.Spatial3DView(\n        origin=\"/\",\n        name=\"3D Scene\",\n        # Set the background color to light blue.\n        background=[100, 149, 237],\n    ),\n    collapse_panels=True,\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial3DView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, background=None, time_ranges=None)</code>","text":"<p>Construct a blueprint for a new Spatial3DView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>background</code> <p>Configuration for the background of the view.</p> <p> TYPE: <code>Background | Rgba32Like | BackgroundKindLike | None</code> DEFAULT: <code>None</code> </p> <code>time_ranges</code> <p>Configures which range on each timeline is shown by this view (unless specified differently per entity).</p> <p>If not specified, the default is to show the latest state of each component. If a timeline is specified more than once, the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRanges | VisibleTimeRangeLike | Sequence[VisibleTimeRangeLike] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial3DView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial3DView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.Spatial3DView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TensorView","title":"<code>class TensorView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view on a tensor of any dimensionality.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.TensorView--use-a-blueprint-to-create-a-tensorview","title":"Use a blueprint to create a TensorView.:","text":"<p><pre><code>import numpy as np\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_tensor\", spawn=True)\n\ntensor = np.random.randint(0, 256, (32, 240, 320, 3), dtype=np.uint8)\nrr.log(\"tensor\", rr.Tensor(tensor, dim_names=(\"batch\", \"x\", \"y\", \"channel\")))\n\nblueprint = rrb.Blueprint(\n    rrb.TensorView(\n        origin=\"tensor\",\n        name=\"Tensor\",\n        # Explicitly pick which dimensions to show.\n        slice_selection=rrb.TensorSliceSelection(\n            # Use the first dimension as width.\n            width=1,\n            # Use the second dimension as height and invert it.\n            height=rr.TensorDimensionSelection(dimension=2, invert=True),\n            # Set which indices to show for the other dimensions.\n            indices=[\n                rr.TensorDimensionIndexSelection(dimension=2, index=4),\n                rr.TensorDimensionIndexSelection(dimension=3, index=5),\n            ],\n            # Show a slider for dimension 2 only. If not specified, all dimensions in `indices` will have sliders.\n            slider=[2],\n        ),\n        # Set a scalar mapping with a custom colormap, gamma and magnification filter.\n        scalar_mapping=rrb.TensorScalarMapping(colormap=\"turbo\", gamma=1.5, mag_filter=\"linear\"),\n        # Fill the view, ignoring aspect ratio.\n        view_fit=\"fill\",\n    ),\n    collapse_panels=True,\n)\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TensorView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, slice_selection=None, scalar_mapping=None, view_fit=None)</code>","text":"<p>Construct a blueprint for a new TensorView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>slice_selection</code> <p>How to select the slice of the tensor to show.</p> <p> TYPE: <code>TensorSliceSelection | None</code> DEFAULT: <code>None</code> </p> <code>scalar_mapping</code> <p>Configures how scalars are mapped to color.</p> <p> TYPE: <code>TensorScalarMapping | None</code> DEFAULT: <code>None</code> </p> <code>view_fit</code> <p>Configures how the selected slice should fit into the view.</p> <p> TYPE: <code>TensorViewFit | ViewFitLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TensorView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TensorView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TensorView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextDocumentView","title":"<code>class TextDocumentView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view of a single text document, for use with <code>archetypes.TextDocument</code>.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextDocumentView--use-a-blueprint-to-show-a-text-document","title":"Use a blueprint to show a text document.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_text_document\", spawn=True)\n\nrr.log(\n    \"markdown\",\n    rr.TextDocument(\n        '''\n# Hello Markdown!\n[Click here to see the raw text](recording://markdown:Text).\n\nBasic formatting:\n\n| **Feature**       | **Alternative** |\n| ----------------- | --------------- |\n| Plain             |                 |\n| *italics*         | _italics_       |\n| **bold**          | __bold__        |\n| ~~strikethrough~~ |                 |\n| `inline code`     |                 |\n\n----------------------------------\n\n## Support\n- [x] [Commonmark](https://commonmark.org/help/) support\n- [x] GitHub-style strikethrough, tables, and checkboxes\n- Basic syntax highlighting for:\n  - [x] C and C++\n  - [x] Python\n  - [x] Rust\n  - [ ] Other languages\n\n## Links\nYou can link to [an entity](recording://markdown),\na [specific instance of an entity](recording://markdown[#0]),\nor a [specific component](recording://markdown:Text).\n\nOf course you can also have [normal https links](https://github.com/rerun-io/rerun), e.g. &lt;https://rerun.io&gt;.\n\n## Image\n![A random image](https://picsum.photos/640/480)\n'''.strip(),\n        media_type=rr.MediaType.MARKDOWN,\n    ),\n)\n\n# Create a text view that displays the markdown.\nblueprint = rrb.Blueprint(rrb.TextDocumentView(origin=\"markdown\", name=\"Markdown example\"), collapse_panels=True)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextDocumentView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={})</code>","text":"<p>Construct a blueprint for a new TextDocumentView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextDocumentView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextDocumentView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextDocumentView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextLogView","title":"<code>class TextLogView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A view of a text log, for use with <code>archetypes.TextLog</code>.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextLogView--use-a-blueprint-to-show-a-textlogview","title":"Use a blueprint to show a TextLogView.:","text":"<p><pre><code>import rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_text_log\", spawn=True)\n\nrr.set_time_sequence(\"time\", 0)\nrr.log(\"log/status\", rr.TextLog(\"Application started.\", level=rr.TextLogLevel.INFO))\nrr.set_time_sequence(\"time\", 5)\nrr.log(\"log/other\", rr.TextLog(\"A warning.\", level=rr.TextLogLevel.WARN))\nfor i in range(10):\n    rr.set_time_sequence(\"time\", i)\n    rr.log(\"log/status\", rr.TextLog(f\"Processing item {i}.\", level=rr.TextLogLevel.INFO))\n\n# Create a text view that displays all logs.\nblueprint = rrb.Blueprint(rrb.TextLogView(origin=\"/log\", name=\"Text Logs\"), collapse_panels=True)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextLogView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={})</code>","text":"<p>Construct a blueprint for a new TextLogView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextLogView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextLogView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TextLogView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TimeSeriesView","title":"<code>class TimeSeriesView</code>","text":"<p>         Bases: <code>SpaceView</code></p> <p>View: A time series view for scalars over time, for use with <code>archetypes.Scalar</code>.</p> Example"},{"location":"common/blueprint_views/#rerun.blueprint.views.TimeSeriesView--use-a-blueprint-to-customize-a-timeseriesview","title":"Use a blueprint to customize a TimeSeriesView.:","text":"<p><pre><code>import math\n\nimport rerun as rr\nimport rerun.blueprint as rrb\n\nrr.init(\"rerun_example_timeseries\", spawn=True)\n\n# Log some trigonometric functions\nrr.log(\"trig/sin\", rr.SeriesLine(color=[255, 0, 0], name=\"sin(0.01t)\"), static=True)\nrr.log(\"trig/cos\", rr.SeriesLine(color=[0, 255, 0], name=\"cos(0.01t)\"), static=True)\nrr.log(\"trig/cos\", rr.SeriesLine(color=[0, 0, 255], name=\"cos(0.01t) scaled\"), static=True)\nfor t in range(0, int(math.pi * 4 * 100.0)):\n    rr.set_time_sequence(\"timeline0\", t)\n    rr.set_time_seconds(\"timeline1\", t)\n    rr.log(\"trig/sin\", rr.Scalar(math.sin(float(t) / 100.0)))\n    rr.log(\"trig/cos\", rr.Scalar(math.cos(float(t) / 100.0)))\n    rr.log(\"trig/cos_scaled\", rr.Scalar(math.cos(float(t) / 100.0) * 2.0))\n\n# Create a TimeSeries View\nblueprint = rrb.Blueprint(\n    rrb.TimeSeriesView(\n        origin=\"/trig\",\n        # Set a custom Y axis.\n        axis_y=rrb.ScalarAxis(range=(-1.0, 1.0), zoom_lock=True),\n        # Configure the legend.\n        plot_legend=rrb.PlotLegend(visible=False),\n        # Set time different time ranges for different timelines.\n        time_ranges=[\n            # Sliding window depending on the time cursor for the first timeline.\n            rrb.VisibleTimeRange(\n                \"timeline0\",\n                start=rrb.TimeRangeBoundary.cursor_relative(seq=-100),\n                end=rrb.TimeRangeBoundary.cursor_relative(),\n            ),\n            # Time range from some point to the end of the timeline for the second timeline.\n            rrb.VisibleTimeRange(\n                \"timeline1\",\n                start=rrb.TimeRangeBoundary.absolute(seconds=300.0),\n                end=rrb.TimeRangeBoundary.infinite(),\n            ),\n        ],\n    ),\n    collapse_panels=True,\n)\n\nrr.send_blueprint(blueprint)\n</code></pre> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TimeSeriesView.__init__","title":"<code>def __init__(*, origin='/', contents='$origin/**', name=None, visible=None, defaults=[], overrides={}, axis_y=None, plot_legend=None, time_ranges=None)</code>","text":"<p>Construct a blueprint for a new TimeSeriesView view.</p> PARAMETER DESCRIPTION <code>origin</code> <p>The <code>EntityPath</code> to use as the origin of this view. All other entities will be transformed to be displayed relative to this origin.</p> <p> TYPE: <code>EntityPathLike</code> DEFAULT: <code>'/'</code> </p> <code>contents</code> <p>The contents of the view specified as a query expression. This is either a single expression, or a list of multiple expressions. See rerun.blueprint.archetypes.SpaceViewContents.</p> <p> TYPE: <code>SpaceViewContentsLike</code> DEFAULT: <code>'$origin/**'</code> </p> <code>name</code> <p>The display name of the view.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>visible</code> <p>Whether this view is visible.</p> <p>Defaults to true if not specified.</p> <p> TYPE: <code>BoolLike | None</code> DEFAULT: <code>None</code> </p> <code>defaults</code> <p>List of default components or component batches to add to the space view. When an archetype in the view is missing a component included in this set, the value of default will be used instead of the normal fallback for the visualizer.</p> <p> TYPE: <code>list[Union[AsComponents, ComponentBatchLike]]</code> DEFAULT: <code>[]</code> </p> <code>overrides</code> <p>Dictionary of overrides to apply to the space view. The key is the path to the entity where the override should be applied. The value is a list of component or component batches to apply to the entity.</p> <p>Important note: the path must be a fully qualified entity path starting at the root. The override paths do not yet support <code>$origin</code> relative paths or glob expressions. This will be addressed in https://github.com/rerun-io/rerun/issues/6673.</p> <p> TYPE: <code>dict[EntityPathLike, list[ComponentBatchLike]]</code> DEFAULT: <code>{}</code> </p> <code>axis_y</code> <p>Configures the vertical axis of the plot.</p> <p> TYPE: <code>ScalarAxis | None</code> DEFAULT: <code>None</code> </p> <code>plot_legend</code> <p>Configures the legend of the plot.</p> <p> TYPE: <code>PlotLegend | Corner2D | None</code> DEFAULT: <code>None</code> </p> <code>time_ranges</code> <p>Configures which range on each timeline is shown by this view (unless specified differently per entity).</p> <p>If not specified, the default is to show the entire timeline. If a timeline is specified more than once, the first entry will be used.</p> <p> TYPE: <code>VisibleTimeRanges | VisibleTimeRangeLike | Sequence[VisibleTimeRangeLike] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TimeSeriesView.blueprint_path","title":"<code>def blueprint_path()</code>","text":"<p>The blueprint path where this space view will be logged.</p> <p>Note that although this is an <code>EntityPath</code>, is scoped to the blueprint tree and not a part of the regular data hierarchy.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TimeSeriesView.to_blueprint","title":"<code>def to_blueprint()</code>","text":"<p>Convert this space view to a full blueprint.</p>"},{"location":"common/blueprint_views/#rerun.blueprint.views.TimeSeriesView.to_container","title":"<code>def to_container()</code>","text":"<p>Convert this space view to a container.</p>"},{"location":"common/columnar_api/","title":"Columnar API","text":""},{"location":"common/columnar_api/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/columnar_api/#rerun.TimeNanosColumn","title":"<code>class TimeNanosColumn</code>","text":"<p>         Bases: <code>TimeColumnLike</code></p> <p>A column of time values that are represented as integer nanoseconds.</p> <p>Columnar equivalent to <code>rerun.set_time_nanos</code>.</p>"},{"location":"common/columnar_api/#rerun.TimeNanosColumn.__init__","title":"<code>def __init__(timeline, times)</code>","text":"<p>Create a column of integer nanoseconds time values.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline.</p> <p> TYPE: <code>str</code> </p> <code>times</code> <p>An iterable of integer nanosecond time values.</p> <p> TYPE: <code>Iterable[int]</code> </p>"},{"location":"common/columnar_api/#rerun.TimeNanosColumn.timeline_name","title":"<code>def timeline_name()</code>","text":"<p>Returns the name of the timeline.</p>"},{"location":"common/columnar_api/#rerun.TimeSecondsColumn","title":"<code>class TimeSecondsColumn</code>","text":"<p>         Bases: <code>TimeColumnLike</code></p> <p>A column of time values that are represented as floating point seconds.</p> <p>Columnar equivalent to <code>rerun.set_time_seconds</code>.</p>"},{"location":"common/columnar_api/#rerun.TimeSecondsColumn.__init__","title":"<code>def __init__(timeline, times)</code>","text":"<p>Create a column of floating point seconds time values.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline.</p> <p> TYPE: <code>str</code> </p> <code>times</code> <p>An iterable of floating point second time values.</p> <p> TYPE: <code>Iterable[float]</code> </p>"},{"location":"common/columnar_api/#rerun.TimeSecondsColumn.timeline_name","title":"<code>def timeline_name()</code>","text":"<p>Returns the name of the timeline.</p>"},{"location":"common/columnar_api/#rerun.TimeSequenceColumn","title":"<code>class TimeSequenceColumn</code>","text":"<p>         Bases: <code>TimeColumnLike</code></p> <p>A column of time values that are represented as an integer sequence.</p> <p>Columnar equivalent to <code>rerun.set_time_sequence</code>.</p>"},{"location":"common/columnar_api/#rerun.TimeSequenceColumn.__init__","title":"<code>def __init__(timeline, times)</code>","text":"<p>Create a column of integer sequence time values.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline.</p> <p> TYPE: <code>str</code> </p> <code>times</code> <p>An iterable of integer time values.</p> <p> TYPE: <code>Iterable[int]</code> </p>"},{"location":"common/columnar_api/#rerun.TimeSequenceColumn.timeline_name","title":"<code>def timeline_name()</code>","text":"<p>Returns the name of the timeline.</p>"},{"location":"common/columnar_api/#rerun.send_columns","title":"<code>def send_columns(entity_path, times, components, recording=None, strict=None)</code>","text":"<p>Send columnar data to Rerun.</p> <p>Unlike the regular <code>log</code> API, which is row-oriented, this API lets you submit the data in a columnar form. Each <code>TimeColumnLike</code> and <code>ComponentColumnLike</code> object represents a column of data that will be sent to Rerun. The lengths of all of these columns must match, and all data that shares the same index across the different columns will act as a single logical row, equivalent to a single call to <code>rr.log()</code>.</p> <p>Note that this API ignores any stateful time set on the log stream via the <code>rerun.set_time_*</code> APIs. Furthermore, this will not inject the default timelines <code>log_tick</code> and <code>log_time</code> timeline columns.</p> <p>When using a regular <code>ComponentBatch</code> input, the batch data will map to single-valued component instances at each timepoint.</p> <p>For example, scalars would be logged as: <pre><code>times = np.arange(0, 64)\nscalars = np.sin(times / 10.0)\n\nrr.send_columns(\n    \"scalars\",\n    times=[rr.TimeSequenceColumn(\"step\", times)],\n    components=[rr.components.ScalarBatch(scalars)],\n)\n</code></pre> In the viewer this will show up as 64 individual scalar values, one for each timepoint.</p> <p>However, it is still possible to send temporal batches of batch data. To do this the source data first must be created as a single contiguous batch, and can then be partitioned using the <code>.partition()</code> helper on the <code>ComponentBatch</code> objects.</p> <p>For example, to log 5 batches of 20 point clouds, first create a batch of 100 (20 * 5) point clouds and then partition it into 5 batches of 20 point clouds: <pre><code>times = np.arange(0, 5)\npositions = rng.uniform(-5, 5, size=[100, 3])\n\nrr.send_columns(\n    \"points\",\n    times=[rr.TimeSequenceColumn(\"step\", times)],\n    components=[\n        rr.Points3D.indicator(),\n        rr.components.Position3DBatch(positions).partition([20, 20, 20, 20, 20]),\n    ],\n)\n</code></pre> In the viewer this will show up as 5 individual point clouds, one for each timepoint.</p> PARAMETER DESCRIPTION <code>entity_path</code> <p>Path to the entity in the space hierarchy.</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> <p> TYPE: <code>str</code> </p> <code>times</code> <p>The time values of this batch of data. Each <code>TimeColumnLike</code> object represents a single column of timestamps. Generally, you should use one of the provided classes: <code>TimeSequenceColumn</code>, <code>TimeSecondsColumn</code>, or <code>TimeNanosColumn</code>.</p> <p> TYPE: <code>Iterable[TimeColumnLike]</code> </p> <code>components</code> <p>The columns of components to log. Each object represents a single column of data.</p> <p>If a batch of components is passed, it will be partitioned with one element per timepoint. In order to send multiple components per time value, explicitly create a <code>ComponentColumn</code> either by constructing it directly, or by calling the <code>.partition()</code> method on a <code>ComponentBatch</code> type.</p> <p> TYPE: <code>Iterable[Union[ComponentBatchMixin, ComponentColumn]]</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If True, raise exceptions on non-loggable data. If False, warn on non-loggable data. if None, use the global default from <code>rerun.strict_mode()</code></p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/components/","title":"Components","text":""},{"location":"common/components/#rerun.components","title":"<code>rerun.components</code>","text":""},{"location":"common/components/#rerun.components.AggregationPolicy","title":"<code>class AggregationPolicy</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Policy for aggregation of multiple scalar plot values.</p> <p>This is used for lines in plots when the X axis distance of individual points goes below a single pixel, i.e. a single pixel covers more than one tick worth of data. It can greatly improve performance (and readability) in such situations as it prevents overdraw.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.Average","title":"<code>Average = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Average all points in the range together.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.Max","title":"<code>Max = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Keep only the maximum values in the range.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.Min","title":"<code>Min = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Keep only the minimum values in the range.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.MinMax","title":"<code>MinMax = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Keep both the minimum and maximum values in the range.</p> <p>This will yield two aggregated points instead of one, effectively creating a vertical line.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.MinMaxAverage","title":"<code>MinMaxAverage = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Find both the minimum and maximum values in the range, then use the average of those.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.Off","title":"<code>Off = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>No aggregation.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/components/#rerun.components.AggregationPolicy.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/components/#rerun.components.AlbedoFactor","title":"<code>class AlbedoFactor</code>","text":"<p>         Bases: <code>Rgba32</code>, <code>ComponentMixin</code></p> <p>Component: A color multiplier, usually applied to a whole entity, e.g. a mesh.</p>"},{"location":"common/components/#rerun.components.AlbedoFactor.__init__","title":"<code>def __init__(rgba)</code>","text":"<p>Create a new instance of the Rgba32 datatype.</p>"},{"location":"common/components/#rerun.components.AlbedoFactor.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AlbedoFactor.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AlbedoFactor.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AnnotationContext","title":"<code>class AnnotationContext</code>","text":"<p>         Bases: <code>AnnotationContextExt</code>, <code>ComponentMixin</code></p> <p>Component: The annotation context provides additional information on how to display entities.</p> <p>Entities can use <code>datatypes.ClassId</code>s and <code>datatypes.KeypointId</code>s to provide annotations, and the labels and colors will be looked up in the appropriate annotation context. We use the first annotation context we find in the path-hierarchy when searching up through the ancestors of a given entity path.</p>"},{"location":"common/components/#rerun.components.AnnotationContext.__init__","title":"<code>def __init__(class_map)</code>","text":"<p>Create a new instance of the AnnotationContext component.</p> PARAMETER DESCRIPTION <code>class_map</code> <p>List of class descriptions, mapping class indices to class names, colors etc.</p> <p> TYPE: <code>AnnotationContextLike</code> </p>"},{"location":"common/components/#rerun.components.AnnotationContext.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AnnotationContext.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AnnotationContext.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AxisLength","title":"<code>class AxisLength</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The length of an axis in local units of the space.</p>"},{"location":"common/components/#rerun.components.AxisLength.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.AxisLength.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AxisLength.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.AxisLength.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Blob","title":"<code>class Blob</code>","text":"<p>         Bases: <code>Blob</code>, <code>ComponentMixin</code></p> <p>Component: A binary blob of data.</p>"},{"location":"common/components/#rerun.components.Blob.__init__","title":"<code>def __init__(data)</code>","text":"<p>Create a new instance of the Blob datatype.</p>"},{"location":"common/components/#rerun.components.Blob.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Blob.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Blob.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ClassId","title":"<code>class ClassId</code>","text":"<p>         Bases: <code>ClassId</code>, <code>ComponentMixin</code></p> <p>Component: A 16-bit ID representing a type of semantic class.</p>"},{"location":"common/components/#rerun.components.ClassId.__init__","title":"<code>def __init__(id)</code>","text":"<p>Create a new instance of the ClassId datatype.</p>"},{"location":"common/components/#rerun.components.ClassId.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ClassId.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ClassId.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ClearIsRecursive","title":"<code>class ClearIsRecursive</code>","text":"<p>         Bases: <code>ClearIsRecursiveExt</code>, <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Configures how a clear operation should behave - recursive or not.</p>"},{"location":"common/components/#rerun.components.ClearIsRecursive.__init__","title":"<code>def __init__(recursive=True)</code>","text":"<p>Disconnect an entity from its parent.</p> PARAMETER DESCRIPTION <code>recursive</code> <p>If true, also clears all recursive children entities.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"common/components/#rerun.components.ClearIsRecursive.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ClearIsRecursive.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ClearIsRecursive.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Color","title":"<code>class Color</code>","text":"<p>         Bases: <code>Rgba32</code>, <code>ComponentMixin</code></p> <p>Component: An RGBA color with unmultiplied/separate alpha, in sRGB gamma space with linear alpha.</p> <p>The color is stored as a 32-bit integer, where the most significant byte is <code>R</code> and the least significant byte is <code>A</code>.</p> <p>Float colors are assumed to be in 0-1 gamma sRGB space. All other colors are assumed to be in 0-255 gamma sRGB space. If there is an alpha, we assume it is in linear space, and separate (NOT pre-multiplied).</p>"},{"location":"common/components/#rerun.components.Color.__init__","title":"<code>def __init__(rgba)</code>","text":"<p>Create a new instance of the Rgba32 datatype.</p>"},{"location":"common/components/#rerun.components.Color.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Color.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Color.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Colormap","title":"<code>class Colormap</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Colormap for mapping scalar values within a given range to a color.</p> <p>This provides a number of popular pre-defined colormaps. In the future, the Rerun Viewer will allow users to define their own colormaps, but currently the Viewer is limited to the types defined here.</p>"},{"location":"common/components/#rerun.components.Colormap.CyanToYellow","title":"<code>CyanToYellow = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Rasmusgo's Cyan to Yellow colormap</p> <p>This is a perceptually uniform colormap which is robust to color blindness. It is especially suited for visualizing signed values. It interpolates from cyan to blue to dark gray to brass to yellow.</p>"},{"location":"common/components/#rerun.components.Colormap.Grayscale","title":"<code>Grayscale = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A simple black to white gradient.</p> <p>This is a sRGB gray gradient which is perceptually uniform.</p>"},{"location":"common/components/#rerun.components.Colormap.Inferno","title":"<code>Inferno = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Inferno colormap from Matplotlib.</p> <p>This is a perceptually uniform colormap. It interpolates from black to red to bright yellow.</p>"},{"location":"common/components/#rerun.components.Colormap.Magma","title":"<code>Magma = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Magma colormap from Matplotlib.</p> <p>This is a perceptually uniform colormap. It interpolates from black to purple to white.</p>"},{"location":"common/components/#rerun.components.Colormap.Plasma","title":"<code>Plasma = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Plasma colormap from Matplotlib.</p> <p>This is a perceptually uniform colormap. It interpolates from dark blue to purple to yellow.</p>"},{"location":"common/components/#rerun.components.Colormap.Turbo","title":"<code>Turbo = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Google's Turbo colormap map.</p> <p>This is a perceptually non-uniform rainbow colormap addressing many issues of more traditional rainbow colormaps like Jet. It is more perceptually uniform without sharp transitions and is more colorblind-friendly. Details: https://research.google/blog/turbo-an-improved-rainbow-colormap-for-visualization/</p>"},{"location":"common/components/#rerun.components.Colormap.Viridis","title":"<code>Viridis = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Viridis colormap from Matplotlib</p> <p>This is a perceptually uniform colormap which is robust to color blindness. It interpolates from dark purple to green to yellow.</p>"},{"location":"common/components/#rerun.components.Colormap.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/components/#rerun.components.Colormap.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/components/#rerun.components.DepthMeter","title":"<code>class DepthMeter</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The world-&gt;depth map scaling factor.</p> <p>This measures how many depth map units are in a world unit. For instance, if a depth map uses millimeters and the world uses meters, this value would be <code>1000</code>.</p> <p>Note that the only effect on 2D views is the physical depth values shown when hovering the image. In 3D views on the other hand, this affects where the points of the point cloud are placed.</p>"},{"location":"common/components/#rerun.components.DepthMeter.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.DepthMeter.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DepthMeter.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DepthMeter.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DisconnectedSpace","title":"<code>class DisconnectedSpace</code>","text":"<p>         Bases: <code>DisconnectedSpaceExt</code>, <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Spatially disconnect this entity from its parent.</p> <p>Specifies that the entity path at which this is logged is spatially disconnected from its parent, making it impossible to transform the entity path into its parent's space and vice versa. It only applies to space views that work with spatial transformations, i.e. 2D &amp; 3D space views. This is useful for specifying that a subgraph is independent of the rest of the scene.</p>"},{"location":"common/components/#rerun.components.DisconnectedSpace.__init__","title":"<code>def __init__(is_disconnected=True)</code>","text":"<p>Disconnect an entity from its parent.</p> PARAMETER DESCRIPTION <code>is_disconnected</code> <p>Whether or not the entity should be disconnected from the rest of the scene. Set to <code>True</code> to disconnect the entity from its parent. Set to <code>False</code> to disable the effects of this component, (re-)connecting the entity to its parent again.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"common/components/#rerun.components.DisconnectedSpace.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DisconnectedSpace.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DisconnectedSpace.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DrawOrder","title":"<code>class DrawOrder</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: Draw order of 2D elements. Higher values are drawn on top of lower values.</p> <p>An entity can have only a single draw order component. Within an entity draw order is governed by the order of the components.</p> <p>Draw order for entities with the same draw order is generally undefined.</p>"},{"location":"common/components/#rerun.components.DrawOrder.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.DrawOrder.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DrawOrder.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.DrawOrder.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.EntityPath","title":"<code>class EntityPath</code>","text":"<p>         Bases: <code>EntityPath</code>, <code>ComponentMixin</code></p> <p>Component: A path to an entity, usually to reference some data that is part of the target entity.</p>"},{"location":"common/components/#rerun.components.EntityPath.__init__","title":"<code>def __init__(path)</code>","text":"<p>Create a new instance of the EntityPath datatype.</p>"},{"location":"common/components/#rerun.components.EntityPath.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.EntityPath.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.EntityPath.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.FillMode","title":"<code>class FillMode</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: How a geometric shape is drawn and colored.</p>"},{"location":"common/components/#rerun.components.FillMode.DenseWireframe","title":"<code>DenseWireframe = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Many lines are drawn to represent the surface of the shape in a see-through fashion.</p> <p>Examples of what this means:</p> <ul> <li>An <code>archetypes.Ellipsoids3D</code> will draw a wireframe triangle mesh that approximates each   ellipsoid.</li> <li>For <code>archetypes.Boxes3D</code>, it is the edges of the box, identical to <code>MajorWireframe</code>.</li> </ul>"},{"location":"common/components/#rerun.components.FillMode.MajorWireframe","title":"<code>MajorWireframe = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Lines are drawn around the parts of the shape which directly correspond to the logged data.</p> <p>Examples of what this means:</p> <ul> <li>An <code>archetypes.Ellipsoids3D</code> will draw three axis-aligned ellipses that are cross-sections   of each ellipsoid, each of which displays two out of three of the sizes of the ellipsoid.</li> <li>For <code>archetypes.Boxes3D</code>, it is the edges of the box, identical to <code>DenseWireframe</code>.</li> </ul>"},{"location":"common/components/#rerun.components.FillMode.Solid","title":"<code>Solid = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The surface of the shape is filled in with a solid color. No lines are drawn.</p>"},{"location":"common/components/#rerun.components.FillMode.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/components/#rerun.components.FillMode.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/components/#rerun.components.FillRatio","title":"<code>class FillRatio</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: How much a primitive fills out the available space.</p> <p>Used for instance to scale the points of the point cloud created from <code>archetypes.DepthImage</code> projection in 3D views. Valid range is from 0 to max float although typically values above 1.0 are not useful.</p> <p>Defaults to 1.0.</p>"},{"location":"common/components/#rerun.components.FillRatio.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.FillRatio.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.FillRatio.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.FillRatio.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.GammaCorrection","title":"<code>class GammaCorrection</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: A gamma correction value to be used with a scalar value or color.</p> <p>Used to adjust the gamma of a color or scalar value between 0 and 1 before rendering. <code>new_value = old_value ^ gamma</code></p> <p>Valid range is from 0 (excluding) to max float. Defaults to 1.0 unless otherwise specified.</p>"},{"location":"common/components/#rerun.components.GammaCorrection.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.GammaCorrection.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.GammaCorrection.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.GammaCorrection.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.HalfSize2D","title":"<code>class HalfSize2D</code>","text":"<p>         Bases: <code>Vec2D</code>, <code>ComponentMixin</code></p> <p>Component: Half-size (radius) of a 2D box.</p> <p>Measured in its local coordinate system.</p> <p>The box extends both in negative and positive direction along each axis. Negative sizes indicate that the box is flipped along the respective axis, but this has no effect on how it is displayed.</p>"},{"location":"common/components/#rerun.components.HalfSize2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/components/#rerun.components.HalfSize2D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.HalfSize2D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.HalfSize2D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.HalfSize3D","title":"<code>class HalfSize3D</code>","text":"<p>         Bases: <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: Half-size (radius) of a 3D box.</p> <p>Measured in its local coordinate system.</p> <p>The box extends both in negative and positive direction along each axis. Negative sizes indicate that the box is flipped along the respective axis, but this has no effect on how it is displayed.</p>"},{"location":"common/components/#rerun.components.HalfSize3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/components/#rerun.components.HalfSize3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.HalfSize3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.HalfSize3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImageBuffer","title":"<code>class ImageBuffer</code>","text":"<p>         Bases: <code>Blob</code>, <code>ComponentMixin</code></p> <p>Component: A buffer that is known to store image data.</p> <p>To interpret the contents of this buffer, see, <code>components.ImageFormat</code>.</p>"},{"location":"common/components/#rerun.components.ImageBuffer.__init__","title":"<code>def __init__(data)</code>","text":"<p>Create a new instance of the Blob datatype.</p>"},{"location":"common/components/#rerun.components.ImageBuffer.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImageBuffer.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImageBuffer.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImageFormat","title":"<code>class ImageFormat</code>","text":"<p>         Bases: <code>ImageFormat</code>, <code>ComponentMixin</code></p> <p>Component: The metadata describing the contents of a <code>components.ImageBuffer</code>.</p>"},{"location":"common/components/#rerun.components.ImageFormat.__init__","title":"<code>def __init__(width, height, pixel_format=None, color_model=None, channel_datatype=None)</code>","text":"<p>Create a new instance of the ImageFormat datatype.</p> PARAMETER DESCRIPTION <code>width</code> <p>The width of the image in pixels.</p> <p> TYPE: <code>int</code> </p> <code>height</code> <p>The height of the image in pixels.</p> <p> TYPE: <code>int</code> </p> <code>pixel_format</code> <p>Used mainly for chroma downsampled formats and differing number of bits per channel.</p> <p>If specified, this takes precedence over both <code>datatypes.ColorModel</code> and <code>datatypes.ChannelDatatype</code> (which are ignored).</p> <p> TYPE: <code>PixelFormatLike | None</code> DEFAULT: <code>None</code> </p> <code>color_model</code> <p>L, RGB, RGBA, \u2026</p> <p>Also requires a <code>datatypes.ChannelDatatype</code> to fully specify the pixel format.</p> <p> TYPE: <code>ColorModelLike | None</code> DEFAULT: <code>None</code> </p> <code>channel_datatype</code> <p>The data type of each channel (e.g. the red channel) of the image data (U8, F16, \u2026).</p> <p>Also requires a <code>datatypes.ColorModel</code> to fully specify the pixel format.</p> <p> TYPE: <code>ChannelDatatypeLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/components/#rerun.components.ImageFormat.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImageFormat.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImageFormat.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImagePlaneDistance","title":"<code>class ImagePlaneDistance</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The distance from the camera origin to the image plane when the projection is shown in a 3D viewer.</p> <p>This is only used for visualization purposes, and does not affect the projection itself.</p>"},{"location":"common/components/#rerun.components.ImagePlaneDistance.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.ImagePlaneDistance.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImagePlaneDistance.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ImagePlaneDistance.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.KeypointId","title":"<code>class KeypointId</code>","text":"<p>         Bases: <code>KeypointId</code>, <code>ComponentMixin</code></p> <p>Component: A 16-bit ID representing a type of semantic keypoint within a class.</p> <p><code>KeypointId</code>s are only meaningful within the context of a [<code>rerun.datatypes.ClassDescription</code>].</p> <p>Used to look up an [<code>rerun.datatypes.AnnotationInfo</code>] for a Keypoint within the [<code>rerun.components.AnnotationContext</code>].</p>"},{"location":"common/components/#rerun.components.KeypointId.__init__","title":"<code>def __init__(id)</code>","text":"<p>Create a new instance of the KeypointId datatype.</p>"},{"location":"common/components/#rerun.components.KeypointId.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.KeypointId.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.KeypointId.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.LineStrip2D","title":"<code>class LineStrip2D</code>","text":"<p>         Bases: <code>LineStrip2DExt</code>, <code>ComponentMixin</code></p> <p>Component: A line strip in 2D space.</p> <p>A line strip is a list of points connected by line segments. It can be used to draw approximations of smooth curves.</p> <p>The points will be connected in order, like so: <pre><code>       2------3     5\n      /        \\   /\n0----1          \\ /\n                 4\n</code></pre></p>"},{"location":"common/components/#rerun.components.LineStrip2D.__init__","title":"<code>def __init__(points)</code>","text":"<p>Create a new instance of the LineStrip2D component.</p>"},{"location":"common/components/#rerun.components.LineStrip2D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.LineStrip2D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.LineStrip2D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.LineStrip3D","title":"<code>class LineStrip3D</code>","text":"<p>         Bases: <code>LineStrip3DExt</code>, <code>ComponentMixin</code></p> <p>Component: A line strip in 3D space.</p> <p>A line strip is a list of points connected by line segments. It can be used to draw approximations of smooth curves.</p> <p>The points will be connected in order, like so: <pre><code>       2------3     5\n      /        \\   /\n0----1          \\ /\n                 4\n</code></pre></p>"},{"location":"common/components/#rerun.components.LineStrip3D.__init__","title":"<code>def __init__(points)</code>","text":"<p>Create a new instance of the LineStrip3D component.</p>"},{"location":"common/components/#rerun.components.LineStrip3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.LineStrip3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.LineStrip3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.MagnificationFilter","title":"<code>class MagnificationFilter</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Filter used when magnifying an image/texture such that a single pixel/texel is displayed as multiple pixels on screen.</p>"},{"location":"common/components/#rerun.components.MagnificationFilter.Linear","title":"<code>Linear = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Linearly interpolate the nearest neighbors, creating a smoother look when zooming in.</p> <p>Used as default for mesh rendering.</p>"},{"location":"common/components/#rerun.components.MagnificationFilter.Nearest","title":"<code>Nearest = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Show the nearest pixel value.</p> <p>This will give a blocky appearance when zooming in. Used as default when rendering 2D images.</p>"},{"location":"common/components/#rerun.components.MagnificationFilter.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/components/#rerun.components.MagnificationFilter.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/components/#rerun.components.MarkerShape","title":"<code>class MarkerShape</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: The visual appearance of a point in e.g. a 2D plot.</p>"},{"location":"common/components/#rerun.components.MarkerShape.Asterisk","title":"<code>Asterisk = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>*</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Circle","title":"<code>Circle = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u23fa</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Cross","title":"<code>Cross = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>x</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Diamond","title":"<code>Diamond = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u25c6</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Down","title":"<code>Down = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u25bc</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Left","title":"<code>Left = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u25c0</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Plus","title":"<code>Plus = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>+</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Right","title":"<code>Right = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u25b6</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Square","title":"<code>Square = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u25fc\ufe0f</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.Up","title":"<code>Up = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>\u25b2</code></p>"},{"location":"common/components/#rerun.components.MarkerShape.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/components/#rerun.components.MarkerShape.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/components/#rerun.components.MarkerSize","title":"<code>class MarkerSize</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: Radius of a marker of a point in e.g. a 2D plot, measured in UI points.</p>"},{"location":"common/components/#rerun.components.MarkerSize.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.MarkerSize.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.MarkerSize.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.MarkerSize.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.MediaType","title":"<code>class MediaType</code>","text":"<p>         Bases: <code>MediaTypeExt</code>, <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: A standardized media type (RFC2046, formerly known as MIME types), encoded as a string.</p> <p>The complete reference of officially registered media types is maintained by the IANA and can be consulted at https://www.iana.org/assignments/media-types/media-types.xhtml.</p>"},{"location":"common/components/#rerun.components.MediaType.GLB","title":"<code>GLB: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Binary <code>glTF</code>: <code>model/gltf-binary</code>.</p> <p>https://www.iana.org/assignments/media-types/model/gltf-binary</p>"},{"location":"common/components/#rerun.components.MediaType.GLTF","title":"<code>GLTF: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>glTF</code>: <code>model/gltf+json</code>.</p> <p>https://www.iana.org/assignments/media-types/model/gltf+json</p>"},{"location":"common/components/#rerun.components.MediaType.JPEG","title":"<code>JPEG: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>JPEG image: <code>image/jpeg</code>.</p>"},{"location":"common/components/#rerun.components.MediaType.MARKDOWN","title":"<code>MARKDOWN: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Markdown: <code>text/markdown</code>.</p> <p>https://www.iana.org/assignments/media-types/text/markdown</p>"},{"location":"common/components/#rerun.components.MediaType.MP4","title":"<code>MP4: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>mp4</code>: <code>video/mp4</code>.</p> <p>https://www.iana.org/assignments/media-types/video/mp4</p>"},{"location":"common/components/#rerun.components.MediaType.OBJ","title":"<code>OBJ: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Wavefront .obj: <code>model/obj</code>.</p> <p>https://www.iana.org/assignments/media-types/model/obj</p>"},{"location":"common/components/#rerun.components.MediaType.PNG","title":"<code>PNG: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>PNG image: <code>image/png</code>.</p> <p>https://www.iana.org/assignments/media-types/image/png</p>"},{"location":"common/components/#rerun.components.MediaType.STL","title":"<code>STL: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Stereolithography Model <code>stl</code>: <code>model/stl</code>. Either binary or ASCII.</p> <p>https://www.iana.org/assignments/media-types/model/stl</p>"},{"location":"common/components/#rerun.components.MediaType.TEXT","title":"<code>TEXT: MediaType = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Plain text: <code>text/plain</code>.</p>"},{"location":"common/components/#rerun.components.MediaType.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/components/#rerun.components.MediaType.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.MediaType.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.MediaType.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Name","title":"<code>class Name</code>","text":"<p>         Bases: <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: A display name, typically for an entity or a item like a plot series.</p>"},{"location":"common/components/#rerun.components.Name.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/components/#rerun.components.Name.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Name.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Name.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Opacity","title":"<code>class Opacity</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: Degree of transparency ranging from 0.0 (fully transparent) to 1.0 (fully opaque).</p> <p>The final opacity value may be a result of multiplication with alpha values as specified by other color sources. Unless otherwise specified, the default value is 1.</p>"},{"location":"common/components/#rerun.components.Opacity.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.Opacity.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Opacity.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Opacity.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PinholeProjection","title":"<code>class PinholeProjection</code>","text":"<p>         Bases: <code>Mat3x3</code>, <code>ComponentMixin</code></p> <p>Component: Camera projection, from image coordinates to view coordinates.</p> <p>Child from parent. Image coordinates from camera view coordinates.</p> Example: <pre><code>1496.1     0.0  980.5\n   0.0  1496.1  744.5\n   0.0     0.0    1.0\n</code></pre>"},{"location":"common/components/#rerun.components.PinholeProjection.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PinholeProjection.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PinholeProjection.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseRotationAxisAngle","title":"<code>class PoseRotationAxisAngle</code>","text":"<p>         Bases: <code>RotationAxisAngle</code>, <code>ComponentMixin</code></p> <p>Component: 3D rotation represented by a rotation around a given axis that doesn't propagate in the transform hierarchy.</p>"},{"location":"common/components/#rerun.components.PoseRotationAxisAngle.__init__","title":"<code>def __init__(axis, angle=None, *, radians=None, degrees=None)</code>","text":"<p>Create a new instance of the RotationAxisAngle datatype.</p> PARAMETER DESCRIPTION <code>axis</code> <p>Axis to rotate around.</p> <p>This is not required to be normalized.  If normalization fails (typically because the vector is length zero), the rotation is silently  ignored.</p> <p> TYPE: <code>Vec3DLike</code> </p> <code>angle</code> <p>How much to rotate around the axis.</p> <p> TYPE: <code>AngleLike | None</code> DEFAULT: <code>None</code> </p> <code>radians</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>degrees</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>degrees</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>radians</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/components/#rerun.components.PoseRotationAxisAngle.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseRotationAxisAngle.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseRotationAxisAngle.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseRotationQuat","title":"<code>class PoseRotationQuat</code>","text":"<p>         Bases: <code>Quaternion</code>, <code>ComponentMixin</code></p> <p>Component: A 3D rotation expressed as a quaternion that doesn't propagate in the transform hierarchy.</p> <p>Note: although the x,y,z,w components of the quaternion will be passed through to the datastore as provided, when used in the Viewer, quaternions will always be normalized.</p>"},{"location":"common/components/#rerun.components.PoseRotationQuat.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseRotationQuat.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseRotationQuat.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseScale3D","title":"<code>class PoseScale3D</code>","text":"<p>         Bases: <code>PoseScale3DExt</code>, <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: A 3D scale factor that doesn't propagate in the transform hierarchy.</p> <p>A scale of 1.0 means no scaling. A scale of 2.0 means doubling the size. Each component scales along the corresponding axis.</p>"},{"location":"common/components/#rerun.components.PoseScale3D.__init__","title":"<code>def __init__(uniform_or_per_axis=True)</code>","text":"<p>3D scaling factor.</p> <p>A scale of 1.0 means no scaling. A scale of 2.0 means doubling the size. Each component scales along the corresponding axis.</p> PARAMETER DESCRIPTION <code>uniform_or_per_axis</code> <p>If a single value is given, it is applied the same to all three axis (uniform scaling).</p> <p> TYPE: <code>Union[Vec3DLike, Float32Like]</code> DEFAULT: <code>True</code> </p>"},{"location":"common/components/#rerun.components.PoseScale3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseScale3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseScale3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseTransformMat3x3","title":"<code>class PoseTransformMat3x3</code>","text":"<p>         Bases: <code>Mat3x3</code>, <code>ComponentMixin</code></p> <p>Component: A 3x3 transformation matrix Matrix that doesn't propagate in the transform hierarchy.</p> <p>3x3 matrixes are able to represent any affine transformation in 3D space, i.e. rotation, scaling, shearing, reflection etc.</p> <p>Matrices in Rerun are stored as flat list of coefficients in column-major order: <pre><code>            column 0       column 1       column 2\n       -------------------------------------------------\nrow 0 | flat_columns[0] flat_columns[3] flat_columns[6]\nrow 1 | flat_columns[1] flat_columns[4] flat_columns[7]\nrow 2 | flat_columns[2] flat_columns[5] flat_columns[8]\n</code></pre></p> <p>However, construction is done from a list of rows, which follows NumPy's convention: <pre><code>np.testing.assert_array_equal(\n    rr.components.PoseTransformMat3x3([1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns, np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32)\n)\nnp.testing.assert_array_equal(\n    rr.components.PoseTransformMat3x3([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32),\n)\n</code></pre> If you want to construct a matrix from a list of columns instead, use the named <code>columns</code> parameter: <pre><code>np.testing.assert_array_equal(\n    rr.components.PoseTransformMat3x3(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.components.PoseTransformMat3x3(columns=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\n</code></pre></p>"},{"location":"common/components/#rerun.components.PoseTransformMat3x3.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseTransformMat3x3.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseTransformMat3x3.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseTranslation3D","title":"<code>class PoseTranslation3D</code>","text":"<p>         Bases: <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: A translation vector in 3D space that doesn't propagate in the transform hierarchy.</p>"},{"location":"common/components/#rerun.components.PoseTranslation3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/components/#rerun.components.PoseTranslation3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseTranslation3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.PoseTranslation3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Position2D","title":"<code>class Position2D</code>","text":"<p>         Bases: <code>Vec2D</code>, <code>ComponentMixin</code></p> <p>Component: A position in 2D space.</p>"},{"location":"common/components/#rerun.components.Position2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/components/#rerun.components.Position2D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Position2D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Position2D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Position3D","title":"<code>class Position3D</code>","text":"<p>         Bases: <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: A position in 3D space.</p>"},{"location":"common/components/#rerun.components.Position3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/components/#rerun.components.Position3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Position3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Position3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Radius","title":"<code>class Radius</code>","text":"<p>         Bases: <code>RadiusExt</code>, <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The radius of something, e.g. a point.</p> <p>Internally, positive values indicate scene units, whereas negative values are interpreted as UI points.</p> <p>UI points are independent of zooming in Views, but are sensitive to the application UI scaling. at 100% UI scaling, UI points are equal to pixels The Viewer's UI scaling defaults to the OS scaling which typically is 100% for full HD screens and 200% for 4k screens.</p>"},{"location":"common/components/#rerun.components.Radius.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.Radius.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Radius.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Radius.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Radius.ui_points","title":"<code>def ui_points(radii)</code>  <code>staticmethod</code>","text":"<p>Create a radius or list of radii in UI points.</p> <p>By default, radii are interpreted as scene units. Ui points on the other hand are independent of zooming in Views, but are sensitive to the application UI scaling. at 100% UI scaling, UI points are equal to pixels The Viewer's UI scaling defaults to the OS scaling which typically is 100% for full HD screens and 200% for 4k screens.</p> <p>Internally, ui radii are stored as negative values. Therefore, all this method does is to ensure that all returned values are negative.</p>"},{"location":"common/components/#rerun.components.Range1D","title":"<code>class Range1D</code>","text":"<p>         Bases: <code>Range1D</code>, <code>ComponentMixin</code></p> <p>Component: A 1D range, specifying a lower and upper bound.</p>"},{"location":"common/components/#rerun.components.Range1D.__init__","title":"<code>def __init__(range)</code>","text":"<p>Create a new instance of the Range1D datatype.</p>"},{"location":"common/components/#rerun.components.Range1D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Range1D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Range1D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Resolution","title":"<code>class Resolution</code>","text":"<p>         Bases: <code>Vec2D</code>, <code>ComponentMixin</code></p> <p>Component: Pixel resolution width &amp; height, e.g. of a camera sensor.</p> <p>Typically in integer units, but for some use cases floating point may be used.</p>"},{"location":"common/components/#rerun.components.Resolution.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/components/#rerun.components.Resolution.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Resolution.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Resolution.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.RotationAxisAngle","title":"<code>class RotationAxisAngle</code>","text":"<p>         Bases: <code>RotationAxisAngle</code>, <code>ComponentMixin</code></p> <p>Component: 3D rotation represented by a rotation around a given axis.</p>"},{"location":"common/components/#rerun.components.RotationAxisAngle.__init__","title":"<code>def __init__(axis, angle=None, *, radians=None, degrees=None)</code>","text":"<p>Create a new instance of the RotationAxisAngle datatype.</p> PARAMETER DESCRIPTION <code>axis</code> <p>Axis to rotate around.</p> <p>This is not required to be normalized.  If normalization fails (typically because the vector is length zero), the rotation is silently  ignored.</p> <p> TYPE: <code>Vec3DLike</code> </p> <code>angle</code> <p>How much to rotate around the axis.</p> <p> TYPE: <code>AngleLike | None</code> DEFAULT: <code>None</code> </p> <code>radians</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>degrees</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>degrees</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>radians</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/components/#rerun.components.RotationAxisAngle.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.RotationAxisAngle.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.RotationAxisAngle.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.RotationQuat","title":"<code>class RotationQuat</code>","text":"<p>         Bases: <code>Quaternion</code>, <code>ComponentMixin</code></p> <p>Component: A 3D rotation expressed as a quaternion.</p> <p>Note: although the x,y,z,w components of the quaternion will be passed through to the datastore as provided, when used in the Viewer, quaternions will always be normalized.</p>"},{"location":"common/components/#rerun.components.RotationQuat.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.RotationQuat.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.RotationQuat.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Scalar","title":"<code>class Scalar</code>","text":"<p>         Bases: <code>Float64</code>, <code>ComponentMixin</code></p> <p>Component: A scalar value, encoded as a 64-bit floating point.</p> <p>Used for time series plots.</p>"},{"location":"common/components/#rerun.components.Scalar.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float64 datatype.</p>"},{"location":"common/components/#rerun.components.Scalar.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Scalar.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Scalar.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Scale3D","title":"<code>class Scale3D</code>","text":"<p>         Bases: <code>Scale3DExt</code>, <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: A 3D scale factor.</p> <p>A scale of 1.0 means no scaling. A scale of 2.0 means doubling the size. Each component scales along the corresponding axis.</p>"},{"location":"common/components/#rerun.components.Scale3D.__init__","title":"<code>def __init__(uniform_or_per_axis=True)</code>","text":"<p>3D scaling factor.</p> <p>A scale of 1.0 means no scaling. A scale of 2.0 means doubling the size. Each component scales along the corresponding axis.</p> PARAMETER DESCRIPTION <code>uniform_or_per_axis</code> <p>If a single value is given, it is applied the same to all three axis (uniform scaling).</p> <p> TYPE: <code>Union[Vec3DLike, Float32Like]</code> DEFAULT: <code>True</code> </p>"},{"location":"common/components/#rerun.components.Scale3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Scale3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Scale3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ShowLabels","title":"<code>class ShowLabels</code>","text":"<p>         Bases: <code>Bool</code>, <code>ComponentMixin</code></p> <p>Component: Whether the entity's <code>components.Text</code> label is shown.</p> <p>The main purpose of this component existing separately from the labels themselves is to be overridden when desired, to allow hiding and showing from the viewer and blueprints.</p>"},{"location":"common/components/#rerun.components.ShowLabels.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/components/#rerun.components.ShowLabels.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ShowLabels.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ShowLabels.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.StrokeWidth","title":"<code>class StrokeWidth</code>","text":"<p>         Bases: <code>Float32</code>, <code>ComponentMixin</code></p> <p>Component: The width of a stroke specified in UI points.</p>"},{"location":"common/components/#rerun.components.StrokeWidth.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/components/#rerun.components.StrokeWidth.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.StrokeWidth.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.StrokeWidth.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorData","title":"<code>class TensorData</code>","text":"<p>         Bases: <code>TensorData</code>, <code>ComponentMixin</code></p> <p>Component: An N-dimensional array of numbers.</p> <p>The number of dimensions and their respective lengths is specified by the <code>shape</code> field. The dimensions are ordered from outermost to innermost. For example, in the common case of a 2D RGB Image, the shape would be <code>[height, width, channel]</code>.</p> <p>These dimensions are combined with an index to look up values from the <code>buffer</code> field, which stores a contiguous array of typed values.</p>"},{"location":"common/components/#rerun.components.TensorData.__init__","title":"<code>def __init__(*, shape=None, buffer=None, array=None, dim_names=None)</code>","text":"<p>Construct a <code>TensorData</code> object.</p> <p>The <code>TensorData</code> object is internally represented by three fields: <code>shape</code> and <code>buffer</code>.</p> <p>This constructor provides additional arguments 'array', and 'dim_names'. When passing in a multi-dimensional array such as a <code>np.ndarray</code>, the <code>shape</code> and <code>buffer</code> fields will be populated automagically.</p> PARAMETER DESCRIPTION <code>self</code> <p>The TensorData object to construct.</p> <p> TYPE: <code>Any</code> </p> <code>shape</code> <p>The shape of the tensor. If None, and an array is provided, the shape will be inferred from the shape of the array.</p> <p> TYPE: <code>Sequence[TensorDimensionLike] | None</code> DEFAULT: <code>None</code> </p> <code>buffer</code> <p>The buffer of the tensor. If None, and an array is provided, the buffer will be generated from the array.</p> <p> TYPE: <code>TensorBufferLike | None</code> DEFAULT: <code>None</code> </p> <code>array</code> <p>A numpy array (or The array of the tensor. If None, the array will be inferred from the buffer.</p> <p> TYPE: <code>TensorLike | None</code> DEFAULT: <code>None</code> </p> <code>dim_names</code> <p>The names of the tensor dimensions when generating the shape from an array.</p> <p> TYPE: <code>Sequence[str | None] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/components/#rerun.components.TensorData.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorData.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorData.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorData.numpy","title":"<code>def numpy(force)</code>","text":"<p>Convert the TensorData back to a numpy array.</p>"},{"location":"common/components/#rerun.components.TensorDimensionIndexSelection","title":"<code>class TensorDimensionIndexSelection</code>","text":"<p>         Bases: <code>TensorDimensionIndexSelection</code>, <code>ComponentMixin</code></p> <p>Component: Specifies a concrete index on a tensor dimension.</p>"},{"location":"common/components/#rerun.components.TensorDimensionIndexSelection.__init__","title":"<code>def __init__(dimension, index)</code>","text":"<p>Create a new instance of the TensorDimensionIndexSelection datatype.</p> PARAMETER DESCRIPTION <code>dimension</code> <p>The dimension number to select.</p> <p> TYPE: <code>int</code> </p> <code>index</code> <p>The index along the dimension to use.</p> <p> TYPE: <code>int</code> </p>"},{"location":"common/components/#rerun.components.TensorDimensionIndexSelection.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorDimensionIndexSelection.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorDimensionIndexSelection.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorHeightDimension","title":"<code>class TensorHeightDimension</code>","text":"<p>         Bases: <code>TensorDimensionSelection</code>, <code>ComponentMixin</code></p> <p>Component: Specifies which dimension to use for height.</p>"},{"location":"common/components/#rerun.components.TensorHeightDimension.__init__","title":"<code>def __init__(dimension, *, invert=False)</code>","text":"<p>Create a new instance of the TensorDimensionSelection datatype.</p> PARAMETER DESCRIPTION <code>dimension</code> <p>The dimension number to select.</p> <p> TYPE: <code>int</code> </p> <code>invert</code> <p>Invert the direction of the dimension.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/components/#rerun.components.TensorHeightDimension.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorHeightDimension.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorHeightDimension.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorWidthDimension","title":"<code>class TensorWidthDimension</code>","text":"<p>         Bases: <code>TensorDimensionSelection</code>, <code>ComponentMixin</code></p> <p>Component: Specifies which dimension to use for width.</p>"},{"location":"common/components/#rerun.components.TensorWidthDimension.__init__","title":"<code>def __init__(dimension, *, invert=False)</code>","text":"<p>Create a new instance of the TensorDimensionSelection datatype.</p> PARAMETER DESCRIPTION <code>dimension</code> <p>The dimension number to select.</p> <p> TYPE: <code>int</code> </p> <code>invert</code> <p>Invert the direction of the dimension.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/components/#rerun.components.TensorWidthDimension.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorWidthDimension.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TensorWidthDimension.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Texcoord2D","title":"<code>class Texcoord2D</code>","text":"<p>         Bases: <code>Vec2D</code>, <code>ComponentMixin</code></p> <p>Component: A 2D texture UV coordinate.</p> <p>Texture coordinates specify a position on a 2D texture. A range from 0-1 covers the entire texture in the respective dimension. Unless configured otherwise, the texture repeats outside of this range. Rerun uses top-left as the origin for UV coordinates.</p> <p>0     U     1 0 + --------- \u2192   |           . V |           .   |           . 1 \u2193 . . . . . .</p> <p>This is the same convention as in Vulkan/Metal/DX12/WebGPU, but (!) unlike OpenGL, which places the origin at the bottom-left.</p>"},{"location":"common/components/#rerun.components.Texcoord2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/components/#rerun.components.Texcoord2D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Texcoord2D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Texcoord2D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Text","title":"<code>class Text</code>","text":"<p>         Bases: <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: A string of text, e.g. for labels and text documents.</p>"},{"location":"common/components/#rerun.components.Text.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/components/#rerun.components.Text.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Text.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Text.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TextLogLevel","title":"<code>class TextLogLevel</code>","text":"<p>         Bases: <code>TextLogLevelExt</code>, <code>Utf8</code>, <code>ComponentMixin</code></p> <p>Component: The severity level of a text log message.</p> <p>Recommended to be one of: * <code>\"CRITICAL\"</code> * <code>\"ERROR\"</code> * <code>\"WARN\"</code> * <code>\"INFO\"</code> * <code>\"DEBUG\"</code> * <code>\"TRACE\"</code></p>"},{"location":"common/components/#rerun.components.TextLogLevel.CRITICAL","title":"<code>CRITICAL: TextLogLevel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Designates catastrophic failures.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.DEBUG","title":"<code>DEBUG: TextLogLevel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Designates lower priority information.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.ERROR","title":"<code>ERROR: TextLogLevel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Designates very serious errors.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.INFO","title":"<code>INFO: TextLogLevel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Designates useful information.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.TRACE","title":"<code>TRACE: TextLogLevel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Designates very low priority, often extremely verbose, information.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.WARN","title":"<code>WARN: TextLogLevel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Designates hazardous situations.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TextLogLevel.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TransformMat3x3","title":"<code>class TransformMat3x3</code>","text":"<p>         Bases: <code>Mat3x3</code>, <code>ComponentMixin</code></p> <p>Component: A 3x3 transformation matrix Matrix.</p> <p>3x3 matrixes are able to represent any affine transformation in 3D space, i.e. rotation, scaling, shearing, reflection etc.</p> <p>Matrices in Rerun are stored as flat list of coefficients in column-major order: <pre><code>            column 0       column 1       column 2\n       -------------------------------------------------\nrow 0 | flat_columns[0] flat_columns[3] flat_columns[6]\nrow 1 | flat_columns[1] flat_columns[4] flat_columns[7]\nrow 2 | flat_columns[2] flat_columns[5] flat_columns[8]\n</code></pre></p> <p>However, construction is done from a list of rows, which follows NumPy's convention: <pre><code>np.testing.assert_array_equal(\n    rr.components.TransformMat3x3([1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns, np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32)\n)\nnp.testing.assert_array_equal(\n    rr.components.TransformMat3x3([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32),\n)\n</code></pre> If you want to construct a matrix from a list of columns instead, use the named <code>columns</code> parameter: <pre><code>np.testing.assert_array_equal(\n    rr.components.TransformMat3x3(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.components.TransformMat3x3(columns=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\n</code></pre></p>"},{"location":"common/components/#rerun.components.TransformMat3x3.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TransformMat3x3.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TransformMat3x3.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TransformRelation","title":"<code>class TransformRelation</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Component: Specifies relation a spatial transform describes.</p>"},{"location":"common/components/#rerun.components.TransformRelation.ChildFromParent","title":"<code>ChildFromParent = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The transform describes how to transform into the child entity's space.</p> <p>E.g. a translation of (0, 1, 0) with this <code>components.TransformRelation</code> logged at <code>parent/child</code> means that from the point of view of <code>parent</code>, <code>parent/child</code> is translated -1 unit along <code>parent</code>'s Y axis. From perspective of <code>parent/child</code>, the <code>parent</code> entity is translated 1 unit along <code>parent/child</code>'s Y axis.</p>"},{"location":"common/components/#rerun.components.TransformRelation.ParentFromChild","title":"<code>ParentFromChild = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The transform describes how to transform into the parent entity's space.</p> <p>E.g. a translation of (0, 1, 0) with this <code>components.TransformRelation</code> logged at <code>parent/child</code> means that from the point of view of <code>parent</code>, <code>parent/child</code> is translated 1 unit along <code>parent</code>'s Y axis. From perspective of <code>parent/child</code>, the <code>parent</code> entity is translated -1 unit along <code>parent/child</code>'s Y axis.</p>"},{"location":"common/components/#rerun.components.TransformRelation.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/components/#rerun.components.TransformRelation.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/components/#rerun.components.Translation3D","title":"<code>class Translation3D</code>","text":"<p>         Bases: <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: A translation vector in 3D space.</p>"},{"location":"common/components/#rerun.components.Translation3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/components/#rerun.components.Translation3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Translation3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Translation3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TriangleIndices","title":"<code>class TriangleIndices</code>","text":"<p>         Bases: <code>UVec3D</code>, <code>ComponentMixin</code></p> <p>Component: The three indices of a triangle in a triangle mesh.</p>"},{"location":"common/components/#rerun.components.TriangleIndices.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the UVec3D datatype.</p>"},{"location":"common/components/#rerun.components.TriangleIndices.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TriangleIndices.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.TriangleIndices.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ValueRange","title":"<code>class ValueRange</code>","text":"<p>         Bases: <code>Range1D</code>, <code>ComponentMixin</code></p> <p>Component: Range of expected or valid values, specifying a lower and upper bound.</p>"},{"location":"common/components/#rerun.components.ValueRange.__init__","title":"<code>def __init__(range)</code>","text":"<p>Create a new instance of the Range1D datatype.</p>"},{"location":"common/components/#rerun.components.ValueRange.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ValueRange.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ValueRange.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Vector2D","title":"<code>class Vector2D</code>","text":"<p>         Bases: <code>Vec2D</code>, <code>ComponentMixin</code></p> <p>Component: A vector in 2D space.</p>"},{"location":"common/components/#rerun.components.Vector2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/components/#rerun.components.Vector2D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Vector2D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Vector2D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Vector3D","title":"<code>class Vector3D</code>","text":"<p>         Bases: <code>Vec3D</code>, <code>ComponentMixin</code></p> <p>Component: A vector in 3D space.</p>"},{"location":"common/components/#rerun.components.Vector3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/components/#rerun.components.Vector3D.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Vector3D.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.Vector3D.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.VideoTimestamp","title":"<code>class VideoTimestamp</code>","text":"<p>         Bases: <code>VideoTimestampExt</code>, <code>VideoTimestamp</code>, <code>ComponentMixin</code></p> <p>Component: Timestamp inside a <code>archetypes.AssetVideo</code>.</p>"},{"location":"common/components/#rerun.components.VideoTimestamp.__init__","title":"<code>def __init__(*, nanoseconds=None, seconds=None)</code>","text":"<p>Create a new instance of the VideoTimestamp component.</p> PARAMETER DESCRIPTION <code>nanoseconds</code> <p>Presentation timestamp in nanoseconds. Mutually exclusive with <code>seconds</code>.</p> <p> TYPE: <code>Union[int, None]</code> DEFAULT: <code>None</code> </p> <code>seconds</code> <p>Presentation timestamp in seconds. Mutually exclusive with <code>nanoseconds</code>.</p> <p> TYPE: <code>Union[float, None]</code> DEFAULT: <code>None</code> </p>"},{"location":"common/components/#rerun.components.VideoTimestamp.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.VideoTimestamp.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.VideoTimestamp.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.VideoTimestamp.milliseconds","title":"<code>def milliseconds(milliseconds)</code>  <code>staticmethod</code>","text":"<p>Create a video timestamp batch from milliseconds since video start.</p> PARAMETER DESCRIPTION <code>milliseconds</code> <p>Timestamp values in milliseconds since video start.</p> <p> TYPE: <code>ArrayLike</code> </p>"},{"location":"common/components/#rerun.components.VideoTimestamp.nanoseconds","title":"<code>def nanoseconds(nanoseconds)</code>  <code>staticmethod</code>","text":"<p>Create a video timestamp batch from nanoseconds since video start.</p> PARAMETER DESCRIPTION <code>nanoseconds</code> <p>Timestamp values in nanoseconds since video start.</p> <p> TYPE: <code>ArrayLike</code> </p>"},{"location":"common/components/#rerun.components.VideoTimestamp.seconds","title":"<code>def seconds(seconds)</code>  <code>staticmethod</code>","text":"<p>Create a video timestamp batch from seconds since video start.</p> PARAMETER DESCRIPTION <code>seconds</code> <p>Timestamp values in seconds since video start.</p> <p> TYPE: <code>ArrayLike</code> </p>"},{"location":"common/components/#rerun.components.ViewCoordinates","title":"<code>class ViewCoordinates</code>","text":"<p>         Bases: <code>ViewCoordinatesExt</code>, <code>ViewCoordinates</code>, <code>ComponentMixin</code></p> <p>Component: How we interpret the coordinate system of an entity/space.</p> <p>For instance: What is \"up\"? What does the Z axis mean?</p> <p>The three coordinates are always ordered as [x, y, z].</p> <p>For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points down, and the Z axis points forward.</p> <p>\u26a0 Rerun does not yet support left-handed coordinate systems.</p> <p>The following constants are used to represent the different directions:  * Up = 1  * Down = 2  * Right = 3  * Left = 4  * Forward = 5  * Back = 6</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BDL","title":"<code>BDL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Down, Z=Left</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BDR","title":"<code>BDR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Down, Z=Right</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BLD","title":"<code>BLD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Left, Z=Down</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BLU","title":"<code>BLU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Left, Z=Up</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BRD","title":"<code>BRD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Right, Z=Down</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BRU","title":"<code>BRU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Right, Z=Up</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BUL","title":"<code>BUL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Up, Z=Left</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.BUR","title":"<code>BUR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Back, Y=Up, Z=Right</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DBL","title":"<code>DBL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Back, Z=Left</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DBR","title":"<code>DBR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Back, Z=Right</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DFL","title":"<code>DFL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Forward, Z=Left</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DFR","title":"<code>DFR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Forward, Z=Right</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DLB","title":"<code>DLB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Left, Z=Back</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DLF","title":"<code>DLF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Left, Z=Forward</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DRB","title":"<code>DRB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Right, Z=Back</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.DRF","title":"<code>DRF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Right, Z=Forward</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FDL","title":"<code>FDL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Down, Z=Left</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FDR","title":"<code>FDR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Down, Z=Right</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FLD","title":"<code>FLD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Left, Z=Down</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FLU","title":"<code>FLU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Left, Z=Up</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FRD","title":"<code>FRD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Right, Z=Down</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FRU","title":"<code>FRU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Right, Z=Up</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FUL","title":"<code>FUL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Up, Z=Left</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.FUR","title":"<code>FUR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Forward, Y=Up, Z=Right</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LBD","title":"<code>LBD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Back, Z=Down</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LBU","title":"<code>LBU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Back, Z=Up</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LDB","title":"<code>LDB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Down, Z=Back</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LDF","title":"<code>LDF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Down, Z=Forward</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LEFT_HAND_X_DOWN","title":"<code>LEFT_HAND_X_DOWN: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Right, Z=Forward</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LEFT_HAND_X_UP","title":"<code>LEFT_HAND_X_UP: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Right, Z=Back</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LEFT_HAND_Y_DOWN","title":"<code>LEFT_HAND_Y_DOWN: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Down, Z=Back</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LEFT_HAND_Y_UP","title":"<code>LEFT_HAND_Y_UP: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Up, Z=Forward</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LEFT_HAND_Z_DOWN","title":"<code>LEFT_HAND_Z_DOWN: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Forward, Z=Down</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LEFT_HAND_Z_UP","title":"<code>LEFT_HAND_Z_UP: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Back, Z=Up</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LFD","title":"<code>LFD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Forward, Z=Down</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LFU","title":"<code>LFU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Forward, Z=Up</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LUB","title":"<code>LUB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Up, Z=Back</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.LUF","title":"<code>LUF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Left, Y=Up, Z=Forward</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RBD","title":"<code>RBD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Back, Z=Down</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RBU","title":"<code>RBU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Back, Z=Up</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RDB","title":"<code>RDB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Down, Z=Back</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RDF","title":"<code>RDF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Down, Z=Forward</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RFD","title":"<code>RFD: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Forward, Z=Down</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RFU","title":"<code>RFU: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Forward, Z=Up</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RIGHT_HAND_X_DOWN","title":"<code>RIGHT_HAND_X_DOWN: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Down, Y=Right, Z=Back</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RIGHT_HAND_X_UP","title":"<code>RIGHT_HAND_X_UP: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Right, Z=Forward</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RIGHT_HAND_Y_DOWN","title":"<code>RIGHT_HAND_Y_DOWN: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Down, Z=Forward</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RIGHT_HAND_Y_UP","title":"<code>RIGHT_HAND_Y_UP: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Up, Z=Back</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RIGHT_HAND_Z_DOWN","title":"<code>RIGHT_HAND_Z_DOWN: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Back, Z=Down</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RIGHT_HAND_Z_UP","title":"<code>RIGHT_HAND_Z_UP: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Forward, Z=Up</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RUB","title":"<code>RUB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Up, Z=Back</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.RUF","title":"<code>RUF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Right, Y=Up, Z=Forward</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.UBL","title":"<code>UBL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Back, Z=Left</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.UBR","title":"<code>UBR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Back, Z=Right</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.UFL","title":"<code>UFL: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Forward, Z=Left</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.UFR","title":"<code>UFR: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Forward, Z=Right</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.ULB","title":"<code>ULB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Left, Z=Back</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.ULF","title":"<code>ULF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Left, Z=Forward</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.URB","title":"<code>URB: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Right, Z=Back</p> <p>\u26a0\ufe0f This is a left-handed coordinate system, which is not yet supported by Rerun.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.URF","title":"<code>URF: ViewCoordinates = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X=Up, Y=Right, Z=Forward</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.__init__","title":"<code>def __init__(coordinates)</code>","text":"<p>Create a new instance of the ViewCoordinates datatype.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>The directions of the [x, y, z] axes.</p> <p> TYPE: <code>ViewCoordinatesLike</code> </p>"},{"location":"common/components/#rerun.components.ViewCoordinates.arrow_type","title":"<code>def arrow_type()</code>  <code>classmethod</code>","text":"<p>The pyarrow type of this batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/components/#rerun.components.ViewCoordinates.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/custom_data/","title":"Custom Data","text":""},{"location":"common/custom_data/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/custom_data/#rerun.AnyValues","title":"<code>class AnyValues</code>","text":"<p>         Bases: <code>AsComponents</code></p> <p>Helper to log arbitrary values as a bundle of components.</p> Example <pre><code>rr.log(\n    \"any_values\", rr.AnyValues(\n        confidence=[1.2, 3.4, 5.6],\n        description=\"Bla bla bla\u2026\",\n    ),\n)\n</code></pre>"},{"location":"common/custom_data/#rerun.AnyValues.__init__","title":"<code>def __init__(drop_untyped_nones=True, **kwargs)</code>","text":"<p>Construct a new AnyValues bundle.</p> <p>Each kwarg will be logged as a separate component using the provided data.  - The key will be used as the name of the component  - The value must be able to be converted to an array of arrow types. In    general, if you can pass it to pyarrow.array you can log it as a    extension component.</p> <p>Note: rerun requires that a given component only take on a single type. The first type logged will be the type that is used for all future logs of that component. The API will make a best effort to do type conversion if supported by numpy and arrow. Any components that can't be converted will result in a warning (or an exception in strict mode).</p> <p><code>None</code> values provide a particular challenge as they have no type information until after the component has been logged with a particular type. By default, these values are dropped. This should generally be fine as logging <code>None</code> to clear the value before it has been logged is meaningless unless you are logging out-of-order data. In such cases, consider introducing your own typed component via rerun.ComponentBatchLike.</p> <p>You can change this behavior by setting <code>drop_untyped_nones</code> to <code>False</code>, but be aware that this will result in potential warnings (or exceptions in strict mode).</p> <p>If you are want to inspect how your component will be converted to the underlying arrow code, the following snippet is what is happening internally: <pre><code>np_value = np.atleast_1d(np.array(value, copy=False))\npa_value = pa.array(value)\n</code></pre></p> PARAMETER DESCRIPTION <code>drop_untyped_nones</code> <p>If True, any components that are None will be dropped unless they have been previously logged with a type.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>kwargs</code> <p>The components to be logged.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p>"},{"location":"common/dataframe/","title":"Dataframe","text":""},{"location":"common/dataframe/#rerun.dataframe","title":"<code>rerun.dataframe</code>","text":""},{"location":"common/dataframe/#rerun.dataframe.AnyColumn","title":"<code>AnyColumn: TypeAlias = Union[str, 'ComponentColumnDescriptor', 'ComponentColumnSelector', 'IndexColumnDescriptor', 'IndexColumnSelector']</code>  <code>module-attribute</code>","text":"<p>A type alias for any column-like object.</p>"},{"location":"common/dataframe/#rerun.dataframe.AnyComponentColumn","title":"<code>AnyComponentColumn: TypeAlias = Union[str, 'ComponentColumnDescriptor', 'ComponentColumnSelector']</code>  <code>module-attribute</code>","text":"<p>A type alias for any component-column-like object.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentLike","title":"<code>ComponentLike: TypeAlias = Union[str, Type['ComponentMixin']]</code>  <code>module-attribute</code>","text":"<p>A type alias for a component-like object used for content-expressions and column selectors.</p> <p>This can be the name of the component as a string, or an instance of the component class itself. Strings are not required to be fully-qualified. Rerun will find the best-matching component based on the corresponding entity.</p> <p>Examples:</p> <ul> <li><code>\"rerun.components.Position3D\"</code></li> <li><code>\"Position3D\"</code></li> <li><code>rerun.components.Position3D</code></li> </ul>"},{"location":"common/dataframe/#rerun.dataframe.ViewContentsLike","title":"<code>ViewContentsLike: TypeAlias = Union[str, Dict[str, Union[AnyColumn, Sequence[ComponentLike]]]]</code>  <code>module-attribute</code>","text":"<p>A type alias for specifying the contents of a view.</p> <p>This can be a single string content-expression such as: <code>\"world/cameras/**\"</code>, or a dictionary specifying multiple content-expressions and a respective list of components to select within that expression such as <code>{\"world/cameras/**\": [\"ImageBuffer\", \"PinholeProjection\"]}</code>.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnDescriptor","title":"<code>class ComponentColumnDescriptor</code>","text":"<p>The descriptor of a component column.</p> <p>Component columns contain the data for a specific component of an entity.</p> <p>Column descriptors are used to describe the columns in a <code>Schema</code>. They are read-only. To select a component column, use <code>ComponentColumnSelector</code>.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnDescriptor.component_name","title":"<code>component_name: str</code>  <code>property</code>","text":"<p>The component name.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnDescriptor.entity_path","title":"<code>entity_path: str</code>  <code>property</code>","text":"<p>The entity path.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnDescriptor.is_static","title":"<code>is_static: bool</code>  <code>property</code>","text":"<p>Whether the column is static.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnSelector","title":"<code>class ComponentColumnSelector</code>","text":"<p>A selector for a component column.</p> <p>Component columns contain the data for a specific component of an entity.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnSelector.component_name","title":"<code>component_name: str</code>  <code>property</code>","text":"<p>The component name.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnSelector.entity_path","title":"<code>entity_path: str</code>  <code>property</code>","text":"<p>The entity path.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.ComponentColumnSelector.__init__","title":"<code>def __init__(entity_path, component)</code>","text":"<p>Create a new <code>ComponentColumnSelector</code>.</p> PARAMETER DESCRIPTION <code>entity_path</code> <p>The entity path to select.</p> <p> TYPE: <code>str</code> </p> <code>component</code> <p>The component to select</p> <p> TYPE: <code>ComponentLike</code> </p>"},{"location":"common/dataframe/#rerun.dataframe.IndexColumnDescriptor","title":"<code>class IndexColumnDescriptor</code>","text":"<p>The descriptor of an index column.</p> <p>Index columns contain the index values for when the data was updated. They generally correspond to Rerun timelines.</p> <p>Column descriptors are used to describe the columns in a <code>Schema</code>. They are read-only. To select an index column, use <code>IndexColumnSelector</code>.</p>"},{"location":"common/dataframe/#rerun.dataframe.IndexColumnDescriptor.is_static","title":"<code>is_static: bool</code>  <code>property</code>","text":"<p>Part of generic ColumnDescriptor interface: always False for Index.</p>"},{"location":"common/dataframe/#rerun.dataframe.IndexColumnDescriptor.name","title":"<code>def name()</code>","text":"<p>The name of the index.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.IndexColumnSelector","title":"<code>class IndexColumnSelector</code>","text":"<p>A selector for an index column.</p> <p>Index columns contain the index values for when the data was updated. They generally correspond to Rerun timelines.</p>"},{"location":"common/dataframe/#rerun.dataframe.IndexColumnSelector.__init__","title":"<code>def __init__(index)</code>","text":"<p>Create a new <code>IndexColumnSelector</code>.</p> PARAMETER DESCRIPTION <code>index</code> <p>The name of the index to select. Usually the name of a timeline.</p> <p> TYPE: <code>str</code> </p>"},{"location":"common/dataframe/#rerun.dataframe.IndexColumnSelector.name","title":"<code>def name()</code>","text":"<p>The name of the index.</p> <p>This property is read-only.</p>"},{"location":"common/dataframe/#rerun.dataframe.Recording","title":"<code>class Recording</code>","text":"<p>A single Rerun recording.</p> <p>This can be loaded from an RRD file using <code>load_recording()</code>.</p> <p>A recording is a collection of data that was logged to Rerun. This data is organized as a column for each index (timeline) and each entity/component pair that was logged.</p> <p>You can examine the <code>.schema()</code> of the recording to see what data is available, or create a <code>RecordingView</code> to to retrieve the data.</p>"},{"location":"common/dataframe/#rerun.dataframe.Recording.application_id","title":"<code>def application_id()</code>","text":"<p>The application ID of the recording.</p>"},{"location":"common/dataframe/#rerun.dataframe.Recording.recording_id","title":"<code>def recording_id()</code>","text":"<p>The recording ID of the recording.</p>"},{"location":"common/dataframe/#rerun.dataframe.Recording.schema","title":"<code>def schema()</code>","text":"<p>The schema describing all the columns available in the recording.</p>"},{"location":"common/dataframe/#rerun.dataframe.Recording.view","title":"<code>def view(*, index, contents, include_semantically_empty_columns=False, include_indicator_columns=False, include_tombstone_columns=False)</code>","text":"<p>Create a <code>RecordingView</code> of the recording according to a particular index and content specification.</p> <p>The only type of index currently supported is the name of a timeline.</p> <p>The view will only contain a single row for each unique value of the index that is associated with a component column that was included in the view. Component columns that are not included via the view contents will not impact the rows that make up the view. If the same entity / component pair was logged to a given index multiple times, only the most recent row will be included in the view, as determined by the <code>row_id</code> column. This will generally be the last value logged, as row_ids are guaranteed to be monotonically increasing when data is sent from a single process.</p> PARAMETER DESCRIPTION <code>index</code> <p>The index to use for the view. This is typically a timeline name.</p> <p> TYPE: <code>str</code> </p> <code>contents</code> <p>The content specification for the view.</p> <p>This can be a single string content-expression such as: <code>\"world/cameras/**\"</code>, or a dictionary specifying multiple content-expressions and a respective list of components to select within that expression such as <code>{\"world/cameras/**\": [\"ImageBuffer\", \"PinholeProjection\"]}</code>.</p> <p> TYPE: <code>ViewContentsLike</code> </p> <code>include_semantically_empty_columns</code> <p>Whether to include columns that are semantically empty, by default <code>False</code>.</p> <p>Semantically empty columns are components that are <code>null</code> or empty <code>[]</code> for every row in the recording.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_indicator_columns</code> <p>Whether to include indicator columns, by default <code>False</code>.</p> <p>Indicator columns are components used to represent the presence of an archetype within an entity.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_tombstone_columns</code> <p>Whether to include tombstone columns, by default <code>False</code>.</p> <p>Tombstone columns are components used to represent clears. However, even without the clear tombstone columns, the view will still apply the clear semantics when resolving row contents.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>The view of the recording.</p> <p>Examples:</p> <p>All the data in the recording on the timeline \"my_index\": <pre><code>recording.view(index=\"my_index\", contents=\"/**\")\n</code></pre></p> <p>Just the Position3D components in the \"points\" entity: <pre><code>recording.view(index=\"my_index\", contents={\"points\": \"Position3D\"})\n</code></pre></p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView","title":"<code>class RecordingView</code>","text":"<p>A view of a recording restricted to a given index, containing a specific set of entities and components.</p> <p>See <code>Recording.view(\u2026)</code> for details on how to create a <code>RecordingView</code>.</p> <p>Note: <code>RecordingView</code> APIs never mutate the underlying view. Instead, they always return new views with the requested modifications applied.</p> <p>The view will only contain a single row for each unique value of the index that is associated with a component column that was included in the view. Component columns that are not included via the view contents will not impact the rows that make up the view. If the same entity / component pair was logged to a given index multiple times, only the most recent row will be included in the view, as determined by the <code>row_id</code> column. This will generally be the last value logged, as row_ids are guaranteed to be monotonically increasing when data is sent from a single process.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.fill_latest_at","title":"<code>def fill_latest_at()</code>","text":"<p>Populate any null values in a row with the latest valid data according to the index.</p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view with the null values filled in.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.filter_index_values","title":"<code>def filter_index_values(values)</code>","text":"<p>Filter the view to only include data at the provided index values.</p> <p>The index values returned will be the intersection between the provided values and the original index values.</p> <p>This requires index values to be a precise match. Index values in Rerun are represented as i64 sequence counts or nanoseconds. This API does not expose an interface in floating point seconds, as the numerical conversion would risk false mismatches.</p> PARAMETER DESCRIPTION <code>values</code> <p>The index values to filter by.</p> <p> TYPE: <code>IndexValuesLike</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view containing only the data at the specified index values.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.filter_is_not_null","title":"<code>def filter_is_not_null(column)</code>","text":"<p>Filter the view to only include rows where the given component column is not null.</p> <p>This corresponds to rows for index values where this component was provided to Rerun explicitly via <code>.log()</code> or <code>.send_columns()</code>.</p> PARAMETER DESCRIPTION <code>column</code> <p>The component column to filter by.</p> <p> TYPE: <code>AnyComponentColumn</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view containing only the data where the specified component column is not null.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.filter_range_nanos","title":"<code>def filter_range_nanos(start, end)</code>","text":"<p>Filter the view to only include data between the given index values expressed as seconds.</p> <p>This range is inclusive and will contain both the value at the start and the value at the end.</p> <p>The view must be of a temporal index type to use this method.</p> PARAMETER DESCRIPTION <code>start</code> <p>The inclusive start of the range.</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>The inclusive end of the range.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view containing only the data within the specified range.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.filter_range_seconds","title":"<code>def filter_range_seconds(start, end)</code>","text":"<p>Filter the view to only include data between the given index values expressed as seconds.</p> <p>This range is inclusive and will contain both the value at the start and the value at the end.</p> <p>The view must be of a temporal index type to use this method.</p> PARAMETER DESCRIPTION <code>start</code> <p>The inclusive start of the range.</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>The inclusive end of the range.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view containing only the data within the specified range.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.filter_range_sequence","title":"<code>def filter_range_sequence(start, end)</code>","text":"<p>Filter the view to only include data between the given index sequence numbers.</p> <p>This range is inclusive and will contain both the value at the start and the value at the end.</p> <p>The view must be of a sequential index type to use this method.</p> PARAMETER DESCRIPTION <code>start</code> <p>The inclusive start of the range.</p> <p> TYPE: <code>int</code> </p> <code>end</code> <p>The inclusive end of the range.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view containing only the data within the specified range.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.schema","title":"<code>def schema()</code>","text":"<p>The schema describing all the columns available in the view.</p> <p>This schema will only contain the columns that are included in the view via the view contents.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.select","title":"<code>def select(*args, columns=None)</code>","text":"<p>Select the columns from the view.</p> <p>If no columns are provided, all available columns will be included in the output.</p> <p>The selected columns do not change the rows that are included in the view. The rows are determined by the index values and the components that were included in the view contents, or can be overridden with <code>.using_index_values()</code>.</p> <p>If a column was not provided with data for a given row, it will be <code>null</code> in the output.</p> <p>The output is a <code>pyarrow.RecordBatchReader</code> that can be used to read out the data.</p> PARAMETER DESCRIPTION <code>*args</code> <p>The columns to select.</p> <p> TYPE: <code>AnyColumn</code> DEFAULT: <code>()</code> </p> <code>columns</code> <p>Alternatively the columns to select can be provided as a sequence.</p> <p> TYPE: <code>Optional[Sequence[AnyColumn]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>RecordBatchReader</code> <p>A reader that can be used to read out the selected data.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.select_static","title":"<code>def select_static(*args, columns=None)</code>","text":"<p>Select only the static columns from the view.</p> <p>Because static data has no associated index values it does not cause a row to be generated in the output. If your view only contains static data this method allows you to select it without needing to provide index values.</p> <p>This method will always return a single row.</p> <p>Any non-static columns that are included in the selection will generate a warning and produce empty columns.</p> PARAMETER DESCRIPTION <code>*args</code> <p>The columns to select.</p> <p> TYPE: <code>AnyColumn</code> DEFAULT: <code>()</code> </p> <code>columns</code> <p>Alternatively the columns to select can be provided as a sequence.</p> <p> TYPE: <code>Optional[Sequence[AnyColumn]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>RecordBatchReader</code> <p>A reader that can be used to read out the selected data.</p>"},{"location":"common/dataframe/#rerun.dataframe.RecordingView.using_index_values","title":"<code>def using_index_values(values)</code>","text":"<p>Replace the index in the view with the provided values.</p> <p>The output view will always have the same number of rows as the provided values, even if those rows are empty. Use with <code>.fill_latest_at()</code> to populate these rows with the most recent data.</p> <p>This requires index values to be a precise match. Index values in Rerun are represented as i64 sequence counts or nanoseconds. This API does not expose an interface in floating point seconds, as the numerical conversion would risk false mismatches.</p> PARAMETER DESCRIPTION <code>values</code> <p>The index values to use.</p> <p> TYPE: <code>IndexValuesLike</code> </p> RETURNS DESCRIPTION <code>RecordingView</code> <p>A new view containing the provided index values.</p> <p>The original view will not be modified.</p>"},{"location":"common/dataframe/#rerun.dataframe.RRDArchive","title":"<code>class RRDArchive</code>","text":"<p>An archive loaded from an RRD.</p> <p>RRD archives may include 1 or more recordings or blueprints.</p>"},{"location":"common/dataframe/#rerun.dataframe.RRDArchive.all_recordings","title":"<code>def all_recordings()</code>","text":"<p>All the recordings in the archive.</p>"},{"location":"common/dataframe/#rerun.dataframe.RRDArchive.num_recordings","title":"<code>def num_recordings()</code>","text":"<p>The number of recordings in the archive.</p>"},{"location":"common/dataframe/#rerun.dataframe.Schema","title":"<code>class Schema</code>","text":"<p>The schema representing a set of available columns.</p> <p>Can be returned by <code>Recording.schema()</code> or <code>RecordingView.schema()</code>.</p>"},{"location":"common/dataframe/#rerun.dataframe.Schema.__iter__","title":"<code>def __iter__()</code>","text":"<p>Iterate over all the column descriptors in the schema.</p>"},{"location":"common/dataframe/#rerun.dataframe.Schema.column_for","title":"<code>def column_for(entity_path, component)</code>","text":"<p>Look up the column descriptor for a specific entity path and component.</p> PARAMETER DESCRIPTION <code>entity_path</code> <p>The entity path to look up.</p> <p> TYPE: <code>str</code> </p> <code>component</code> <p>The component to look up.</p> <p> TYPE: <code>ComponentLike</code> </p> RETURNS DESCRIPTION <code>Optional[ComponentColumnDescriptor]</code> <p>The column descriptor, if it exists.</p>"},{"location":"common/dataframe/#rerun.dataframe.Schema.component_columns","title":"<code>def component_columns()</code>","text":"<p>Return a list of all the component columns in the schema.</p>"},{"location":"common/dataframe/#rerun.dataframe.Schema.index_columns","title":"<code>def index_columns()</code>","text":"<p>Return a list of all the index columns in the schema.</p>"},{"location":"common/dataframe/#rerun.dataframe.load_archive","title":"<code>def load_archive(path_to_rrd)</code>","text":"<p>Load a rerun archive from an RRD file.</p> PARAMETER DESCRIPTION <code>path_to_rrd</code> <p>The path to the file to load.</p> <p> TYPE: <code>str | PathLike</code> </p> RETURNS DESCRIPTION <code>RRDArchive</code> <p>The loaded archive.</p>"},{"location":"common/dataframe/#rerun.dataframe.load_recording","title":"<code>def load_recording(path_to_rrd)</code>","text":"<p>Load a single recording from an RRD file.</p> <p>Will raise a <code>ValueError</code> if the file does not contain exactly one recording.</p> PARAMETER DESCRIPTION <code>path_to_rrd</code> <p>The path to the file to load.</p> <p> TYPE: <code>str | PathLike</code> </p> RETURNS DESCRIPTION <code>Recording</code> <p>The loaded recording.</p>"},{"location":"common/datatypes/","title":"Datatypes","text":""},{"location":"common/datatypes/#rerun.datatypes","title":"<code>rerun.datatypes</code>","text":""},{"location":"common/datatypes/#rerun.datatypes.Angle","title":"<code>class Angle</code>","text":"<p>         Bases: <code>AngleExt</code></p> <p>Datatype: Angle in radians.</p>"},{"location":"common/datatypes/#rerun.datatypes.Angle.__init__","title":"<code>def __init__(rad=None, deg=None)</code>","text":"<p>Create a new instance of the Angle datatype.</p> PARAMETER DESCRIPTION <code>rad</code> <p>Angle in radians, specify either <code>rad</code> or <code>deg</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>deg</code> <p>Angle in degrees, specify either <code>rad</code> or <code>deg</code>. Converts the angle to radians internally.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.AnnotationInfo","title":"<code>class AnnotationInfo</code>","text":"<p>         Bases: <code>AnnotationInfoExt</code></p> <p>Datatype: Annotation info annotating a class id or key-point id.</p> <p>Color and label will be used to annotate entities/keypoints which reference the id. The id refers either to a class or key-point id</p>"},{"location":"common/datatypes/#rerun.datatypes.AnnotationInfo.__init__","title":"<code>def __init__(id, label=None, color=None)</code>","text":"<p>Create a new instance of the AnnotationInfo datatype.</p> PARAMETER DESCRIPTION <code>id</code> <p><code>datatypes.ClassId</code> or <code>datatypes.KeypointId</code> to which this annotation info belongs.</p> <p> TYPE: <code>int</code> </p> <code>label</code> <p>The label that will be shown in the UI.</p> <p> TYPE: <code>Utf8Like | None</code> DEFAULT: <code>None</code> </p> <code>color</code> <p>The color that will be applied to the annotated entity.</p> <p> TYPE: <code>Rgba32Like | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Blob","title":"<code>class Blob</code>","text":"<p>         Bases: <code>BlobExt</code></p> <p>Datatype: A binary blob of data.</p>"},{"location":"common/datatypes/#rerun.datatypes.Blob.__init__","title":"<code>def __init__(data)</code>","text":"<p>Create a new instance of the Blob datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Bool","title":"<code>class Bool</code>","text":"<p>Datatype: A single boolean.</p>"},{"location":"common/datatypes/#rerun.datatypes.Bool.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Bool datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype","title":"<code>class ChannelDatatype</code>","text":"<p>         Bases: <code>ChannelDatatypeExt</code>, <code>Enum</code></p> <p>Datatype: The innermost datatype of an image.</p> <p>How individual color channel components are encoded.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.F16","title":"<code>F16 = 33</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>16-bit IEEE-754 floating point, also known as <code>half</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.F32","title":"<code>F32 = 34</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>32-bit IEEE-754 floating point, also known as <code>float</code> or <code>single</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.F64","title":"<code>F64 = 35</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>64-bit IEEE-754 floating point, also known as <code>double</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.I16","title":"<code>I16 = 9</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>16-bit signed integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.I32","title":"<code>I32 = 11</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>32-bit signed integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.I64","title":"<code>I64 = 13</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>64-bit signed integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.I8","title":"<code>I8 = 7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>8-bit signed integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.U16","title":"<code>U16 = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>16-bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.U32","title":"<code>U32 = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>32-bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.U64","title":"<code>U64 = 12</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>64-bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.U8","title":"<code>U8 = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>8-bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/datatypes/#rerun.datatypes.ChannelDatatype.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescription","title":"<code>class ClassDescription</code>","text":"<p>         Bases: <code>ClassDescriptionExt</code></p> <p>Datatype: The description of a semantic Class.</p> <p>If an entity is annotated with a corresponding <code>components.ClassId</code>, Rerun will use the attached <code>datatypes.AnnotationInfo</code> to derive labels and colors.</p> <p>Keypoints within an annotation class can similarly be annotated with a <code>components.KeypointId</code> in which case we should defer to the label and color for the <code>datatypes.AnnotationInfo</code> specifically associated with the Keypoint.</p> <p>Keypoints within the class can also be decorated with skeletal edges. Keypoint-connections are pairs of <code>components.KeypointId</code>s. If an edge is defined, and both keypoints exist within the instance of the class, then the keypoints should be connected with an edge. The edge should be labeled and colored as described by the class's <code>datatypes.AnnotationInfo</code>.</p> <p>Note that a <code>ClassDescription</code> can be directly logged using <code>rerun.log</code>. This is equivalent to logging a <code>rerun.AnnotationContext</code> containing a single <code>ClassDescription</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescription.__init__","title":"<code>def __init__(*, info, keypoint_annotations=[], keypoint_connections=[])</code>","text":"<p>Create a new instance of the ClassDescription datatype.</p> PARAMETER DESCRIPTION <code>info</code> <p>The <code>AnnotationInfo</code> for the class.</p> <p> TYPE: <code>AnnotationInfoLike</code> </p> <code>keypoint_annotations</code> <p>The <code>AnnotationInfo</code> for all the keypoints.</p> <p> TYPE: <code>Sequence[AnnotationInfoLike] | None</code> DEFAULT: <code>[]</code> </p> <code>keypoint_connections</code> <p>The connections between keypoints.</p> <p> TYPE: <code>Sequence[KeypointPairLike] | None</code> DEFAULT: <code>[]</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescriptionMapElem","title":"<code>class ClassDescriptionMapElem</code>","text":"<p>         Bases: <code>ClassDescriptionMapElemExt</code></p> <p>Datatype: A helper type for mapping <code>datatypes.ClassId</code>s to class descriptions.</p> <p>This is internal to <code>components.AnnotationContext</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassDescriptionMapElem.__init__","title":"<code>def __init__(class_id, class_description)</code>","text":"<p>Create a new instance of the ClassDescriptionMapElem datatype.</p> PARAMETER DESCRIPTION <code>class_id</code> <p>The key: the <code>components.ClassId</code>.</p> <p> TYPE: <code>ClassIdLike</code> </p> <code>class_description</code> <p>The value: class name, color, etc.</p> <p> TYPE: <code>ClassDescriptionLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.ClassId","title":"<code>class ClassId</code>","text":"<p>Datatype: A 16-bit ID representing a type of semantic class.</p>"},{"location":"common/datatypes/#rerun.datatypes.ClassId.__init__","title":"<code>def __init__(id)</code>","text":"<p>Create a new instance of the ClassId datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel","title":"<code>class ColorModel</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Datatype: Specified what color components are present in an <code>archetypes.Image</code>.</p> <p>This combined with <code>datatypes.ChannelDatatype</code> determines the pixel format of an image.</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.BGR","title":"<code>BGR = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Blue, Green, Red</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.BGRA","title":"<code>BGRA = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Blue, Green, Red, Alpha</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.L","title":"<code>L = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Grayscale luminance intencity/brightness/value, sometimes called <code>Y</code></p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.RGB","title":"<code>RGB = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Red, Green, Blue</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.RGBA","title":"<code>RGBA = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Red, Green, Blue, Alpha</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/datatypes/#rerun.datatypes.ColorModel.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/datatypes/#rerun.datatypes.EntityPath","title":"<code>class EntityPath</code>","text":"<p>Datatype: A path to an entity in the <code>ChunkStore</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.EntityPath.__init__","title":"<code>def __init__(path)</code>","text":"<p>Create a new instance of the EntityPath datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Float32","title":"<code>class Float32</code>","text":"<p>Datatype: A single-precision 32-bit IEEE 754 floating point number.</p>"},{"location":"common/datatypes/#rerun.datatypes.Float32.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float32 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Float64","title":"<code>class Float64</code>","text":"<p>Datatype: A double-precision 64-bit IEEE 754 floating point number.</p>"},{"location":"common/datatypes/#rerun.datatypes.Float64.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Float64 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.ImageFormat","title":"<code>class ImageFormat</code>","text":"<p>         Bases: <code>ImageFormatExt</code></p> <p>Datatype: The metadata describing the contents of a <code>components.ImageBuffer</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.ImageFormat.__init__","title":"<code>def __init__(width, height, pixel_format=None, color_model=None, channel_datatype=None)</code>","text":"<p>Create a new instance of the ImageFormat datatype.</p> PARAMETER DESCRIPTION <code>width</code> <p>The width of the image in pixels.</p> <p> TYPE: <code>int</code> </p> <code>height</code> <p>The height of the image in pixels.</p> <p> TYPE: <code>int</code> </p> <code>pixel_format</code> <p>Used mainly for chroma downsampled formats and differing number of bits per channel.</p> <p>If specified, this takes precedence over both <code>datatypes.ColorModel</code> and <code>datatypes.ChannelDatatype</code> (which are ignored).</p> <p> TYPE: <code>PixelFormatLike | None</code> DEFAULT: <code>None</code> </p> <code>color_model</code> <p>L, RGB, RGBA, \u2026</p> <p>Also requires a <code>datatypes.ChannelDatatype</code> to fully specify the pixel format.</p> <p> TYPE: <code>ColorModelLike | None</code> DEFAULT: <code>None</code> </p> <code>channel_datatype</code> <p>The data type of each channel (e.g. the red channel) of the image data (U8, F16, \u2026).</p> <p>Also requires a <code>datatypes.ColorModel</code> to fully specify the pixel format.</p> <p> TYPE: <code>ChannelDatatypeLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointId","title":"<code>class KeypointId</code>","text":"<p>Datatype: A 16-bit ID representing a type of semantic keypoint within a class.</p> <p><code>KeypointId</code>s are only meaningful within the context of a [<code>rerun.datatypes.ClassDescription</code>].</p> <p>Used to look up an [<code>rerun.datatypes.AnnotationInfo</code>] for a Keypoint within the [<code>rerun.components.AnnotationContext</code>].</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointId.__init__","title":"<code>def __init__(id)</code>","text":"<p>Create a new instance of the KeypointId datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointPair","title":"<code>class KeypointPair</code>","text":"<p>         Bases: <code>KeypointPairExt</code></p> <p>Datatype: A connection between two <code>datatypes.KeypointId</code>s.</p>"},{"location":"common/datatypes/#rerun.datatypes.KeypointPair.__init__","title":"<code>def __init__(keypoint0, keypoint1)</code>","text":"<p>Create a new instance of the KeypointPair datatype.</p> PARAMETER DESCRIPTION <code>keypoint0</code> <p>The first point of the pair.</p> <p> TYPE: <code>KeypointIdLike</code> </p> <code>keypoint1</code> <p>The second point of the pair.</p> <p> TYPE: <code>KeypointIdLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Mat3x3","title":"<code>class Mat3x3</code>","text":"<p>         Bases: <code>Mat3x3Ext</code></p> <p>Datatype: A 3x3 Matrix.</p> <p>Matrices in Rerun are stored as flat list of coefficients in column-major order: <pre><code>            column 0       column 1       column 2\n       -------------------------------------------------\nrow 0 | flat_columns[0] flat_columns[3] flat_columns[6]\nrow 1 | flat_columns[1] flat_columns[4] flat_columns[7]\nrow 2 | flat_columns[2] flat_columns[5] flat_columns[8]\n</code></pre></p> <p>However, construction is done from a list of rows, which follows NumPy's convention: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat3x3([1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns, np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32)\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat3x3([[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 4, 7, 2, 5, 8, 3, 6, 9], dtype=np.float32),\n)\n</code></pre> If you want to construct a matrix from a list of columns instead, use the named <code>columns</code> parameter: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat3x3(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat3x3(columns=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.float32),\n)\n</code></pre></p>"},{"location":"common/datatypes/#rerun.datatypes.Mat4x4","title":"<code>class Mat4x4</code>","text":"<p>         Bases: <code>Mat4x4Ext</code></p> <p>Datatype: A 4x4 Matrix.</p> <p>Matrices in Rerun are stored as flat list of coefficients in column-major order: <pre><code>           column 0         column 1         column 2         column 3\n       --------------------------------------------------------------------\nrow 0 | flat_columns[0]  flat_columns[4]  flat_columns[8]  flat_columns[12]\nrow 1 | flat_columns[1]  flat_columns[5]  flat_columns[9]  flat_columns[13]\nrow 2 | flat_columns[2]  flat_columns[6]  flat_columns[10] flat_columns[14]\nrow 3 | flat_columns[3]  flat_columns[7]  flat_columns[11] flat_columns[15]\n</code></pre></p> <p>However, construction is done from a list of rows, which follows NumPy's convention: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat4x4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).flat_columns,\n    np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]).flat_columns,\n    np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16], dtype=np.float32),\n)\n</code></pre> If you want to construct a matrix from a list of columns instead, use the named <code>columns</code> parameter: <pre><code>np.testing.assert_array_equal(\n    rr.datatypes.Mat4x4(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype=np.float32),\n)\nnp.testing.assert_array_equal(\n    rr.datatypes.Mat4x4(columns=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]).flat_columns,\n    np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype=np.float32),\n)\n</code></pre></p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat","title":"<code>class PixelFormat</code>","text":"<p>         Bases: <code>Enum</code></p> <p>Datatype: Specifieds a particular format of an <code>archetypes.Image</code>.</p> <p>Most images can be described by a <code>datatypes.ColorModel</code> and a <code>datatypes.ChannelDatatype</code>, e.g. <code>RGB</code> and <code>U8</code> respectively.</p> <p>However, some image formats has chroma downsampling and/or use differing number of bits per channel, and that is what this <code>datatypes.PixelFormat</code> is for.</p> <p>All these formats support random access.</p> <p>For more compressed image formats, see <code>archetypes.EncodedImage</code>.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.NV12","title":"<code>NV12 = 26</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form at with 12 bits per pixel and 8 bits per channel.</p> <p>This uses limited range YUV, i.e. Y is expected to be within [16, 235] and U/V within [16, 240].</p> <p>First comes entire image in Y in one plane, followed by a plane with interleaved lines ordered as U0, V0, U1, V1, etc.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y8_FullRange","title":"<code>Y8_FullRange = 30</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Monochrome Y plane only, essentially a YUV 4:0:0 planar format.</p> <p>Also known as just \"gray\". This is virtually identical to a 8bit luminance/grayscale (see <code>datatypes.ColorModel</code>).</p> <p>This uses entire range YUV, i.e. Y is expected to be within [0, 255]. (as opposed to \"limited range\" YUV as used e.g. in NV12).</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y8_LimitedRange","title":"<code>Y8_LimitedRange = 41</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Monochrome Y plane only, essentially a YUV 4:0:0 planar format.</p> <p>Also known as just \"gray\".</p> <p>This uses limited range YUV, i.e. Y is expected to be within [16, 235]. If not for this range limitation/remapping, this is almost identical to 8bit luminace/grayscale (see <code>datatypes.ColorModel</code>).</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.YUY2","title":"<code>YUY2 = 27</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>YUY2</code> (aka <code>YUYV</code>, <code>YUYV16</code> or <code>NV21</code>), is a YUV 4:2:2 chroma downsampled format with 16 bits per pixel and 8 bits per channel.</p> <p>This uses limited range YUV, i.e. Y is expected to be within [16, 235] and U/V within [16, 240].</p> <p>The order of the channels is Y0, U0, Y1, V0, all in the same plane.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y_U_V12_FullRange","title":"<code>Y_U_V12_FullRange = 44</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without chroma downsampling, also known as <code>I420</code>.</p> <p>This uses full range YUV with all components ranging from 0 to 255 (as opposed to \"limited range\" YUV as used e.g. in NV12).</p> <p>First comes entire image in Y in one plane, followed by the U and V planes, which each only have half the resolution of the Y plane.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y_U_V12_LimitedRange","title":"<code>Y_U_V12_LimitedRange = 20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without chroma downsampling, also known as <code>I420</code>.</p> <p>This uses limited range YUV, i.e. Y is expected to be within [16, 235] and U/V within [16, 240].</p> <p>First comes entire image in Y in one plane, followed by the U and V planes, which each only have half the resolution of the Y plane.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y_U_V16_FullRange","title":"<code>Y_U_V16_FullRange = 50</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without chroma downsampling, also known as <code>I422</code>.</p> <p>This uses full range YUV with all components ranging from 0 to 255 (as opposed to \"limited range\" YUV as used e.g. in NV12).</p> <p>First comes entire image in Y in one plane, followed by the U and V planes, which each only have half the horizontal resolution of the Y plane.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y_U_V16_LimitedRange","title":"<code>Y_U_V16_LimitedRange = 49</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without chroma downsampling, also known as <code>I422</code>.</p> <p>This uses limited range YUV, i.e. Y is expected to be within [16, 235] and U/V within [16, 240].</p> <p>First comes entire image in Y in one plane, followed by the U and V planes, which each only have half the horizontal resolution of the Y plane.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y_U_V24_FullRange","title":"<code>Y_U_V24_FullRange = 40</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without chroma downsampling, also known as <code>I444</code>.</p> <p>This uses full range YUV with all components ranging from 0 to 255 (as opposed to \"limited range\" YUV as used e.g. in NV12).</p> <p>First comes entire image in Y in one plane, followed by the U and V planes.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.Y_U_V24_LimitedRange","title":"<code>Y_U_V24_LimitedRange = 39</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p><code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without chroma downsampling, also known as <code>I444</code>.</p> <p>This uses limited range YUV, i.e. Y is expected to be within [16, 235] and U/V within [16, 240].</p> <p>First comes entire image in Y in one plane, followed by the U and V planes.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.__str__","title":"<code>def __str__()</code>","text":"<p>Returns the variant name.</p>"},{"location":"common/datatypes/#rerun.datatypes.PixelFormat.auto","title":"<code>def auto(val)</code>  <code>classmethod</code>","text":"<p>Best-effort converter, including a case-insensitive string matcher.</p>"},{"location":"common/datatypes/#rerun.datatypes.Quaternion","title":"<code>class Quaternion</code>","text":"<p>         Bases: <code>QuaternionExt</code></p> <p>Datatype: A Quaternion represented by 4 real numbers.</p> <p>Note: although the x,y,z,w components of the quaternion will be passed through to the datastore as provided, when used in the Viewer Quaternions will always be normalized.</p>"},{"location":"common/datatypes/#rerun.datatypes.Range1D","title":"<code>class Range1D</code>","text":"<p>         Bases: <code>Range1DExt</code></p> <p>Datatype: A 1D range, specifying a lower and upper bound.</p>"},{"location":"common/datatypes/#rerun.datatypes.Range1D.__init__","title":"<code>def __init__(range)</code>","text":"<p>Create a new instance of the Range1D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Range2D","title":"<code>class Range2D</code>","text":"<p>Datatype: An Axis-Aligned Bounding Box in 2D space, implemented as the minimum and maximum corners.</p>"},{"location":"common/datatypes/#rerun.datatypes.Range2D.__init__","title":"<code>def __init__(x_range, y_range)</code>","text":"<p>Create a new instance of the Range2D datatype.</p> PARAMETER DESCRIPTION <code>x_range</code> <p>The range of the X-axis (usually left and right bounds).</p> <p> TYPE: <code>Range1DLike</code> </p> <code>y_range</code> <p>The range of the Y-axis (usually top and bottom bounds).</p> <p> TYPE: <code>Range1DLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Rgba32","title":"<code>class Rgba32</code>","text":"<p>         Bases: <code>Rgba32Ext</code></p> <p>Datatype: An RGBA color with unmultiplied/separate alpha, in sRGB gamma space with linear alpha.</p> <p>The color is stored as a 32-bit integer, where the most significant byte is <code>R</code> and the least significant byte is <code>A</code>.</p> <p>Float colors are assumed to be in 0-1 gamma sRGB space. All other colors are assumed to be in 0-255 gamma sRGB space. If there is an alpha, we assume it is in linear space, and separate (NOT pre-multiplied).</p>"},{"location":"common/datatypes/#rerun.datatypes.Rgba32.__init__","title":"<code>def __init__(rgba)</code>","text":"<p>Create a new instance of the Rgba32 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.RotationAxisAngle","title":"<code>class RotationAxisAngle</code>","text":"<p>         Bases: <code>RotationAxisAngleExt</code></p> <p>Datatype: 3D rotation represented by a rotation around a given axis.</p>"},{"location":"common/datatypes/#rerun.datatypes.RotationAxisAngle.__init__","title":"<code>def __init__(axis, angle=None, *, radians=None, degrees=None)</code>","text":"<p>Create a new instance of the RotationAxisAngle datatype.</p> PARAMETER DESCRIPTION <code>axis</code> <p>Axis to rotate around.</p> <p>This is not required to be normalized.  If normalization fails (typically because the vector is length zero), the rotation is silently  ignored.</p> <p> TYPE: <code>Vec3DLike</code> </p> <code>angle</code> <p>How much to rotate around the axis.</p> <p> TYPE: <code>AngleLike | None</code> DEFAULT: <code>None</code> </p> <code>radians</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>degrees</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>degrees</code> <p>How much to rotate around the axis, in radians. Specify this instead of <code>radians</code> or <code>angle</code>.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TensorBuffer","title":"<code>class TensorBuffer</code>","text":"<p>         Bases: <code>TensorBufferExt</code></p> <p>Datatype: The underlying storage for <code>archetypes.Tensor</code>.</p> <p>Tensor elements are stored in a contiguous buffer of a single type.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorBuffer.inner","title":"<code>inner: Union[npt.NDArray[np.float16], npt.NDArray[np.float32], npt.NDArray[np.float64], npt.NDArray[np.int16], npt.NDArray[np.int32], npt.NDArray[np.int64], npt.NDArray[np.int8], npt.NDArray[np.uint16], npt.NDArray[np.uint32], npt.NDArray[np.uint64], npt.NDArray[np.uint8]] = field(converter=TensorBufferExt.inner__field_converter_override)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>U8 (npt.NDArray[np.uint8]):     8bit unsigned integer.</p> </li> <li> <p>U16 (npt.NDArray[np.uint16]):     16bit unsigned integer.</p> </li> <li> <p>U32 (npt.NDArray[np.uint32]):     32bit unsigned integer.</p> </li> <li> <p>U64 (npt.NDArray[np.uint64]):     64bit unsigned integer.</p> </li> <li> <p>I8 (npt.NDArray[np.int8]):     8bit signed integer.</p> </li> <li> <p>I16 (npt.NDArray[np.int16]):     16bit signed integer.</p> </li> <li> <p>I32 (npt.NDArray[np.int32]):     32bit signed integer.</p> </li> <li> <p>I64 (npt.NDArray[np.int64]):     64bit signed integer.</p> </li> <li> <p>F16 (npt.NDArray[np.float16]):     16bit IEEE-754 floating point, also known as <code>half</code>.</p> </li> <li> <p>F32 (npt.NDArray[np.float32]):     32bit IEEE-754 floating point, also known as <code>float</code> or <code>single</code>.</p> </li> <li> <p>F64 (npt.NDArray[np.float64]):     64bit IEEE-754 floating point, also known as <code>double</code>.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TensorData","title":"<code>class TensorData</code>","text":"<p>         Bases: <code>TensorDataExt</code></p> <p>Datatype: An N-dimensional array of numbers.</p> <p>The number of dimensions and their respective lengths is specified by the <code>shape</code> field. The dimensions are ordered from outermost to innermost. For example, in the common case of a 2D RGB Image, the shape would be <code>[height, width, channel]</code>.</p> <p>These dimensions are combined with an index to look up values from the <code>buffer</code> field, which stores a contiguous array of typed values.</p> <p>It's not currently possible to use <code>send_columns</code> with tensors since construction of <code>rerun.components.TensorDataBatch</code> does not support more than a single element. This will be addressed as part of https://github.com/rerun-io/rerun/issues/6832.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorData.__init__","title":"<code>def __init__(*, shape=None, buffer=None, array=None, dim_names=None)</code>","text":"<p>Construct a <code>TensorData</code> object.</p> <p>The <code>TensorData</code> object is internally represented by three fields: <code>shape</code> and <code>buffer</code>.</p> <p>This constructor provides additional arguments 'array', and 'dim_names'. When passing in a multi-dimensional array such as a <code>np.ndarray</code>, the <code>shape</code> and <code>buffer</code> fields will be populated automagically.</p> PARAMETER DESCRIPTION <code>self</code> <p>The TensorData object to construct.</p> <p> TYPE: <code>Any</code> </p> <code>shape</code> <p>The shape of the tensor. If None, and an array is provided, the shape will be inferred from the shape of the array.</p> <p> TYPE: <code>Sequence[TensorDimensionLike] | None</code> DEFAULT: <code>None</code> </p> <code>buffer</code> <p>The buffer of the tensor. If None, and an array is provided, the buffer will be generated from the array.</p> <p> TYPE: <code>TensorBufferLike | None</code> DEFAULT: <code>None</code> </p> <code>array</code> <p>A numpy array (or The array of the tensor. If None, the array will be inferred from the buffer.</p> <p> TYPE: <code>TensorLike | None</code> DEFAULT: <code>None</code> </p> <code>dim_names</code> <p>The names of the tensor dimensions when generating the shape from an array.</p> <p> TYPE: <code>Sequence[str | None] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TensorData.numpy","title":"<code>def numpy(force)</code>","text":"<p>Convert the TensorData back to a numpy array.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimension","title":"<code>class TensorDimension</code>","text":"<p>Datatype: A single dimension within a multi-dimensional tensor.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimension.__init__","title":"<code>def __init__(size, name=None)</code>","text":"<p>Create a new instance of the TensorDimension datatype.</p> PARAMETER DESCRIPTION <code>size</code> <p>The length of this dimension.</p> <p> TYPE: <code>int</code> </p> <code>name</code> <p>The name of this dimension, e.g. \"width\", \"height\", \"channel\", \"batch', \u2026.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimensionIndexSelection","title":"<code>class TensorDimensionIndexSelection</code>","text":"<p>Datatype: Indexing a specific tensor dimension.</p> <p>Selecting <code>dimension=2</code> and <code>index=42</code> is similar to doing <code>tensor[:, :, 42, :, :, \u2026]</code> in numpy.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimensionIndexSelection.__init__","title":"<code>def __init__(dimension, index)</code>","text":"<p>Create a new instance of the TensorDimensionIndexSelection datatype.</p> PARAMETER DESCRIPTION <code>dimension</code> <p>The dimension number to select.</p> <p> TYPE: <code>int</code> </p> <code>index</code> <p>The index along the dimension to use.</p> <p> TYPE: <code>int</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimensionSelection","title":"<code>class TensorDimensionSelection</code>","text":"<p>         Bases: <code>TensorDimensionSelectionExt</code></p> <p>Datatype: Selection of a single tensor dimension.</p>"},{"location":"common/datatypes/#rerun.datatypes.TensorDimensionSelection.__init__","title":"<code>def __init__(dimension, *, invert=False)</code>","text":"<p>Create a new instance of the TensorDimensionSelection datatype.</p> PARAMETER DESCRIPTION <code>dimension</code> <p>The dimension number to select.</p> <p> TYPE: <code>int</code> </p> <code>invert</code> <p>Invert the direction of the dimension.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TimeInt","title":"<code>class TimeInt</code>","text":"<p>         Bases: <code>TimeIntExt</code></p> <p>Datatype: A 64-bit number describing either nanoseconds OR sequence numbers.</p>"},{"location":"common/datatypes/#rerun.datatypes.TimeInt.__init__","title":"<code>def __init__(*, seq=None, seconds=None, nanos=None)</code>","text":"<p>Create a new instance of the TimeInt datatype.</p> PARAMETER DESCRIPTION <code>seq</code> <p>Time as a sequence number. Mutually exclusive with seconds and nanos.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seconds</code> <p>Time in seconds. Mutually exclusive with seq and nanos.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>nanos</code> <p>Time in nanoseconds. Mutually exclusive with seq and seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TimeRange","title":"<code>class TimeRange</code>","text":"<p>Datatype: Visible time range bounds for a specific timeline.</p>"},{"location":"common/datatypes/#rerun.datatypes.TimeRange.__init__","title":"<code>def __init__(start, end)</code>","text":"<p>Create a new instance of the TimeRange datatype.</p> PARAMETER DESCRIPTION <code>start</code> <p>Low time boundary for sequence timeline.</p> <p> TYPE: <code>TimeRangeBoundaryLike</code> </p> <code>end</code> <p>High time boundary for sequence timeline.</p> <p> TYPE: <code>TimeRangeBoundaryLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TimeRangeBoundary","title":"<code>class TimeRangeBoundary</code>","text":"<p>         Bases: <code>TimeRangeBoundaryExt</code></p> <p>Datatype: Left or right boundary of a time range.</p>"},{"location":"common/datatypes/#rerun.datatypes.TimeRangeBoundary.inner","title":"<code>inner: Union[None, datatypes.TimeInt] = field()</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Must be one of:</p> <ul> <li> <p>CursorRelative (datatypes.TimeInt):     Boundary is a value relative to the time cursor.</p> </li> <li> <p>Absolute (datatypes.TimeInt):     Boundary is an absolute value.</p> </li> <li> <p>Infinite (None):     The boundary extends to infinity.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TimeRangeBoundary.kind","title":"<code>kind: Literal['cursor_relative', 'absolute', 'infinite'] = field(default='cursor_relative')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Possible values:</p> <ul> <li> <p>\"cursor_relative\":     Boundary is a value relative to the time cursor.</p> </li> <li> <p>\"absolute\":     Boundary is an absolute value.</p> </li> <li> <p>\"infinite\":     The boundary extends to infinity.</p> </li> </ul>"},{"location":"common/datatypes/#rerun.datatypes.TimeRangeBoundary.absolute","title":"<code>def absolute(time=None, *, seq=None, seconds=None, nanos=None)</code>  <code>staticmethod</code>","text":"<p>Boundary that is at an absolute time.</p> PARAMETER DESCRIPTION <code>time</code> <p>Absolute time.</p> <p>Mutually exclusive with seq, seconds and nanos.</p> <p> TYPE: <code>TimeInt | None</code> DEFAULT: <code>None</code> </p> <code>seq</code> <p>Absolute time in sequence numbers.</p> <p>Use this for sequence timelines. Mutually exclusive with time, seconds and nanos.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seconds</code> <p>Absolute time in seconds.</p> <p>Use this for time based timelines. Mutually exclusive with time, seq and nanos.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>nanos</code> <p>Absolute time in nanoseconds.</p> <p>Use this for time based timelines. Mutually exclusive with time, seq and seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TimeRangeBoundary.cursor_relative","title":"<code>def cursor_relative(offset=None, *, seq=None, seconds=None, nanos=None)</code>  <code>staticmethod</code>","text":"<p>Boundary that is relative to the timeline cursor.</p> <p>The offset can be positive or negative. An offset of zero (the default) means the cursor time itself.</p> PARAMETER DESCRIPTION <code>offset</code> <p>Offset from the cursor time.</p> <p>Mutually exclusive with seq, seconds and nanos.</p> <p> TYPE: <code>TimeInt | None</code> DEFAULT: <code>None</code> </p> <code>seq</code> <p>Offset in sequence numbers.</p> <p>Use this for sequence timelines. Mutually exclusive with time, seconds and nanos.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>seconds</code> <p>Offset in seconds.</p> <p>Use this for time based timelines. Mutually exclusive with time, seq and nanos.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>nanos</code> <p>Offset in nanoseconds.</p> <p>Use this for time based timelines. Mutually exclusive with time, seq and seconds.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.TimeRangeBoundary.infinite","title":"<code>def infinite()</code>  <code>staticmethod</code>","text":"<p>Boundary that extends to infinity.</p> <p>Depending on the context, this can mean the beginning or the end of the timeline.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt16","title":"<code>class UInt16</code>","text":"<p>Datatype: A 16bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt16.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt16 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt32","title":"<code>class UInt32</code>","text":"<p>Datatype: A 32bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt32.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt32 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt64","title":"<code>class UInt64</code>","text":"<p>Datatype: A 64bit unsigned integer.</p>"},{"location":"common/datatypes/#rerun.datatypes.UInt64.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the UInt64 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec2D","title":"<code>class UVec2D</code>","text":"<p>         Bases: <code>UVec2DExt</code></p> <p>Datatype: A uint32 vector in 2D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the UVec2D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec3D","title":"<code>class UVec3D</code>","text":"<p>         Bases: <code>UVec3DExt</code></p> <p>Datatype: A uint32 vector in 3D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the UVec3D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec4D","title":"<code>class UVec4D</code>","text":"<p>Datatype: A uint vector in 4D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.UVec4D.__init__","title":"<code>def __init__(xyzw)</code>","text":"<p>Create a new instance of the UVec4D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Utf8","title":"<code>class Utf8</code>","text":"<p>Datatype: A string of text, encoded as UTF-8.</p>"},{"location":"common/datatypes/#rerun.datatypes.Utf8.__init__","title":"<code>def __init__(value)</code>","text":"<p>Create a new instance of the Utf8 datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Uuid","title":"<code>class Uuid</code>","text":"<p>         Bases: <code>UuidExt</code></p> <p>Datatype: A 16-byte UUID.</p>"},{"location":"common/datatypes/#rerun.datatypes.Uuid.__init__","title":"<code>def __init__(bytes)</code>","text":"<p>Create a new instance of the Uuid datatype.</p> PARAMETER DESCRIPTION <code>bytes</code> <p>The raw bytes representing the UUID.</p> <p> TYPE: <code>UuidLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.Vec2D","title":"<code>class Vec2D</code>","text":"<p>         Bases: <code>Vec2DExt</code></p> <p>Datatype: A vector in 2D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec2D.__init__","title":"<code>def __init__(xy)</code>","text":"<p>Create a new instance of the Vec2D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec3D","title":"<code>class Vec3D</code>","text":"<p>         Bases: <code>Vec3DExt</code></p> <p>Datatype: A vector in 3D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec3D.__init__","title":"<code>def __init__(xyz)</code>","text":"<p>Create a new instance of the Vec3D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec4D","title":"<code>class Vec4D</code>","text":"<p>         Bases: <code>Vec4DExt</code></p> <p>Datatype: A vector in 4D space.</p>"},{"location":"common/datatypes/#rerun.datatypes.Vec4D.__init__","title":"<code>def __init__(xyzw)</code>","text":"<p>Create a new instance of the Vec4D datatype.</p>"},{"location":"common/datatypes/#rerun.datatypes.VideoTimestamp","title":"<code>class VideoTimestamp</code>","text":"<p>Datatype: Presentation timestamp within a <code>archetypes.AssetVideo</code>.</p> <p>Specified in nanoseconds. Presentation timestamps are typically measured as time since video start.</p>"},{"location":"common/datatypes/#rerun.datatypes.VideoTimestamp.__init__","title":"<code>def __init__(timestamp_ns)</code>","text":"<p>Create a new instance of the VideoTimestamp datatype.</p> PARAMETER DESCRIPTION <code>timestamp_ns</code> <p>Presentation timestamp value in nanoseconds.</p> <p> TYPE: <code>VideoTimestampLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.ViewCoordinates","title":"<code>class ViewCoordinates</code>","text":"<p>         Bases: <code>ViewCoordinatesExt</code></p> <p>Datatype: How we interpret the coordinate system of an entity/space.</p> <p>For instance: What is \"up\"? What does the Z axis mean?</p> <p>The three coordinates are always ordered as [x, y, z].</p> <p>For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points down, and the Z axis points forward.</p> <p>\u26a0 Rerun does not yet support left-handed coordinate systems.</p> <p>The following constants are used to represent the different directions:  * Up = 1  * Down = 2  * Right = 3  * Left = 4  * Forward = 5  * Back = 6</p>"},{"location":"common/datatypes/#rerun.datatypes.ViewCoordinates.__init__","title":"<code>def __init__(coordinates)</code>","text":"<p>Create a new instance of the ViewCoordinates datatype.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>The directions of the [x, y, z] axes.</p> <p> TYPE: <code>ViewCoordinatesLike</code> </p>"},{"location":"common/datatypes/#rerun.datatypes.VisibleTimeRange","title":"<code>class VisibleTimeRange</code>","text":"<p>         Bases: <code>VisibleTimeRangeExt</code></p> <p>Datatype: Visible time range bounds for a specific timeline.</p>"},{"location":"common/datatypes/#rerun.datatypes.VisibleTimeRange.__init__","title":"<code>def __init__(timeline, range=None, *, start=None, end=None)</code>","text":"<p>Create a new instance of the VisibleTimeRange datatype.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>Name of the timeline this applies to.</p> <p> TYPE: <code>Utf8Like</code> </p> <code>range</code> <p>Time range to use for this timeline.</p> <p> TYPE: <code>TimeRangeLike | None</code> DEFAULT: <code>None</code> </p> <code>start</code> <p>Low time boundary for sequence timeline. Specify this instead of <code>range</code>.</p> <p> TYPE: <code>TimeRangeBoundary | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>High time boundary for sequence timeline. Specify this instead of <code>range</code>.</p> <p> TYPE: <code>TimeRangeBoundary | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/enums/","title":"Enums","text":""},{"location":"common/enums/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/enums/#rerun.Box2DFormat","title":"<code>class Box2DFormat</code>","text":"<p>         Bases: <code>Enum</code></p> <p>How to specify 2D boxes (axis-aligned bounding boxes).</p>"},{"location":"common/enums/#rerun.Box2DFormat.XCYCW2H2","title":"<code>XCYCW2H2 = 'XCYCW2H2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x_center, y_center, width/2, height/2].</p>"},{"location":"common/enums/#rerun.Box2DFormat.XCYCWH","title":"<code>XCYCWH = 'XCYCWH'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x_center, y_center, width, height].</p>"},{"location":"common/enums/#rerun.Box2DFormat.XYWH","title":"<code>XYWH = 'XYWH'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x,y,w,h], with x,y = left,top.</p>"},{"location":"common/enums/#rerun.Box2DFormat.XYXY","title":"<code>XYXY = 'XYXY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = right,bottom.</p>"},{"location":"common/enums/#rerun.Box2DFormat.YXHW","title":"<code>YXHW = 'YXHW'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[y,x,h,w], with x,y = left,top.</p>"},{"location":"common/enums/#rerun.Box2DFormat.YXYX","title":"<code>YXYX = 'YXYX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = right,bottom.</p>"},{"location":"common/enums/#rerun.ImageFormat","title":"<code>class ImageFormat</code>","text":"<p>\u26a0\ufe0f DEPRECATED \u26a0\ufe0f Image file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.BMP","title":"<code>BMP: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>BMP file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.GIF","title":"<code>GIF: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>JPEG/JPG file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.JPEG","title":"<code>JPEG: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>JPEG/JPG file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.NV12","title":"<code>NV12: type[NV12]</code>  <code>instance-attribute</code>","text":"<p>Raw NV12 encoded image.</p> <p>The type comes with a <code>size_hint</code> attribute, a tuple of (height, width) which has to be specified specifying in order to set the RGB size of the image.</p>"},{"location":"common/enums/#rerun.ImageFormat.PNG","title":"<code>PNG: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>PNG file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.TIFF","title":"<code>TIFF: ImageFormat</code>  <code>instance-attribute</code>","text":"<p>TIFF file format.</p>"},{"location":"common/enums/#rerun.ImageFormat.YUY2","title":"<code>YUY2: type[YUY2]</code>  <code>instance-attribute</code>","text":"<p>Raw YUY2 encoded image.</p> <p>YUY2 is a YUV422 encoding with bytes ordered as <code>yuyv</code>.</p> <p>The type comes with a <code>size_hint</code> attribute, a tuple of (height, width) which has to be specified specifying in order to set the RGB size of the image.</p>"},{"location":"common/experimental/","title":"Experimental","text":""},{"location":"common/experimental/#rerun.experimental","title":"<code>rerun.experimental</code>","text":"<p>Experimental features for Rerun.</p> <p>These features are not yet stable and may change in future releases without going through the normal deprecation cycle.</p>"},{"location":"common/initialization_functions/","title":"Initialization functions","text":""},{"location":"common/initialization_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/initialization_functions/#rerun.init","title":"<code>def init(application_id, *, recording_id=None, spawn=False, init_logging=True, default_enabled=True, strict=None, default_blueprint=None)</code>","text":"<p>Initialize the Rerun SDK with a user-chosen application id (name).</p> <p>You must call this function first in order to initialize a global recording. Without an active recording, all methods of the SDK will turn into no-ops.</p> <p>For more advanced use cases, e.g. multiple recordings setups, see <code>rerun.new_recording</code>.</p> <p>Warning</p> <p>If you don't specify a <code>recording_id</code>, it will default to a random value that is generated once at the start of the process. That value will be kept around for the whole lifetime of the process, and even inherited by all its subprocesses, if any.</p> <p>This makes it trivial to log data to the same recording in a multiprocess setup, but it also means that the following code will not create two distinct recordings: <pre><code>rr.init(\"my_app\")\nrr.init(\"my_app\")\n</code></pre></p> <p>To create distinct recordings from the same process, specify distinct recording IDs: <pre><code>from uuid import uuid4\nrr.init(\"my_app\", recording_id=uuid4())\nrr.init(\"my_app\", recording_id=uuid4())\n</code></pre></p> PARAMETER DESCRIPTION <code>application_id</code> <p>Your Rerun recordings will be categorized by this application id, so try to pick a unique one for each application that uses the Rerun SDK.</p> <p>For example, if you have one application doing object detection and another doing camera calibration, you could have <code>rerun.init(\"object_detector\")</code> and <code>rerun.init(\"calibrator\")</code>.</p> <p>Application ids starting with <code>rerun_example_</code> are reserved for Rerun examples, and will be treated specially by the Rerun Viewer. In particular, it will opt-in to more analytics, and will also seed the global random number generator deterministically.</p> <p> TYPE: <code>str</code> </p> <code>recording_id</code> <p>Set the recording ID that this process is logging to, as a UUIDv4.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>spawn</code> <p>Spawn a Rerun Viewer and stream logging data to it. Short for calling <code>spawn</code> separately. If you don't call this, log events will be buffered indefinitely until you call either <code>connect</code>, <code>show</code>, or <code>save</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>default_enabled</code> <p>Should Rerun logging be on by default? Can be overridden with the RERUN env-var, e.g. <code>RERUN=on</code> or <code>RERUN=off</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>init_logging</code> <p>Should we initialize the logging for this application?</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>strict</code> <p>If <code>True</code>, an exception is raised on use error (wrong parameter types, etc.). If <code>False</code>, errors are logged as warnings instead. If unset, this can alternatively be overridden using the RERUN_STRICT environment variable. If not otherwise specified, the default behavior will be equivalent to <code>False</code>.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.connect","title":"<code>def connect(addr=None, *, flush_timeout_sec=2.0, default_blueprint=None, recording=None)</code>","text":"<p>Connect to a remote Rerun Viewer on the given ip:port.</p> <p>Requires that you first start a Rerun Viewer by typing 'rerun' in a terminal.</p> <p>This function returns immediately.</p> PARAMETER DESCRIPTION <code>addr</code> <p>The ip:port to connect to</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>flush_timeout_sec</code> <p>The minimum time the SDK will wait during a flush before potentially dropping data if progress is not being made. Passing <code>None</code> indicates no timeout, and can cause a call to <code>flush</code> to block indefinitely.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>2.0</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.disconnect","title":"<code>def disconnect(recording=None)</code>","text":"<p>Closes all TCP connections, servers, and files.</p> <p>Closes all TCP connections, servers, and files that have been opened with [<code>rerun.connect</code>], [<code>rerun.serve</code>], [<code>rerun.save</code>] or [<code>rerun.spawn</code>].</p> PARAMETER DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.save","title":"<code>def save(path, default_blueprint=None, recording=None)</code>","text":"<p>Stream all log-data to a file.</p> <p>Call this before you log any data!</p> <p>The Rerun Viewer is able to read continuously from the resulting rrd file while it is being written. However, depending on your OS and configuration, changes may not be immediately visible due to file caching. This is a common issue on Windows and (to a lesser extent) on MacOS.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to save the data to.</p> <p> TYPE: <code>str | Path</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.send_blueprint","title":"<code>def send_blueprint(blueprint, *, make_active=True, make_default=True, recording=None)</code>","text":"<p>Create a blueprint from a <code>BlueprintLike</code> and send it to the <code>RecordingStream</code>.</p> PARAMETER DESCRIPTION <code>blueprint</code> <p>A blueprint object to send to the viewer.</p> <p> TYPE: <code>BlueprintLike</code> </p> <code>make_active</code> <p>Immediately make this the active blueprint for the associated <code>app_id</code>. Note that setting this to <code>false</code> does not mean the blueprint may not still end up becoming active. In particular, if <code>make_default</code> is true and there is no other currently active blueprint.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>make_default</code> <p>Make this the default blueprint for the <code>app_id</code>. The default blueprint will be used as the template when the user resets the blueprint for the app. It will also become the active blueprint if no other blueprint is currently active.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.serve","title":"<code>def serve(*, open_browser=True, web_port=None, ws_port=None, default_blueprint=None, recording=None, server_memory_limit='25%')</code>","text":"<p>Serve log-data over WebSockets and serve a Rerun web viewer over HTTP.</p> <p>You can also connect to this server with the native viewer using <code>rerun localhost:9090</code>.</p> <p>The WebSocket server will buffer all log data in memory so that late connecting viewers will get all the data. You can limit the amount of data buffered by the WebSocket server with the <code>server_memory_limit</code> argument. Once reached, the earliest logged data will be dropped. Note that this means that static data may be dropped if logged early (see https://github.com/rerun-io/rerun/issues/5531).</p> <p>This function returns immediately.</p> PARAMETER DESCRIPTION <code>open_browser</code> <p>Open the default browser to the viewer.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>web_port</code> <p>The port to serve the web viewer on (defaults to 9090).</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>ws_port</code> <p>The port to serve the WebSocket server on (defaults to 9877)</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>server_memory_limit</code> <p>Maximum amount of memory to use for buffering log data for clients that connect late. This can be a percentage of the total ram (e.g. \"50%\") or an absolute value (e.g. \"4GB\").</p> <p> TYPE: <code>str</code> DEFAULT: <code>'25%'</code> </p>"},{"location":"common/initialization_functions/#rerun.spawn","title":"<code>def spawn(*, port=9876, connect=True, memory_limit='75%', hide_welcome_screen=False, default_blueprint=None, recording=None)</code>","text":"<p>Spawn a Rerun Viewer, listening on the given port.</p> <p>This is often the easiest and best way to use Rerun. Just call this once at the start of your program.</p> <p>You can also call rerun.init with a <code>spawn=True</code> argument.</p> PARAMETER DESCRIPTION <code>port</code> <p>The port to listen on.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9876</code> </p> <code>connect</code> <p>also connect to the viewer and stream logging data to it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>memory_limit</code> <p>An upper limit on how much memory the Rerun Viewer should use. When this limit is reached, Rerun will drop the oldest data. Example: <code>16GB</code> or <code>50%</code> (of system total).</p> <p> TYPE: <code>str</code> DEFAULT: <code>'75%'</code> </p> <code>hide_welcome_screen</code> <p>Hide the normal Rerun welcome screen.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use if <code>connect = True</code>. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.memory_recording","title":"<code>def memory_recording(recording=None)</code>","text":"<p>Streams all log-data to a memory buffer.</p> <p>This can be used to display the RRD to alternative formats such as html. See: rerun.notebook_show.</p> PARAMETER DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>MemoryRecording</code> <p>A memory recording object that can be used to read the data.</p>"},{"location":"common/initialization_functions/#rerun.notebook_show","title":"<code>def notebook_show(*, width=None, height=None, blueprint=None, recording=None)</code>","text":"<p>Output the Rerun viewer in a notebook using IPython IPython.core.display.HTML.</p> <p>Any data logged to the recording after initialization will be sent directly to the viewer.</p> <p>Note that this can be called at any point during cell execution. The call will block until the embedded viewer is initialized and ready to receive data. Thereafter any log calls will immediately send data to the viewer.</p> PARAMETER DESCRIPTION <code>width</code> <p>The width of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>height</code> <p>The height of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>blueprint</code> <p>A blueprint object to send to the viewer. It will be made active and set as the default blueprint in the recording.</p> <p>Setting this is equivalent to calling <code>rerun.send_blueprint</code> before initializing the viewer.</p> <p> TYPE: <code>BlueprintLike</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/initialization_functions/#rerun.legacy_notebook_show","title":"<code>def legacy_notebook_show(*, width=DEFAULT_WIDTH, height=DEFAULT_HEIGHT, app_url=None, timeout_ms=DEFAULT_TIMEOUT, blueprint=None, recording=None)</code>","text":"<p>Output the Rerun viewer in a notebook using IPython IPython.core.display.HTML.</p> <p>This is a legacy function that uses a limited mechanism of inlining an RRD into a self-contained HTML template that loads the viewer in an iframe.</p> <p>In general, rerun.notebook_show should be preferred. However, this function can be useful in some systems with incomplete support for the <code>anywidget</code> library.</p> PARAMETER DESCRIPTION <code>width</code> <p>The width of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_WIDTH</code> </p> <code>height</code> <p>The height of the viewer in pixels.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_HEIGHT</code> </p> <code>app_url</code> <p>Alternative HTTP url to find the Rerun web viewer. This will default to using <code>https://app.rerun.io</code> or localhost if rerun.start_web_viewer_server has been called.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout_ms</code> <p>The number of milliseconds to wait for the Rerun web viewer to load.</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEFAULT_TIMEOUT</code> </p> <code>blueprint</code> <p>The blueprint to display in the viewer.</p> <p> TYPE: <code>BlueprintLike</code> DEFAULT: <code>None</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/interfaces/","title":"Interfaces","text":""},{"location":"common/interfaces/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/interfaces/#rerun.AsComponents","title":"<code>class AsComponents</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>Describes interface for interpreting an object as a bundle of Components.</p> <p>Note: the <code>num_instances()</code> function is an optional part of this interface. The method does not need to be implemented as it is only used after checking for its existence. (There is unfortunately no way to express this correctly with the Python typing system, see https://github.com/python/typing/issues/601).</p>"},{"location":"common/interfaces/#rerun.AsComponents.as_component_batches","title":"<code>def as_component_batches()</code>","text":"<p>Returns an iterable of <code>ComponentBatchLike</code> objects.</p> <p>Each object in the iterable must adhere to the <code>ComponentBatchLike</code> interface.</p>"},{"location":"common/interfaces/#rerun.ComponentBatchLike","title":"<code>class ComponentBatchLike</code>","text":"<p>         Bases: <code>Protocol</code></p> <p>Describes interface for objects that can be converted to batch of rerun Components.</p>"},{"location":"common/interfaces/#rerun.ComponentBatchLike.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>Returns a <code>pyarrow.Array</code> of the component data.</p>"},{"location":"common/interfaces/#rerun.ComponentBatchLike.component_name","title":"<code>def component_name()</code>","text":"<p>Returns the name of the component.</p>"},{"location":"common/interfaces/#rerun.ComponentColumn","title":"<code>class ComponentColumn</code>","text":"<p>A column of components that can be sent using <code>send_columns</code>.</p> <p>This is represented by a ComponentBatch array that has been repartitioned into multiple segments. This is useful for reinterpreting a single contiguous batch as multiple sub-batches to use with the <code>send_columns</code> API.</p>"},{"location":"common/interfaces/#rerun.ComponentColumn.__init__","title":"<code>def __init__(component_batch, lengths)</code>","text":"<p>Construct a new component column.</p> PARAMETER DESCRIPTION <code>component_batch</code> <p>The component batch to partition into a column.</p> <p> TYPE: <code>ComponentBatchLike</code> </p> <code>lengths</code> <p>The lengths of the partitions.</p> <p> TYPE: <code>ArrayLike</code> </p>"},{"location":"common/interfaces/#rerun.ComponentColumn.as_arrow_array","title":"<code>def as_arrow_array()</code>","text":"<p>The component as an arrow batch.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/interfaces/#rerun.ComponentColumn.component_name","title":"<code>def component_name()</code>","text":"<p>The name of the component.</p> <p>Part of the <code>ComponentBatchLike</code> logging interface.</p>"},{"location":"common/logging_functions/","title":"Logging functions","text":""},{"location":"common/logging_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/logging_functions/#rerun.log","title":"<code>def log(entity_path, entity, *extra, timeless=False, static=False, recording=None, strict=None)</code>","text":"<p>Log data to Rerun.</p> <p>This is the main entry point for logging data to rerun. It can be used to log anything that implements the <code>rerun.AsComponents</code> interface, or a collection of <code>ComponentBatchLike</code> objects.</p> <p>When logging data, you must always provide an entity_path for identifying the data. Note that the path prefix \"rerun/\" is considered reserved for use by the Rerun SDK itself and should not be used for logging user data. This is where Rerun will log additional information such as warnings.</p> <p>The most common way to log is with one of the rerun archetypes, all of which implement the <code>AsComponents</code> interface.</p> <p>For example, to log a 3D point: <pre><code>rr.log(\"my/point\", rr.Points3D(position=[1.0, 2.0, 3.0]))\n</code></pre></p> <p>The <code>log</code> function can flexibly accept an arbitrary number of additional objects which will be merged into the first entity so long as they don't expose conflicting components, for instance: <pre><code># Log three points with arrows sticking out of them,\n# and a custom \"confidence\" component.\nrr.log(\n    \"my/points\",\n    rr.Points3D([[0.2, 0.5, 0.3], [0.9, 1.2, 0.1], [1.0, 4.2, 0.3]], radii=[0.1, 0.2, 0.3]),\n    rr.Arrows3D(vectors=[[0.3, 2.1, 0.2], [0.9, -1.1, 2.3], [-0.4, 0.5, 2.9]]),\n    rr.AnyValues(confidence=[0.3, 0.4, 0.9]),\n)\n</code></pre></p> <p>See also: <code>rerun.log_components</code>.</p> PARAMETER DESCRIPTION <code>entity_path</code> <p>Path to the entity in the space hierarchy.</p> <p>The entity path can either be a string (with special characters escaped, split on unescaped slashes) or a list of unescaped strings. This means that logging to <code>\"world/my\\ image\\!\"</code> is the same as logging to [\"world\", \"my image!\"].</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> <p> TYPE: <code>str | list[str]</code> </p> <code>entity</code> <p>Anything that implements the <code>rerun.AsComponents</code> interface, usually an archetype.</p> <p> TYPE: <code>AsComponents | Iterable[ComponentBatchLike]</code> </p> <code>*extra</code> <p>An arbitrary number of additional component bundles implementing the <code>rerun.AsComponents</code> interface, that are logged to the same entity path.</p> <p> TYPE: <code>AsComponents | Iterable[ComponentBatchLike]</code> DEFAULT: <code>()</code> </p> <code>timeless</code> <p>Deprecated. Refer to <code>static</code> instead.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>static</code> <p>If true, the components will be logged as static data.</p> <p>Static data has no time associated with it, exists on all timelines, and unconditionally shadows any temporal data of the same type.</p> <p>Otherwise, the data will be timestamped automatically with <code>log_time</code> and <code>log_tick</code>. Additional timelines set by <code>rerun.set_time_sequence</code>, <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code> will also be included.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If True, raise exceptions on non-loggable data. If False, warn on non-loggable data. if None, use the global default from <code>rerun.strict_mode()</code></p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/logging_functions/#rerun.log_file_from_path","title":"<code>def log_file_from_path(file_path, *, entity_path_prefix=None, static=False, timeless=False, recording=None)</code>","text":"<p>Logs the file at the given <code>path</code> using all <code>DataLoader</code>s available.</p> <p>A single <code>path</code> might be handled by more than one loader.</p> <p>This method blocks until either at least one <code>DataLoader</code> starts streaming data in or all of them fail.</p> <p>See https://www.rerun.io/docs/getting-started/data-in/open-any-file for more information.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>Path to the file to be logged.</p> <p> TYPE: <code>str | Path</code> </p> <code>entity_path_prefix</code> <p>What should the logged entity paths be prefixed with?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>timeless</code> <p>Deprecated. Refer to <code>static</code> instead.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>static</code> <p>If true, the components will be logged as static data.</p> <p>Static data has no time associated with it, exists on all timelines, and unconditionally shadows any temporal data of the same type.</p> <p>Otherwise, the data will be timestamped automatically with <code>log_time</code> and <code>log_tick</code>. Additional timelines set by <code>rerun.set_time_sequence</code>, <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code> will also be included.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/logging_functions/#rerun.log_file_from_contents","title":"<code>def log_file_from_contents(file_path, file_contents, *, entity_path_prefix=None, static=False, timeless=None, recording=None)</code>","text":"<p>Logs the given <code>file_contents</code> using all <code>DataLoader</code>s available.</p> <p>A single <code>path</code> might be handled by more than one loader.</p> <p>This method blocks until either at least one <code>DataLoader</code> starts streaming data in or all of them fail.</p> <p>See https://www.rerun.io/docs/getting-started/data-in/open-any-file for more information.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>Path to the file that the <code>file_contents</code> belong to.</p> <p> TYPE: <code>str | Path</code> </p> <code>file_contents</code> <p>Contents to be logged.</p> <p> TYPE: <code>bytes</code> </p> <code>entity_path_prefix</code> <p>What should the logged entity paths be prefixed with?</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>timeless</code> <p>Deprecated. Refer to <code>static</code> instead.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>static</code> <p>If true, the components will be logged as static data.</p> <p>Static data has no time associated with it, exists on all timelines, and unconditionally shadows any temporal data of the same type.</p> <p>Otherwise, the data will be timestamped automatically with <code>log_time</code> and <code>log_tick</code>. Additional timelines set by <code>rerun.set_time_sequence</code>, <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code> will also be included.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/","title":"Other classes and functions","text":""},{"location":"common/other_classes_and_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/other_classes_and_functions/#rerun.RecordingStream","title":"<code>class RecordingStream</code>","text":"<p>A RecordingStream is used to send data to Rerun.</p> <p>You can instantiate a RecordingStream by calling either <code>rerun.init</code> (to create a global recording) or <code>rerun.new_recording</code> (for more advanced use cases).</p> Multithreading <p>A RecordingStream can safely be copied and sent to other threads. You can also set a recording as the global active one for all threads (<code>rerun.set_global_data_recording</code>) or just for the current thread (<code>rerun.set_thread_local_data_recording</code>).</p> <p>Similarly, the <code>with</code> keyword can be used to temporarily set the active recording for the current thread, e.g.: <pre><code>with rec:\n    rr.log(...)\n</code></pre> WARNING: if using a RecordingStream as a context manager, yielding from a generator function while holding the context open will leak the context and likely cause your program to send data to the wrong stream. See: https://github.com/rerun-io/rerun/issues/6238. You can work around this by using the <code>rerun.recording_stream_generator_ctx</code> decorator.</p> <p>See also: <code>rerun.get_data_recording</code>, <code>rerun.get_global_data_recording</code>, <code>rerun.get_thread_local_data_recording</code>.</p> Available methods <p>Every function in the Rerun SDK that takes an optional RecordingStream as a parameter can also be called as a method on RecordingStream itself.</p> <p>This includes, but isn't limited to:</p> <ul> <li>Metadata-related functions:     <code>rerun.is_enabled</code>, <code>rerun.get_recording_id</code>, \u2026</li> <li>Sink-related functions:     <code>rerun.connect</code>, <code>rerun.spawn</code>, \u2026</li> <li>Time-related functions:     <code>rerun.set_time_seconds</code>, <code>rerun.set_time_sequence</code>, \u2026</li> <li>Log-related functions:     <code>rerun.log</code>, <code>rerun.log_components</code>, \u2026</li> </ul> <p>For an exhaustive list, see <code>help(rerun.RecordingStream)</code>.</p> Micro-batching <p>Micro-batching using both space and time triggers (whichever comes first) is done automatically in a dedicated background thread.</p> <p>You can configure the frequency of the batches using the following environment variables:</p> <ul> <li><code>RERUN_FLUSH_TICK_SECS</code>:     Flush frequency in seconds (default: <code>0.05</code> (50ms)).</li> <li><code>RERUN_FLUSH_NUM_BYTES</code>:     Flush threshold in bytes (default: <code>1048576</code> (1MiB)).</li> <li><code>RERUN_FLUSH_NUM_ROWS</code>:     Flush threshold in number of rows (default: <code>18446744073709551615</code> (u64::MAX)).</li> </ul>"},{"location":"common/other_classes_and_functions/#rerun.LoggingHandler","title":"<code>class LoggingHandler</code>","text":"<p>         Bases: <code>Handler</code></p> <p>Provides a logging handler that forwards all events to the Rerun SDK.</p> <p>Read more about logging handlers.</p>"},{"location":"common/other_classes_and_functions/#rerun.LoggingHandler.__init__","title":"<code>def __init__(path_prefix=None)</code>","text":"<p>Initializes the logging handler with an optional path prefix.</p> PARAMETER DESCRIPTION <code>path_prefix</code> <p>A common prefix for all logged entity paths. Defaults to no prefix.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.LoggingHandler.emit","title":"<code>def emit(record)</code>","text":"<p>Emits a record to the Rerun SDK.</p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording","title":"<code>class MemoryRecording</code>","text":"<p>A recording that stores data in memory.</p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording.drain_as_bytes","title":"<code>def drain_as_bytes()</code>","text":"<p>Drains the MemoryRecording and returns the data as bytes.</p> <p>This will flush the current sink before returning.</p>"},{"location":"common/other_classes_and_functions/#rerun.MemoryRecording.num_msgs","title":"<code>def num_msgs()</code>","text":"<p>The number of pending messages in the MemoryRecording.</p> <p>Note: counting the messages will flush the batcher in order to get a deterministic count.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_data_recording","title":"<code>def get_data_recording(recording=None)</code>","text":"<p>Returns the most appropriate recording to log data to, in the current context, if any.</p> <ul> <li>If <code>recording</code> is specified, returns that one;</li> <li>Otherwise, falls back to the currently active thread-local recording, if there is one;</li> <li>Otherwise, falls back to the currently active global recording, if there is one;</li> <li>Otherwise, returns None.</li> </ul> PARAMETER DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Optional[RecordingStream]</code> <p>The most appropriate recording to log data to, in the current context, if any.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_global_data_recording","title":"<code>def get_global_data_recording()</code>","text":"<p>Returns the currently active global recording, if any.</p> RETURNS DESCRIPTION <code>Optional[RecordingStream]</code> <p>The currently active global recording, if any.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_recording_id","title":"<code>def get_recording_id(recording=None)</code>","text":"<p>Get the recording ID that this recording is logging to, as a UUIDv4, if any.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> PARAMETER DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The recording ID that this recording is logging to.</p>"},{"location":"common/other_classes_and_functions/#rerun.get_thread_local_data_recording","title":"<code>def get_thread_local_data_recording()</code>","text":"<p>Returns the currently active thread-local recording, if any.</p> RETURNS DESCRIPTION <code>Optional[RecordingStream]</code> <p>The currently active thread-local recording, if any.</p>"},{"location":"common/other_classes_and_functions/#rerun.is_enabled","title":"<code>def is_enabled(recording=None)</code>","text":"<p>Is this Rerun recording enabled.</p> <p>If false, all calls to the recording are ignored.</p> <p>The default can be set in <code>rerun.init</code>, but is otherwise <code>True</code>.</p> <p>This can be controlled with the environment variable <code>RERUN</code> (e.g. <code>RERUN=on</code> or <code>RERUN=off</code>).</p>"},{"location":"common/other_classes_and_functions/#rerun.log_components","title":"<code>def log_components(entity_path, components, *, num_instances=None, timeless=False, static=False, recording=None, strict=None)</code>","text":"<p>Log an entity from a collection of <code>ComponentBatchLike</code> objects.</p> <p>See also: <code>rerun.log</code>.</p> PARAMETER DESCRIPTION <code>entity_path</code> <p>Path to the entity in the space hierarchy.</p> <p>The entity path can either be a string (with special characters escaped, split on unescaped slashes) or a list of unescaped strings. This means that logging to <code>\"world/my\\ image\\!\"</code> is the same as logging to [\"world\", \"my image!\"].</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> <p> TYPE: <code>str | list[str]</code> </p> <code>components</code> <p>A collection of <code>ComponentBatchLike</code> objects that</p> <p> TYPE: <code>Iterable[ComponentBatchLike]</code> </p> <code>num_instances</code> <p>Optional. The number of instances in each batch. If not provided, the max of all components will be used instead.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>timeless</code> <p>Deprecated. Refer to <code>static</code> instead.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>static</code> <p>If true, the components will be logged as static data.</p> <p>Static data has no time associated with it, exists on all timelines, and unconditionally shadows any temporal data of the same type.</p> <p>Otherwise, the data will be timestamped automatically with <code>log_time</code> and <code>log_tick</code>. Additional timelines set by <code>rerun.set_time_sequence</code>, <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code> will also be included.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p> <code>strict</code> <p>If True, raise exceptions on non-loggable data. If False, warn on non-loggable data. if None, use the global default from <code>rerun.strict_mode()</code></p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.new_recording","title":"<code>def new_recording(application_id, *, recording_id=None, make_default=False, make_thread_default=False, spawn=False, default_enabled=True)</code>","text":"<p>Creates a new recording with a user-chosen application id (name) that can be used to log data.</p> <p>If you only need a single global recording, <code>rerun.init</code> might be simpler.</p> <p>Note that unless setting <code>spawn=True</code> new recording streams always begin connected to a buffered sink. To send the data to a viewer or file you will likely want to call <code>rerun.connect</code> or <code>rerun.save</code> explicitly.</p> <p>Warning</p> <p>If you don't specify a <code>recording_id</code>, it will default to a random value that is generated once at the start of the process. That value will be kept around for the whole lifetime of the process, and even inherited by all its subprocesses, if any.</p> <p>This makes it trivial to log data to the same recording in a multiprocess setup, but it also means that the following code will not create two distinct recordings: <pre><code>rr.init(\"my_app\")\nrr.init(\"my_app\")\n</code></pre></p> <p>To create distinct recordings from the same process, specify distinct recording IDs: <pre><code>from uuid import uuid4\nrec = rr.new_recording(application_id=\"test\", recording_id=uuid4())\nrec = rr.new_recording(application_id=\"test\", recording_id=uuid4())\n</code></pre></p> PARAMETER DESCRIPTION <code>application_id</code> <p>Your Rerun recordings will be categorized by this application id, so try to pick a unique one for each application that uses the Rerun SDK.</p> <p>For example, if you have one application doing object detection and another doing camera calibration, you could have <code>rerun.init(\"object_detector\")</code> and <code>rerun.init(\"calibrator\")</code>.</p> <p> TYPE: <code>str</code> </p> <code>recording_id</code> <p>Set the recording ID that this process is logging to, as a UUIDv4.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>make_default</code> <p>If true (not the default), the newly initialized recording will replace the current active one (if any) in the global scope.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>make_thread_default</code> <p>If true (not the default), the newly initialized recording will replace the current active one (if any) in the thread-local scope.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>spawn</code> <p>Spawn a Rerun Viewer and stream logging data to it. Short for calling <code>spawn</code> separately. If you don't call this, log events will be buffered indefinitely until you call either <code>connect</code>, <code>show</code>, or <code>save</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>default_enabled</code> <p>Should Rerun logging be on by default? Can be overridden with the RERUN env-var, e.g. <code>RERUN=on</code> or <code>RERUN=off</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>RecordingStream</code> <p>A handle to the <code>rerun.RecordingStream</code>. Use it to log data to Rerun.</p> <p>Examples:</p> <p>Using a recording stream object directly. <pre><code>from uuid import uuid4\nstream = rr.new_recording(\"my_app\", recording_id=uuid4())\nstream.connect()\nstream.log(\"hello\", rr.TextLog(\"Hello world\"))\n</code></pre></p> <p>Setting up a new global recording explicitly. <pre><code>from uuid import uuid4\nrr.new_recording(\"my_app\", make_default=True, recording_id=uuid4())\nrr.connect()\nrr.log(\"hello\", rr.TextLog(\"Hello world\"))\n</code></pre></p>"},{"location":"common/other_classes_and_functions/#rerun.set_global_data_recording","title":"<code>def set_global_data_recording(recording)</code>","text":"<p>Replaces the currently active global recording with the specified one.</p> PARAMETER DESCRIPTION <code>recording</code> <p>The newly active global recording.</p> <p> TYPE: <code>RecordingStream</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.set_thread_local_data_recording","title":"<code>def set_thread_local_data_recording(recording)</code>","text":"<p>Replaces the currently active thread-local recording with the specified one.</p> PARAMETER DESCRIPTION <code>recording</code> <p>The newly active thread-local recording.</p> <p> TYPE: <code>RecordingStream</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.start_web_viewer_server","title":"<code>def start_web_viewer_server(port=0)</code>","text":"<p>Start an HTTP server that hosts the rerun web viewer.</p> <p>This only provides the web-server that makes the viewer available and does not otherwise provide a rerun websocket server or facilitate any routing of data.</p> <p>This is generally only necessary for application such as running a jupyter notebook in a context where app.rerun.io is unavailable, or does not have the matching resources for your build (such as when running from source.)</p> PARAMETER DESCRIPTION <code>port</code> <p>Port to serve assets on. Defaults to 0 (random port).</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.escape_entity_path_part","title":"<code>def escape_entity_path_part(part)</code>","text":"<p>Escape an individual part of an entity path.</p> <p>For instance, <code>escape_entity_path_path(\"my image!\")</code> will return <code>\"my\\ image\\!\"</code>.</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> PARAMETER DESCRIPTION <code>part</code> <p>An unescaped string</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The escaped entity path.</p> <p> TYPE: <code>str</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.new_entity_path","title":"<code>def new_entity_path(entity_path)</code>","text":"<p>Construct an entity path, defined by a list of (unescaped) parts.</p> <p>If any part if not a string, it will be converted to a string using <code>str()</code>.</p> <p>For instance, <code>new_entity_path([\"world\", 42, \"my image!\"])</code> will return <code>\"world/42/my\\ image\\!\"</code>.</p> <p>See https://www.rerun.io/docs/concepts/entity-path for more on entity paths.</p> PARAMETER DESCRIPTION <code>entity_path</code> <p>A list of strings to escape and join with slash.</p> <p> TYPE: <code>list[Any]</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The escaped entity path.</p> <p> TYPE: <code>str</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.thread_local_stream","title":"<code>def thread_local_stream(application_id)</code>","text":"<p>Create a thread-local recording stream and use it when executing the decorated function.</p> <p>This can be helpful for decorating a function that represents a job or a task that you want to to produce its own isolated recording.</p> Example <p><pre><code>@rr.thread_local_stream(\"rerun_example_job\")\ndef job(name: str) -&gt; None:\n    rr.save(f\"job_{name}.rrd\")\n    for i in range(5):\n        time.sleep(0.2)\n        rr.log(\"hello\", rr.TextLog(f\"Hello {i) from Job {name}\"))\n\nthreading.Thread(target=job, args=(\"A\",)).start()\nthreading.Thread(target=job, args=(\"B\",)).start()\n</code></pre> This will produce 2 separate rrd files, each only containing the logs from the respective threads.</p> PARAMETER DESCRIPTION <code>application_id</code> <p>The application ID that this recording is associated with.</p> <p> TYPE: <code>str</code> </p>"},{"location":"common/other_classes_and_functions/#rerun.recording_stream_generator_ctx","title":"<code>def recording_stream_generator_ctx(func)</code>","text":"<p>Decorator to manage recording stream context for generator functions.</p> <p>This is only necessary if you need to implement a generator which yields while holding an open recording stream context which it created. This decorator will ensure that the recording stream context is suspended and then properly resumed upon re-entering the generator.</p> <p>See: https://github.com/rerun-io/rerun/issues/6238 for context on why this is necessary.</p> <p>There are plenty of things that can go wrong when mixing context managers with generators, so don't use this decorator unless you're sure you need it.</p> <p>If you can plumb through <code>RecordingStream</code> objects and use those directly instead of relying on the context manager, that will always be more robust.</p> Example <pre><code>@rr.recording_stream.recording_stream_generator_ctx\ndef my_generator(name: str) -&gt; Iterator[None]:\n    with rr.new_recording(name):\n        rr.save(f\"{name}.rrd\")\n        for i in range(10):\n            rr.log(\"stream\", rr.TextLog(f\"{name} {i}\"))\n            yield i\n\nfor i in my_generator(\"foo\"):\n    pass\n</code></pre>"},{"location":"common/script_helpers/","title":"Script Helpers","text":""},{"location":"common/script_helpers/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/script_helpers/#rerun.script_add_args","title":"<code>def script_add_args(parser)</code>","text":"<p>Add common Rerun script arguments to <code>parser</code>.</p> PARAMETER DESCRIPTION <code>parser</code> <p>The parser to add arguments to.</p> <p> TYPE: <code>ArgumentParser</code> </p>"},{"location":"common/script_helpers/#rerun.script_setup","title":"<code>def script_setup(args, application_id, recording_id=None, default_blueprint=None)</code>","text":"<p>Run common Rerun script setup actions. Connect to the viewer if necessary.</p> PARAMETER DESCRIPTION <code>args</code> <p>The parsed arguments from <code>parser.parse_args()</code>.</p> <p> TYPE: <code>Namespace</code> </p> <code>application_id</code> <p>The application ID to use for the viewer.</p> <p> TYPE: <code>str</code> </p> <code>recording_id</code> <p>Set the recording ID that this process is logging to, as a UUIDv4.</p> <p>The default recording_id is based on <code>multiprocessing.current_process().authkey</code> which means that all processes spawned with <code>multiprocessing</code> will have the same default recording_id.</p> <p>If you are not using <code>multiprocessing</code> and still want several different Python processes to log to the same Rerun instance (and be part of the same recording), you will need to manually assign them all the same recording_id. Any random UUIDv4 will work, or copy the recording id for the parent process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>default_blueprint</code> <p>Optionally set a default blueprint to use for this application. If the application already has an active blueprint, the new blueprint won't become active until the user clicks the \"reset blueprint\" button. If you want to activate the new blueprint immediately, instead use the <code>rerun.send_blueprint</code> API.</p> <p> TYPE: <code>BlueprintLike | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/script_helpers/#rerun.script_teardown","title":"<code>def script_teardown(args)</code>","text":"<p>Run common post-actions. Sleep if serving the web viewer.</p> PARAMETER DESCRIPTION <code>args</code> <p>The parsed arguments from <code>parser.parse_args()</code>.</p> <p> TYPE: <code>Namespace</code> </p>"},{"location":"common/timeline_functions/","title":"Timeline functions","text":""},{"location":"common/timeline_functions/#rerun","title":"<code>rerun</code>","text":""},{"location":"common/timeline_functions/#rerun.set_time_sequence","title":"<code>def set_time_sequence(timeline, sequence, recording=None)</code>","text":"<p>Set the current time for this thread as an integer sequence.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>set_time_sequence</code>.</p> <p>For example: <code>set_time_sequence(\"frame_nr\", frame_nr)</code>.</p> <p>You can remove a timeline again using <code>disable_timeline(\"frame_nr\")</code>.</p> <p>There is no requirement of monotonicity. You can move the time backwards if you like.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline to set the time for.</p> <p> TYPE: <code>str</code> </p> <code>sequence</code> <p>The current time on the timeline in integer units.</p> <p> TYPE: <code>int</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.set_time_seconds","title":"<code>def set_time_seconds(timeline, seconds, recording=None)</code>","text":"<p>Set the current time for this thread in seconds.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>rerun.set_time_seconds</code> or <code>rerun.set_time_nanos</code>.</p> <p>For example: <code>set_time_seconds(\"capture_time\", seconds_since_unix_epoch)</code>.</p> <p>You can remove a timeline again using <code>disable_timeline(\"capture_time\")</code>.</p> <p>Very large values will automatically be interpreted as seconds since unix epoch (1970-01-01). Small values (less than a few years) will be interpreted as relative some unknown point in time, and will be shown as e.g. <code>+3.132s</code>.</p> <p>The bindings has a built-in time which is <code>log_time</code>, and is logged as seconds since unix epoch.</p> <p>There is no requirement of monotonicity. You can move the time backwards if you like.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline to set the time for.</p> <p> TYPE: <code>str</code> </p> <code>seconds</code> <p>The current time on the timeline in seconds.</p> <p> TYPE: <code>float</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.set_time_nanos","title":"<code>def set_time_nanos(timeline, nanos, recording=None)</code>","text":"<p>Set the current time for this thread.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>rerun.set_time_nanos</code> or <code>rerun.set_time_seconds</code>.</p> <p>For example: <code>set_time_nanos(\"capture_time\", nanos_since_unix_epoch)</code>.</p> <p>You can remove a timeline again using <code>disable_timeline(\"capture_time\")</code>.</p> <p>Very large values will automatically be interpreted as nanoseconds since unix epoch (1970-01-01). Small values (less than a few years) will be interpreted as relative some unknown point in time, and will be shown as e.g. <code>+3.132s</code>.</p> <p>The bindings has a built-in time which is <code>log_time</code>, and is logged as nanos since unix epoch.</p> <p>There is no requirement of monotonicity. You can move the time backwards if you like.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline to set the time for.</p> <p> TYPE: <code>str</code> </p> <code>nanos</code> <p>The current time on the timeline in nanoseconds.</p> <p> TYPE: <code>int</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.disable_timeline","title":"<code>def disable_timeline(timeline, recording=None)</code>","text":"<p>Clear time information for the specified timeline on this thread.</p> PARAMETER DESCRIPTION <code>timeline</code> <p>The name of the timeline to clear the time for.</p> <p> TYPE: <code>str</code> </p> <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/timeline_functions/#rerun.reset_time","title":"<code>def reset_time(recording=None)</code>","text":"<p>Clear all timeline information on this thread.</p> <p>This is the same as calling <code>disable_timeline</code> for all of the active timelines.</p> <p>Used for all subsequent logging on the same thread, until the next call to <code>rerun.set_time_nanos</code> or <code>rerun.set_time_seconds</code>.</p> PARAMETER DESCRIPTION <code>recording</code> <p>Specifies the <code>rerun.RecordingStream</code> to use. If left unspecified, defaults to the current active data recording, if there is one. See also: <code>rerun.init</code>, <code>rerun.set_global_data_recording</code>.</p> <p> TYPE: <code>RecordingStream | None</code> DEFAULT: <code>None</code> </p>"},{"location":"common/utilities/","title":"Utilities","text":""},{"location":"common/utilities/#rerun.utilities","title":"<code>rerun.utilities</code>","text":""},{"location":"common/utilities/#rerun.utilities.data","title":"<code>data</code>","text":"<p>Simple data to be used for Rerun demos.</p>"},{"location":"common/utilities/#rerun.utilities.data.color_grid","title":"<code>color_grid = build_color_grid()</code>  <code>module-attribute</code>","text":"<p>Default color grid</p>"},{"location":"common/utilities/#rerun.utilities.data.color_spiral","title":"<code>color_spiral = build_color_spiral()</code>  <code>module-attribute</code>","text":"<p>Default color spiral</p>"},{"location":"common/utilities/#rerun.utilities.data.rect_pyramid","title":"<code>rect_pyramid = build_rect_pyramid()</code>  <code>module-attribute</code>","text":"<p>Default rect pyramid data</p>"},{"location":"common/utilities/#rerun.utilities.data.build_color_grid","title":"<code>def build_color_grid(x_count=10, y_count=10, z_count=10, twist=0)</code>","text":"<p>Create a cube of points with colors.</p> <p>The total point cloud will have x_count * y_count * z_count points.</p> PARAMETER DESCRIPTION <code>x_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>y_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>z_count</code> <p>Number of points in each dimension.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> <code>twist</code> <p>Angle to twist from bottom to top of the cube</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p>"},{"location":"common/utilities/#rerun.utilities.data.build_color_spiral","title":"<code>def build_color_spiral(num_points=100, radius=2, angular_step=0.02, angular_offset=0, z_step=0.1)</code>","text":"<p>Create a spiral of points with colors along the Z axis.</p> PARAMETER DESCRIPTION <code>num_points</code> <p>Total number of points.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>radius</code> <p>The radius of the spiral.</p> <p> TYPE: <code>float</code> DEFAULT: <code>2</code> </p> <code>angular_step</code> <p>The factor applied between each step along the trigonometric circle.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.02</code> </p> <code>angular_offset</code> <p>Offsets the starting position on the trigonometric circle.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>z_step</code> <p>The factor applied between each step along the Z axis.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p>"},{"location":"common/utilities/#rerun.utilities.data.build_rect_pyramid","title":"<code>def build_rect_pyramid(count=20, width=100, height=100)</code>","text":"<p>Create a stack of N colored rectangles.</p> PARAMETER DESCRIPTION <code>count</code> <p>Number of rectangles to create.</p> <p> TYPE: <code>int</code> DEFAULT: <code>20</code> </p> <code>width</code> <p>Width of the base of the pyramid.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>height</code> <p>Height of the pyramid.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p>"},{"location":"common/utilities/#rerun.utilities.util","title":"<code>util</code>","text":"<p>Simple utilities to be used for Rerun demos.</p>"},{"location":"common/utilities/#rerun.utilities.util.bounce_lerp","title":"<code>def bounce_lerp(a, b, t)</code>","text":"<p>A linear interpolator that bounces between <code>a</code> and <code>b</code> as <code>t</code> goes above <code>1.0</code>.</p> PARAMETER DESCRIPTION <code>a</code> <p>Start value (t == 0).</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>End value (t == 1).</p> <p> TYPE: <code>float</code> </p> <code>t</code> <p>Interpolation coefficient.</p> <p> TYPE: <code>float | ndarray[Any, dtype[Any]]</code> </p>"},{"location":"common/utilities/#rerun.utilities.util.interleave","title":"<code>def interleave(arr1, arr2)</code>","text":"<p>Interleaves two numpy arrays.</p> PARAMETER DESCRIPTION <code>arr1</code> <p>A numpy array of arbitrary shape and length.</p> <p> TYPE: <code>NDArray[float64]</code> </p> <code>arr2</code> <p>A numpy array with the same shape and length as <code>arr1</code>.</p> <p> TYPE: <code>NDArray[float64]</code> </p>"}]}